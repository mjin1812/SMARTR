[{"path":"/articles/1.Segmentation.html","id":"imaging-pre-processing-segmentation","dir":"Articles","previous_headings":"","what":"Imaging, pre-processing & segmentation","title":"1. Imaging, segmentation, and preprocessing","text":"Imaging, segmentation, pre-processing pipeline","code":""},{"path":"/articles/1.Segmentation.html","id":"imaging-parameters","dir":"Articles","previous_headings":"Imaging, pre-processing & segmentation","what":"Imaging parameters","title":"1. Imaging, segmentation, and preprocessing","text":"example images taken confocal scanning microscope (Leica TCS SP8, Leica Microsystems Inc. Wetzlar, Germany) two PMT detectors using dry 20x objective (NA 0.60, working distance 0.5 mm). use following imaging parameters: Pixel size 1.08 x 1.08um2 z-step size 3 um z-stack size 9 um. first channel images (C1) captures YFP staining, second channel images (C2) captures cfos staining. Immunolabelling details documented companion paper (Link). Fields view stitched together form tiled images using automated stage tiling function algorithm LAS X software. example image taken using settings without previous pre-processing steps downloadable. Although pipeline designed generalizable images different parameters recommend organizing saving channel order similar format .","code":""},{"path":"/articles/1.Segmentation.html","id":"file-organization","dir":"Articles","previous_headings":"Imaging, pre-processing & segmentation","what":"File organization","title":"1. Imaging, segmentation, and preprocessing","text":"image file stored hierarchical folder structure slice folder mouse folder: Root folder > project folder > ... > mouse . > slice name > image file image files, also refer slices, assumed follow naming convention mouseNo_slice.ext. slice unique tag index used identify particular section imaged slice. example, use indexing system first number identifies slide number second number identifies position slide. numbers separated underscore. Therefore slice 1_1 represents section one slide one animal. course, indexing approaches can used. create slice name concatenating slice mouse ID separate underscore name images unambiguously. example, one image directory paths: V:/Learned_Helplessness/Mapping_Images/Shock/733/733_1_1 file path image stored directory: V:/Learned_Helplessness/Mapping_Images/Shock/733/733_1_1/733_1_1.lif , image slice name 733_1_1.lif slice . 1_1. section came mouse 733. heirarchical file structure helpful, segmentation files preprocessing files stored image folder mouse object files stored parent mouse directory.","code":""},{"path":"/articles/1.Segmentation.html","id":"fijiimagej-software-setup","dir":"Articles","previous_headings":"Imaging, pre-processing & segmentation","what":"FIJI/ImageJ Software Setup","title":"1. Imaging, segmentation, and preprocessing","text":"use segmentation macros example dataset, Fiji/ImageJ needs installed well Bio-Formats Importer, 3D ImageJ suite, MorphoLibJ plugins. Follow steps webpage install plugins either using manage update site option ImageJ manually. validated pipeline using ImageJ version 2.9.0 (64-bit). Bio-Formats Importer just plugin helps import variety common imaging formats ImageJ. 3D ImageJ Suite provides suite plugins enhance 3D image processing capabilities. segmentation colocalization macros dependent 3D ImageJ Suite plugin validated segmentation scripts latest version plugin (v4.1.5).","code":""},{"path":"/articles/1.Segmentation.html","id":"convert-to-tiff","dir":"Articles","previous_headings":"Imaging, pre-processing & segmentation","what":"Convert to TIFF","title":"1. Imaging, segmentation, and preprocessing","text":"full transparency pre-processing steps, example raw image provided format exported immediately image acquisition. image file format .lif file, proprietary format associated Leica microscopes. make segmentation approach generalizable, convert image .tif files proceeding rest preprocessing. can automatically using Image macro iterates .lif files root folder. Drag macro file ImageJ window macro window pops , click “Run”. see following pop window. batch_create_tiff.ijm pop window Hit “OK”, navigate root folder hit “Select”. ImageJ convert images subdirectories root folder matching .lif extension. using Leica microscopes, starting .tif file serve general entry point pipeline. entry point, empty file created image folder saved image name extension .tif, e.g. 733_1_4.lif. used dummy file hunt proper image name downstream pre-processing segmentation steps. .tif used number .tif files optionally created outputs segmentation. Save empty file image name unique extension","code":""},{"path":"/articles/1.Segmentation.html","id":"flatten-the-tiff-images-for-registration","dir":"Articles","previous_headings":"Imaging, pre-processing & segmentation","what":"Flatten the TIFF images for registration","title":"1. Imaging, segmentation, and preprocessing","text":"Although cell counts may segmented 3D, registration process, single coronal atlas plate Allen Mouse Brain Atlas fitted 2D .tif image. Therefore, processing z-stack images, need flattened channels need collapsed single image used purpose registration. images, ImageJ macro .tif images automatically creating maximum projection image. followup window popup run macro. default parameters fine, can change contrast saturation parameter optimize image saturation levels. Please note .lif extension still used detected original image name. batch_create_max_projection pop window default parameters fine, can change contrast saturation parameter optimize image saturation levels. transformed images autosaved image directory MAX_SliceName.tif. path file used registration path. Note file made, part pipeline using SMARTR related image registration can proceed independently image segmentation.","code":""},{"path":"/articles/1.Segmentation.html","id":"c-fos-segmentation-using-a-generalized-3d-segmentation-macro","dir":"Articles","previous_headings":"Imaging, pre-processing & segmentation","what":"c-Fos segmentation using a generalized 3D segmentation macro","title":"1. Imaging, segmentation, and preprocessing","text":"developed generalized ImageJ macro works well segmenting cells images staining patterns characteristic c-Fos immunolabelling. c-Fos staining typically punctate localizes cell body, cell resembling filled sphere. recommend using macro twice staining two channels similar immunolabelling patterns c-Fos. macro segments c-Fos cells using following steps. Images bandpass filtered Fourier space Image background subtracted using rolling ball algorithm Cells identified using 3D Local Maxima Faster Filter, 3D Spot Segmentation Cells quantified saved using 3D Manager plugin binary segmentation image optionally saved .tif. batch_3DSegmentation_Fast pop window Hit ‘Run’ start macro. default parameters steps already optimized imaging parameters work well example image. parameters also user-modifiable account different imaging parameters different channel orders. Hit ‘OK’ accept current parameters, navigate root folder containing nested subdirectories want process. many images process, recommend running macro overnight, may computationally intensive. processing finished, notice two new .txt. files image folder starting “M_” “Q_” collectively store quantified cell counts cell object’s image properties. “Save segmentation binary?” needs checked step interested running channel colocalization analysis downstream.","code":""},{"path":"/articles/1.Segmentation.html","id":"eyfp-segmentation","dir":"Articles","previous_headings":"Imaging, pre-processing & segmentation","what":"eYFP segmentation","title":"1. Imaging, segmentation, and preprocessing","text":"Due dendritic expression eYFP, use separate segmentation macro optimized segment eYFP+ cells cellular processes branching cell body. segmentation steps similar principle used c-Fos staining: Background subtraction Image blurring Gaussian kernel Image thresholding brightest fraction pixels (e.g. threshold 0.005 top 0.5% brightest pixels) brightest pixels used mask apply 3D watershed algorithim. restricts area application algorithm. default parameters step already optimized imaging parameters.run images colocalization analysis, “Save segmentation .tif?” needs checked step. batch_EYFPSegmentation pop window Hit ‘Run’ navigate root folder want process. Similarly c-Fos segmentation using generalized 3D segmentation macro, new .txt files starting “M_” “Q_” store information quantified cell counts image folder.","code":""},{"path":"/articles/1.Segmentation.html","id":"co-labelled-cell-identification","dir":"Articles","previous_headings":"Imaging, pre-processing & segmentation","what":"Co-labelled cell identification","title":"1. Imaging, segmentation, and preprocessing","text":"step optional interested looking colocalized cell populations. use 3D MultiColoc plugin ImageJ suite identify co-localized cells. plugin identify percentage volumetric overlap objects two different segmented images return table comparisons. Download macro applies plugin images root folder already segmented c-Fos eYFP. Run macro see following menu pop : batch_Coloc_cfos_eyfp popup window Replace entry “C1 segmentation file ext” exact stem .tif storing segmented objects channel 1 (eYFP) without image name. images, stem “_C1_eYFP_LabelImage.tif”. thing channel 2 c-Fos segmentation image. macro save additional colocalization information .txt files image folder. step done, ’re ready import segmentation colocalization information SMARTR pipeline!","code":""},{"path":"/articles/2.Tutorial.html","id":"pre-processing","dir":"Articles","previous_headings":"","what":"0 Pre-processing","title":"2. Mapping Tutorial","text":"SMARTR encapsulates process registration, importation segmentation data, performs downstream analysis. Prior , imaging data must pre-processed cells separately segmented ImageJ/FIJI. separate, -depth article imaging approach, parameters, segmentation process. suggest starting like walk pipeline raw example image. remainder page focus steps relevant registration, segmentation data import, downstream data analysis using SMARTR. recommend completing pre-processing segmentation tutorial example image can walk SMARTR tutorial data. SMARTR package features","code":""},{"path":"/articles/2.Tutorial.html","id":"file-organization","dir":"Articles","previous_headings":"0 Pre-processing","what":"0.1 File organization","title":"2. Mapping Tutorial","text":"image file stored hierarchical folder structure slice folder mouse folder: Root folder > project folder > ... > mouse . > slice name > image file image files, also refer slices, assumed follow naming convention mouseNo_slice.ext. slice unique tag index used identify particular section imaged. example, use indexing system first number identifies slide number second number identifies position slide. numbers separated underscore. Therefore slice 1_1 represents section one slide one animal. course, indexing approaches can used. create slice name concatenating slice mouse ID separate underscore name images unambiguously. example, one image directory paths: V:/Learned_Helplessness/Mapping_Images/Shock/733/733_1_1 file path image stored directory: V:/Learned_Helplessness/Mapping_Images/Shock/733/733_1_1/733_1_1.lif , image slice name 733_1_1.lif slice . 1_1. section came mouse 733. heirarchical file structure helpful, segmentation files pre-processing files stored image folder mouse object files stored parent mouse directory.","code":""},{"path":"/articles/2.Tutorial.html","id":"flatten-any-z-stacks-for-registration","dir":"Articles","previous_headings":"0 Pre-processing","what":"0.2 Flatten any z-stacks for registration","title":"2. Mapping Tutorial","text":"Although cell counts may segmented 3D, registration process, single coronal atlas plate Allen Mouse Brain Atlas fitted 2D .tif image. Therefore, processing z-stack images, need flattened channels need collapsed single image used purpose registration. step needs completed prior using SMARTR registration. detail using pre-processing article","code":""},{"path":"/articles/2.Tutorial.html","id":"tutorial-outline","dir":"Articles","previous_headings":"","what":"1 Tutorial outline","title":"2. Mapping Tutorial","text":"tutorial, walk following steps using example preprocessed image: Setting pipeline specifying experimental parameters save directories. interactive registration process. Importing raw segmentation data .txt files generated ImageJ multiple channels. data transformed segmentation object compatible wholebrain functions. Removing cells map outside boundaries atlas. Omitting regions default list regions omit. Omitting new regions omit user-curated list image. Removing cells contralateral hemisphere per slice registrations divided right left hemispheres. Obtaining cell counts normalized region volume (per mm3) region areas (per mm2). (Optional) Splitting hippocampal cell counts dorsal ventral based user-defined AP coordinate ranges. IX Aggregating cell counts across multiple animals. Quality checks look outliers region cell counts prior analysis. Functions easy analysis, based categorical variables entered mouse attributes. include functions region cross correlations network analyses. Functions analysis automated visualization detailed example analysis notebook steps achieved functions operate objects SMARTR. Objects used store raw data processed data, well imaging, animal, experimental parameters relevant analysis. Note separate article, describe ways scale-many steps map images high-throughput manner scripts. modularity functions lend creation many different custom workflows. provide links example notebooks others can modify datasets.","code":""},{"path":"/articles/2.Tutorial.html","id":"pipeline-setup","dir":"Articles","previous_headings":"","what":"2 Pipeline setup","title":"2. Mapping Tutorial","text":"Okay, let’s walkthrough pipeline example mouse image process! can download example fully pre-processed image folder . image came mouse 733, create empty folder named 733 location choice upzip image folder folder.","code":"# Load SMARTR library(SMARTR)"},{"path":"/articles/2.Tutorial.html","id":"initializing-a-mouse-object","dir":"Articles","previous_headings":"2 Pipeline setup","what":"2.1 Initializing a mouse object","title":"2. Mapping Tutorial","text":"Let’s create instance mouse object. mouse object store data mouse . 733, name mouse_733. also want store important experiment metadata related mouse. can done using SMARTR::mouse() constructor function: Note don’t initially store mouse metadata using variables passed mouse object constructor, metadata ‘empty’ default values stored placeholders.","code":"# Create and store information for mouse  mouse_733 <- mouse(mouse_ID = \"733\",                    sex = \"female\",                    strain =\"129s\",                    experiment = \"learned helplessness\",                    group = \"context\",   # Flexible attribute to encapsulate different experimental conditions, e.g. genotype, behavior conditions, that doesn't fit into other categories.                    cohort = \"group_A\",                    output_path = \"P:/DENNYLABV/Michelle_Jin/Wholebrain pipeline/733\")   # replace the output path with the path to your specific mouse folder               print(mouse_733) print(mouse())"},{"path":"/articles/2.Tutorial.html","id":"modifying-mouse-attributes","dir":"Articles","previous_headings":"2 Pipeline setup","what":"2.2 Modifying mouse attributes","title":"2. Mapping Tutorial","text":"find ’ve made mistake setting attributes mouse object, don’t worry. attributes can easily modified. just need pull info list containing mouse attributes manually correct : now finished setting mouse object ready store imaging automated cell count data !","code":"# get the mouse info list mouse_info <- attr(mouse_733, 'info')  # Change mouse attributes to reflect your mouse and experiment. mouse_info$sex           <- 'male' mouse_info$group         <- 'shock' mouse_info$cohort        <- \"group_B\"  # Change mouse's attributes by storing the mouse info list back into the mouse attr(mouse_733, 'info') <- mouse_info  # Check the updates  print(mouse_733)"},{"path":"/articles/2.Tutorial.html","id":"initializing-a-slice-object","dir":"Articles","previous_headings":"2 Pipeline setup","what":"2.3 Initializing a slice object","title":"2. Mapping Tutorial","text":"Now need create slice object. also want store imaging metadata slice object’s attributes. ’ll use SMARTR::slice() constructor function. , look image compare standardized mouse atlas decide accurate AP coordinate prior creating object. can reference either SMART reference atlas http://openbrainmap.org. example image, ’ve already pre-assigned coordinate. Additionally, need process hemisphere separately due hemisphere separation, tears, etc, specified. built-ways clean data right hemisphere slice omit contralateral hemisphere demonstration. left right side align well onto single atlas plate, initialize one slice object set hemisphere attribute NULL (don’t set , default). Note certain metadata specifically fed slice object constructor, default values take. example left_regions_excluded list regions omitted default, including fiber tracts, ventricular systems (VS), layer 1 cortical regions. can use Allen Mouse Brain Ontology list default regions exclude.","code":"s <- slice(slice_ID = \"1_4\",              coordinate = -2.14,         # AP coordinate that matches best matches the images            conversion_factor = 1.0833, # Pixel-to-micron conversion factor.             bin = 1,                    # If the image was downsampled by a bin factor in imageJ            z_width = 9,                # z-stack thickness in microns            hemisphere = NULL,          # \"left\", \"right\" or NULL (both sides). This is necessary if you are only processing one hemisphere due to hemisphere separation, tears, etc.            channels = c('cfos', 'eyfp', 'colabel'),  # Channels to process            # registration_path = 'V:/Michelle_Jin/Wholebrain pipeline/733/733_1_4/MAX_733_1_4.tif'# Path to the registration image. Replace with your specific path            registration_path = 'P:\\\\DENNYLABV\\\\Michelle_Jin\\\\Wholebrain pipeline\\\\733\\\\733_1_4_fully_processed/MAX_733_1_4.tif'# Path to the registration image. Replace with your specific path           )    # Let's check the data stored correctly with print() print(s)"},{"path":"/articles/2.Tutorial.html","id":"adding-slice-objects-to-mouse-objects","dir":"Articles","previous_headings":"2 Pipeline setup","what":"2.4 Adding slice objects to mouse objects","title":"2. Mapping Tutorial","text":"ready bundle slice information mouse. first… Type code R console: see named list called slices pops can complete suggestion hitting TAB. $ operator useful accessing named element list. Right now, slices list NULL, empty doesn’t contain anything. Tip: can use $ operator look named elements mouse. change soon add slice mouse. Let’s check help page function add_slice(). Tip: Check “Usage” “Examples” section code example use particular function package Now ’ve read use function, let’s add slice mouse line : Note ’ve changed computers find location mouse folder changed way, e.g. different drive mapping letters Windows different OS, can adjust using reset_mouse_root() function.","code":"`mouse_733$` # Check the length of slices in a mouse first length(mouse_733$slices) ?add_slice mouse_733 <- add_slice(mouse_733, s)  # Check the length of slices now length(mouse_733$slices)  # Access the new slice information with the code below mouse_733$slices$`1_4` # Change to the correct drive letter mouse_733 <- reset_mouse_root(mouse_733, input_path = \"C:/Michelle_Jin/Wholebrain pipeline/733\")"},{"path":"/articles/2.Tutorial.html","id":"interactive-registration","dir":"Articles","previous_headings":"","what":"3 Interactive registration","title":"2. Mapping Tutorial","text":"Now ready begin registering slice! Registration process aligning imaging dataset standardized mouse atlas. wholebrain package generating set correspondance points around contours brain image, aligning analagous points around atlas plate standardized mouse atlas. register must first check contours brain sample can detected properly. proper outline brain contours necessary generate good first-guess correspondance point placement.","code":""},{"path":"/articles/2.Tutorial.html","id":"detecting-brain-contours","dir":"Articles","previous_headings":"3 Interactive registration","what":"3.1 Detecting brain contours","title":"2. Mapping Tutorial","text":"get good outline brain, need feed filter list contains various parameters used segment feature interest image wholebrain functions. can autogenerate default filter list SMARTR::filter. Within filter, need modify parameter called brain.threshold critical detection contours brain. adjust check effects changing brain.threshold parameter using function adjust_brain_outline() function uses default brain.threshold 10 pops window showing detected contours blue line. contours unsatisfactory, press “esc” “Q” exit popup can use interactive console interface modify value. recommend modifying value steps +/- 2. pass filter toSMARTR::register() function knows brain.threshold use. Note another GUI window pops modify various filter parameters, however quite buggy often crashes recommend using console interface. imaging parameters standardized. may need adjust filter image image basis. use brain.threshold 2 detect contours image. Brain contour detection blue.","code":"# store the default filter list from the SMARTR package filter <- SMARTR::filter  # Manually adjust the brain.threshold in the filter list  filter$brain.threshold <- 2  # Pass a slice object as an argument # Interactively adjust the brain threshold until it looks good # Store the output as a filter filter <- adjust_brain_outline(mouse_733$slices$`1_4`, filter = filter)"},{"path":"/articles/2.Tutorial.html","id":"registration-of-a-slice","dir":"Articles","previous_headings":"3 Interactive registration","what":"3.2 Registration of a slice","title":"2. Mapping Tutorial","text":"register() function one generic functions package. , function depends type objects fed . register() function can used slice mouse objects. Examples used function slice mouse objects found Usage section. Pull help page code : use mouse object function need specify slice_ID hemisphere want register, mouse object may contain many slices. Let register example image using mouse object! code look slice 1_4 mouse_733 apply filter settings brain.threshold. Note mouse object may contain many slices, need specify slice_ID hemisphere register First pass registration. graphics window pop showing atlas superimposed registration image two outlines. yellow side “atlas space” correspondence points appear around boundaries atlas. purple side “image space” correspondence points fit around contours actual brain tissue image. One window loaded, interactive console interface allowing addition, removal, changing default correspondence points. can read fitting process original wholebrain publication. point, may find useful save hard work perfecting registration. can save mouse object output folder command . Add timestamp parameter save mouse object today’s date: recommend always saving timestamp never lose day’s worth work accidentally overwrite something.","code":"?register mouse_733 <- register(mouse_733,                        slice_ID = \"1_4\",                       hemisphere = NULL,                       filter = filter) save_mouse(mouse_733) save_mouse(mouse_733, timestamp = TRUE)"},{"path":[]},{"path":"/articles/2.Tutorial.html","id":"import-raw-imagej-data","dir":"Articles","previous_headings":"4 Add segmentation data","what":"4.1 Import raw ImageJ data","title":"2. Mapping Tutorial","text":"segmentation data ImageJ stored .txt files. can use import_segmentation_ij() generic function import raw data ImageJ. console output indicating successful importation segmentation data look like : Note currently, importation function relies output txt files output macros used segment cells. macros automatically name segmentation output txt files channel import function recognizes names txt files. Since often stain eyfp cfos, colocalization colabel, three hard coded channel names pipeline. However, built-capability include additional custom channels. generalized segmentation macro found recursively segment channel specified .tiff image. output segmentation txt files can imported import_segmentation_custom(). Check function documentation information.","code":"mouse_733 <- import_segmentation_ij(mouse_733,                                     slice_ID = '1_4',                                     hemisphere = NULL,                                     channels = c('eyfp', 'cfos', 'colabel')) Imported the following files:   [1] \"M_G_eYFP_733_1_4.txt\" [1] \"Q_G_eYFP_733_1_4_eYFP.txt\" Imported the following files:   [1] \"M_C2_cfos_733_1_4.txt\" [1] \"Q_C2_cfos_733_1_4_cfos.txt\" [1] \"733_1_4cfos_SpotSegmentation_ColocOnly.txt\" [1] \"M_733_1_4_Fast_G_eYFP_LabelImage_C1_16bit.txt\""},{"path":"/articles/2.Tutorial.html","id":"creating-a-segmentation-object","dir":"Articles","previous_headings":"4 Add segmentation data","what":"4.2 Creating a segmentation object","title":"2. Mapping Tutorial","text":"importing raw segmentation data, data needs reformatted compatible registration information using wholebrain functions. simply done using make_segmentation_object() function:","code":"mouse_733 <- make_segmentation_object(mouse_733,                                       slice_ID = '1_4',                                       hemisphere = NULL,                                       channels = c('eyfp', 'cfos', \"colabel\"))"},{"path":[]},{"path":"/articles/2.Tutorial.html","id":"forward-warp-data-to-atlas-space","dir":"Articles","previous_headings":"5 Mapping cells to atlas space","what":"5.1 Forward warp data to atlas space","title":"2. Mapping Tutorial","text":"ready map segmentation data onto atlas space! forward warp segmented cells onto atlas space map_cells_to_atlas() generic function.","code":"mouse_733 <- map_cells_to_atlas(mouse_733,                                 slice_ID = '1_4',                                 hemisphere = NULL,                                 channels = c('eyfp', 'cfos', \"colabel\"),                                 clean =  FALSE,                                 display = FALSE)"},{"path":"/articles/2.Tutorial.html","id":"cleaning-mapped-cell-data","dir":"Articles","previous_headings":"5 Mapping cells to atlas space","what":"5.2 Cleaning mapped cell data","title":"2. Mapping Tutorial","text":"slices, may automatic list regions exclude hemisphere. automatically set slice attribute create can edit like slice attribute demonstrated earlier. slice attributes, list regions can accessed $left_regions_excluded $right_regions_excluded. run exclude_anatomy function, automatically omit regions hemisphere lists. commands prints default excluded regions left right hemispheres. can directly edit list attribute add additional regions omit per hemisphere slice object. simply need add region acronym Allen Mouse Brain Atlas Ontology. example , pretend rip primary somatosensory cortex right hemisphere add region exclude. Alternatively, can enter additional regions exclude directly argument exclude_anatomy() function. Pull help page exclude_anatomy understand perform following capabilities: exclude contralateral hemisphere slices either ‘right’ ‘left’ hemisphere attribute. automatically removes anything registered unused hemisphere. clean cell counts map outside brain contours exclude cell counts layer 1 cortex manually specify additional regions want exclude hemisphere. exclude secondary motor area left hemisphere can visualize filtered counts set plot_filtered parameter TRUE. Note however, sometimes graphical rendering flip left right sides.","code":"# Print the default regions excluded list for the right hemisphere print(attr(mouse_733$slices$`1_4`, \"info\")$right_regions_excluded)  # Print the default regions excluded list for the left hemisphere print(attr(mouse_733$slices$`1_4`, \"info\")$left_regions_excluded) # Get default list right_regions_excluded <- attr(mouse_733$slices$`1_4`, \"info\")$right_regions_excluded  # Append the primary somatosensory area to the list of regions to exclude  attr(mouse_733$slices$`1_4`, \"info\")$right_regions_excluded <- c(right_regions_excluded, \"SSp\") mouse_733 <- exclude_anatomy(mouse_733,                               slice_ID = '1_4',                              hemisphere = NULL,                              channels = c(\"eyfp\", \"cfos\", \"colabel\"),                              clean = TRUE,                               exclude_left_regions = c(\"MOs\"),                              exclude_right_regions = c(\"SS\"),                              exclude_layer_1 = TRUE,                               exclude_hemisphere = FALSE,                              plot_filtered = TRUE)"},{"path":"/articles/2.Tutorial.html","id":"normalize-cell-counts-by-region","dir":"Articles","previous_headings":"","what":"6 Normalize cell counts by region","title":"2. Mapping Tutorial","text":"Getting cell counts per region normalized volume area mm3 mm2 respectively.","code":""},{"path":"/articles/2.Tutorial.html","id":"get-slice-volumes","dir":"Articles","previous_headings":"6 Normalize cell counts by region","what":"6.1 Get slice volumes","title":"2. Mapping Tutorial","text":"order get cell counts per region mouse normalized volume, exact volume region slice needs calculated. accomplished function get_registered_volumes(). function automatically calculate region volumes per hemisphere slice.","code":"# Calculate region volumes for the full slice mouse_733 <- get_registered_volumes(mouse_733,                                     slice_ID = \"1_4\",                                     hemisphere = NULL)"},{"path":"/articles/2.Tutorial.html","id":"get-a-combined-cell-data-table","dir":"Articles","previous_headings":"6 Normalize cell counts by region","what":"6.2 Get a combined cell data table","title":"2. Mapping Tutorial","text":"get_cell_table() function aggregate forward warped cell counts across slices one data frame named cell_table. can especially useful plotting purposes. can access cell table channel $ operator (e.g. mouse_325$cell_table$cfos). can use aggregated dataset want plot interactive “glass brain” plot slices mouse. useful function show interactive representation cells cells mapped single animal.","code":"mouse_733 <- get_cell_table(mouse_733, channels = c(\"cfos\", \"eyfp\", \"colabel\")) # Plot an interactive 3D plot of the cfos channel SMART::glassbrain2(mouse_733$cell_table$cfos, jitter = TRUE)"},{"path":"/articles/2.Tutorial.html","id":"get-normalized-cell-counts","dir":"Articles","previous_headings":"6 Normalize cell counts by region","what":"6.3 Get normalized cell counts","title":"2. Mapping Tutorial","text":"get_registered_volumes() run slice objects within mouse, forward warped counts combined using get_cell_table(), can use function normalize_cell_counts() get normalized cell counts per volume (mm3) per area (mm2). information stored named element mouse called normalized_counts. Tip: parameter simplify_regions collapse normalized cell counts certain keywords (e.g. “layer” “stratum”). region name detected one keywords, merge counts parent structure keywords found. reduces overwhelming amount substructures can compare helps simplify analysis.","code":"mouse_733_0 <- normalize_cell_counts(mouse_733,                                     combine_hemispheres = TRUE,                                     split_hipp_DV = FALSE,                                    simplify_regions = TRUE) # Print preview of normalized counts head(mouse_733_0$normalized_counts)"},{"path":"/articles/2.Tutorial.html","id":"split-hippocampal-counts-into-dorsalventral-counts-optional","dir":"Articles","previous_headings":"6 Normalize cell counts by region","what":"6.4 Split hippocampal counts into Dorsal/Ventral counts (Optional)","title":"2. Mapping Tutorial","text":"Sometimes, want subdivide hippocampus dorsal ventral subregions. wholebrain atlas plates derived Allen Mouse Brain Atlas, intrinsically dorsal ventral subdivisions hippocampus. current strategy use AP coordinate cutoff, hippocampal counts anterior cutoff considered dorsal posterior cutoff considered ventral. can accomplish setting parameters split_hipp_DV = TRUE andDV_split_AP_thresh = -2.7 normalize_cell_counts function.","code":"mouse_733 <- normalize_cell_counts(mouse_733,                                       combine_hemispheres = TRUE,                                       simplify_regions = TRUE,                                      split_hipp_DV = TRUE,                                      DV_split_AP_thresh = -2.7) # Print preview of normalized counts head(mouse_733$normalized_counts)"},{"path":[]},{"path":"/articles/2.Tutorial.html","id":"initializing-an-experiment-object","dir":"Articles","previous_headings":"7 Aggregating mouse data","what":"7.1 Initializing an experiment object","title":"2. Mapping Tutorial","text":"’ve registered enough mice, can begin adding experiment object. Creating experiment object similar way created mouse slice objects one exception–certain experimental attributes meant autopopulated add mouse object left alone object construction. example, multiple mice added experiment object three different drug conditions, experiment object’s attribute drug_groups consist names three drugs given. Check help page see experiment attributes autogenerated. ’ll see experiment_name, experimenters, output_path parameters ones need set manually. Additionally, know adding mice experiment keep processed neural mapping information, individual slice information. ensure unnecessary computer memory isn’t used analysis. Therefore, changes want make cleaning modifying individual slice data done mouse object level. Just like mouse object, can save experiment object, without timestamp.","code":"# Initialize an experiment object my_experiment <- experiment(experiment_name = \"Learned Helplessness\",                             experimenters = c(\"MJ\", \"MyInitials\"),                             output_path = \"V:\\\\Michelle Jin\\\\path_to_output_folder\") #Set this to a location where you want your figures/analysis output to save   # Add a mouse to the experiment my_experiment <- add_mouse(my_experiment, mouse_733) save_experiment(my_experiment, timestamp = TRUE)"},{"path":"/articles/2.Tutorial.html","id":"combine-cell-counts-across-all-the-mice-in-an-experiment","dir":"Articles","previous_headings":"7 Aggregating mouse data","what":"7.2 Combine cell counts across all the mice in an experiment","title":"2. Mapping Tutorial","text":"’ve added enough mice perform analysis, want aggregate data mouse together one dataframe perform analysis . now load saved example experiment object named lh already contains mapped mouse object data learned helplessness mapping experiment. Aggregating normalized cell counts across mice one dataframe done combine_norm_cell_counts() function. special parameter allow take advantage many mouse attributes recorded creation mouse object. vector mouse attributes use split dataset subgroups comparison. example , use group mouse attributes compare Shock Context groups received inescapable shock context training, respectively. additional groupings interest, splitting males females look sex differences, can include sex attribute vector, e.g. c('group', 'sex'). Sometimes, certain attributes like drug may apply experiment, include variables intend using group comparisons analysis avoid cluttering combined dataframe. consistency functions used filter subgroups, values attributes converted strings.","code":"# Load the presaved data load(\"P:\\\\DENNYLABV\\\\Michelle_Jin\\\\Wholebrain pipeline\\\\LH_analysis\\\\learned_helplessness_experiment.RDATA\")  # Print the names of the mice stores in the learned helplessness experiment object print(names(lh$mice)) #>  [1] \"829\"  \"831\"  \"833\"  \"9658\" \"9659\" \"669\"  \"732\"  \"733\"  \"9716\" \"9753\" \"9755\" lh <- combine_cell_counts(lh, by = c('groups', \"sex\", \"age\"))"},{"path":"/articles/2.Tutorial.html","id":"quality-checking-saving-your-data","dir":"Articles","previous_headings":"","what":"8 Quality checking & saving your data","title":"2. Mapping Tutorial","text":"quality segmentation data may depend many factors including immunolabelling quality, sectioning mounting technique, performance segmentation algorithm. also want check “statistical quality” ensure enough mice per group within single brain region compare. functions can use check data can optionally use clean mapped dataset. Additionally, contain log parameter automatically export experiment folder list regions removed .csv file don’t meet quality checks.","code":""},{"path":"/articles/2.Tutorial.html","id":"check-for-outlier-counts","dir":"Articles","previous_headings":"8 Quality checking & saving your data","what":"8.1 Check for outlier counts","title":"2. Mapping Tutorial","text":"function find_outlier_counts() first organize counts sub analysis groups stratified based parameter. mean cell counts analysis group standard deviation calculated. regions counts mouse exceed greater n_sd (default = 2) analysis group, region mouse marked outlier. log = TRUE , output stored csv file file stem region_count_outliers_[channel]. may helpful look back raw data examine whether segmentation algorithm good job around regions given mouse.","code":"lh <- find_outlier_counts(lh, by = c('groups', 'sex', 'age'), n_sd = 2, remove = TRUE, log = TRUE)"},{"path":"/articles/2.Tutorial.html","id":"checking-for-the-minimum-n-number","dir":"Articles","previous_headings":"8 Quality checking & saving your data","what":"8.2 Checking for the minimum n number","title":"2. Mapping Tutorial","text":"want check analysis subgroup minimum n represented per brain region, can use function enough_mice_per_group(). function contains parameter well. Additionally, function also automatically keeps common regions found across comparison groups.","code":"lh <- enough_mice_per_group(lh, by = \"group\", min_n = 4, remove = TRUE, log = TRUE)"},{"path":"/articles/2.Tutorial.html","id":"saving-your-experiment","dir":"Articles","previous_headings":"8 Quality checking & saving your data","what":"8.3 Saving your experiment","title":"2. Mapping Tutorial","text":"like save experiment object, just run function ! use timestamp parameter, experiment object automatically save date way uniquely timestamp progress. concludes end mapping tutorial! Check section 4. Example analysis notebook see apply analysis visualization functions SMARTR dataset.","code":"save_experiment(lh) save_experiment(lh, timestamp = TRUE)"},{"path":"/articles/3.Scripting.html","id":"scripting","dir":"Articles","previous_headings":"","what":"Scripting","title":"3. Scripting & notebooks","text":"little bit scripting can go quite long way scaling pipeline. section, ’ll walk standard scripts batch object creation looping registration correction mouse. registrations mouse finished, also scripts perform batch segmentation importation, cleaning regions omit, mapping. section, recommend spending little time learning R syntax better understand even modify scripts use. Swirl excellent interactive resource check .","code":""},{"path":"/articles/3.Scripting.html","id":"batch-object-creation","dir":"Articles","previous_headings":"Scripting","what":"Batch object creation","title":"3. Scripting & notebooks","text":"Although organization data objects ensure logical heirarchical data management structure SMARTR, can super tedious manually create mouse slice object store slice object appropriate mouse object. provide script essentially performs process automatically reading excel file users can easily enter edit metadata mouse slice object. Download template ! open template, see left side (green colored columns) includes columns populate mouse metadata. Mouse metadata columns right side (blue colored columns) includes columns slice metadata populated. row sheet read used create new slice object. Slice metadata columns Paste example entries mouse slice parameters. slice metadata, registration path column includes formula auto create path max projection image pre-processing steps. can drag formula autopopulate column. separate process naming structure create flattened image, can override formula. Additionally, left_regions_excluded right_regions_excluded columns allow entry default custom list regions exclude hemisphere. left empty, default list used. going append acronyms, please make sure spelling mistakes! ’re done entering spread sheet, either download copy paste script R.","code":"# This batch script: # Reads the parameters from a .xlsx file # Auto creates the mouse and slice objects # Automatically saves the mouse objects in designated mouse output folder   # Dependencies: library(SMARTR) library(tidyverse) library(magrittr) library(stringdist) library(readxl)   # Choose the batch excel file xlsx_path <- file.choose()  #_____________________ autocreate mouse objects _______________________________ # Autocreate each mouse object and save in the mouse directory as it's output folder  # Read sheet, select mouse cols and collapse into distinct values df <- read_excel(xlsx_path,                  na = c(\"\", \"NA\"),                  col_names = TRUE)  mouse_cols <- names(df[1:(which(names(df) == \"slice\") - 2)]) slice_cols <- names(df[which(names(df) == \"slice\"):length(df)])  mice_info <- df %>% dplyr::select(all_of(mouse_cols)) %>% distinct()  for (m in 1:length(mice_info$mouse)){    my_mouse <- mouse(mouse_ID = mice_info$mouse[m],                     sex = mice_info$sex[m],                     age = mice_info$age[m],                     cre_genotype = mice_info$cre_genotype[m],                     reporter = mice_info$reporter[m],                     strain = mice_info$strain[m],                     experiment = mice_info$experiment[m],                     group = mice_info$group[m],                     drug = mice_info$drug[m],                     cohort = mice_info$cohort[m],                     output_path = mice_info$mouse_path[m])     # Save the mouse, then remove it from the environment   assign(paste0(\"mouse_\", mice_info$mouse[m]), my_mouse)   eval((parse(text=paste0(\"save_mouse(mouse_\", mice_info$mouse[m],\")\"))))   eval((parse(text=paste0(\"rm(mouse_\", mice_info$mouse[m],\")\"))))  }  #_____________________ autocreate slice objects _______________________________  # For each new slice # Detect if the mouse has changed # Load the current mouse mouse # Create and populate the slice info # Add it to the mouse # Check if the next slice belongs to the same mouse # If not, save the mouse and delete it from the environment # Move onto next mouse  change_mouse <- TRUE for (s in 1:length(df$slice)){    if (change_mouse && s != 1){     # search, save, then remove current mouse     eval((parse(text=paste0(\"save_mouse(\", cur_mouse, \")\"))))     eval(parse(text=paste0(\"rm(\", cur_mouse, \")\")))      # Load the new mouse     load(file.path(df$mouse_path[s], paste0(\"mouse_\", df$mouse[s], \".RDATA\")))     cur_mouse <- ls()[amatch(\"mouse_\", ls(), maxDist = 4)]     change_mouse <- FALSE   } else if (s == 1) {     # Load the new mouse     load(file.path(df$mouse_path[s], paste0(\"mouse_\", df$mouse[s], \".RDATA\")))      # current mouse     cur_mouse <- ls()[amatch(\"mouse_\", ls(), maxDist = 4)]     change_mouse <- FALSE   }    # Convert the hemispheres column to lower case   df$hemisphere <-  map_chr(df$hemisphere, tolower)    if (df$hemisphere[s] == \"right\" || df$hemisphere[s] == \"left\"){     hemi <- df$hemisphere[s]   } else {     hemi <- NULL   }    # Convert the channels to a vector   channels <- df$channels[s] %>% gsub(\" \", \"\", .) %>%  str_split(.,\",\") %>% unlist()     # Take the default set of regions to exclude if not specified explicitly in the sheet   if (is.na(df$left_regions_excluded[s])){     left_regions_excluded <- c(\"layer 1\", \"fiber tracts\", \"VS\")   } else{     left_regions_excluded <- df$left_regions_excluded[s] %>% gsub(\" \", \"\", .) %>%       str_split(.,\",\") %>% unlist()   }    if (is.na(df$right_regions_excluded[s])){     right_regions_excluded <- c(\"layer 1\", \"fiber tracts\", \"VS\")   } else{     right_regions_excluded <- df$right_regions_excluded[s] %>% gsub(\" \", \"\", .) %>%       str_split(.,\",\") %>% unlist()   }    # Populate the slice information   my_slice <- SMARTR::slice(slice_ID = df$slice[s],                             coordinate = df$`atlas coordinate`[s],                             conversion_factor = df$`conversion factor`[s],                             bin = df$bin[s],                             z_width= df$`z-width (um)`[s],                             hemisphere = hemi,                             channels = channels,                             registration_path = df$`registration path`[s],                             left_regions_excluded = left_regions_excluded,                             right_regions_excluded = right_regions_excluded)    eval(parse(text = paste0(cur_mouse, \"<- add_slice(\", cur_mouse, \", my_slice, replace = TRUE)\")))   print(eval(parse(text = paste0(cur_mouse))))    # get current mouse number   cur_mouse_no <- str_split(cur_mouse, \"_\") %>% unlist()   cur_mouse_no <- cur_mouse_no[-1] %>% as.double()    if (s == length(df$mouse)){     # Save mouse if its the last one     eval((parse(text=paste0(\"save_mouse(\", cur_mouse, \")\"))))   } else if (df$mouse[s + 1] != cur_mouse_no){     change_mouse = TRUE   } }"},{"path":"/articles/3.Scripting.html","id":"registration-correction-looping-notebooks","dir":"Articles","previous_headings":"Scripting","what":"Registration correction looping notebooks","title":"3. Scripting & notebooks","text":"improve experience registrations, provide interactive notebook looping image. automatically streamlines process finding accurate brain contour image, auto-loop next image register within mouse. Instructions code chunk included notebook. looping notebook","code":""},{"path":"/articles/3.Scripting.html","id":"batch-segmentation-importation-and-mapping","dir":"Articles","previous_headings":"Scripting","what":"Batch segmentation importation and mapping","title":"3. Scripting & notebooks","text":"automate process atlas mapping across many mice, provide demo batch script allows batch segmentation importation, mapping, region exclusion, concatenation datasets across slices mouse. running code, make sure registrations complete within mice. Additionally make sure segmentation macros ImageJ run images segmentation output available importation SMARTR. batch mapping script","code":""},{"path":"/articles/4.Example Analysis Notebook.html","id":"analysis-setup","dir":"Articles","previous_headings":"","what":"1 Analysis Setup","title":"4. Example analysis notebook","text":"analysis tutorial load learned helplessness dataset experiment object walk analysis visualization functions SMARTR . can download learned helplessness dataset ! Please see accompanying paper -depth explanation behavioral groups used experiment.","code":""},{"path":"/articles/4.Example Analysis Notebook.html","id":"load-the-libraries-and-data-needed","dir":"Articles","previous_headings":"1 Analysis Setup","what":"1.1 Load the libraries and data needed","title":"4. Example analysis notebook","text":"Load experiment object Print names current data stored within experiment object","code":"library(SMARTR) library(tidyverse)  # Install rstatix if it is not installed already library(rstatix) # Load the experiment data  # Change to point to the experiment object downloaded load(\"P:\\\\DENNYLABV\\\\Michelle_Jin\\\\Wholebrain pipeline\\\\LH_analysis\\\\learned_helplessness_experiment.RDATA\")  # Change where the analysis folder is stored in the experiment object # Edit the path below to point your own folder location attr(lh, \"info\")$output_path <- \"P:\\\\DENNYLABV\\\\Michelle_Jin\\\\Wholebrain pipeline\\\\LH_analysis\"   # print the experiment object to see what attributes are available print(lh) ## $experiment_name ## [1] \"learned_helplessness\" ##  ## $experimenters ## [1] \"MJ\" \"SO\" ##  ## $channels ## [1] \"cfos\"    \"eyfp\"    \"colabel\" ##  ## $experiment_groups ## [1] \"Shock\"   \"Context\" ##  ## $drug_groups ## [1] \"MJ\" NA   ##  ## $sex_groups ## [1] \"male\" ##  ## $cohorts ## [1] NA ##  ## $strains ## [1] \"129S\" \"129\"  ##  ## $genotypes ## [1] \"pos\" ##  ## $reporters ## [1] \"eyfp\" ##  ## $ages ## [1] 6.39 7.18 6.52 6.33 7.11 5.41 ##  ## $output_path ## [1] \"P:\\\\DENNYLABV\\\\Michelle_Jin\\\\Wholebrain pipeline\\\\LH_analysis\" print(names(lh)) ## [1] \"mice\""},{"path":"/articles/4.Example Analysis Notebook.html","id":"combine-the-processed-cell-counts-across-all-the-mice-","dir":"Articles","previous_headings":"1 Analysis Setup","what":"1.2 Combine the processed cell counts across all the mice.","title":"4. Example analysis notebook","text":"concatenates normalized regional cell count table mouse one long dataframe. parameter list mouse attributes types want use make analysis subgroups. example, include = c('sex','age') wanted perform analysis data grouped males females age subjects. dataset Shock Context stored flexible generic attribute group, use variable. now new list called combined_normalized_counts, element combined normalized cell count table per channel. specific regions like exclude analysis, can using code entering region acronyms toremove vector. , demonstrate removing CA2 region.","code":"lh <- combine_cell_counts(lh, by = c('group'))  # print the name of stored data print(names(lh)) ## [1] \"mice\"                           \"combined_normalized_counts\"     ## [3] \"combined_counts_per_slice_list\" # print the names of each channel cell count table print(names(lh$combined_normalized_counts)) ## [1] \"cfos\"    \"eyfp\"    \"colabel\" toremove <- c(\"CA2\")  channels <- names(lh$combined_normalized_counts) toremove <- c(toremove, SMARTR::get.sub.structure(toremove)) for (channel in channels){   lh$combined_normalized_counts[[channel]] <- lh$combined_normalized_counts[[channel]] %>% dplyr::filter(!acronym %in% toremove) }"},{"path":"/articles/4.Example Analysis Notebook.html","id":"normalize-colabelled-counts-by-a-particular-channel-","dir":"Articles","previous_headings":"1 Analysis Setup","what":"1.3 Normalize colabelled counts by a particular channel.","title":"4. Example analysis notebook","text":"optional step, particularly pertinent engram research. Sometimes want normalize number colabelled cells per region number eYFP cells c-Fos cells. allows users gauge fraction cells “reactivated” original ensemble population (colabel+/eYFP+) number reactivated cells proportion ensembles active memory expression (colabel+/c-Fos+). leave choice use either/denominators analyze data users. normalized colabelled counts can now treated independent channel analyze.","code":"# Normalize the colabelled counts by a particular channel lh <- normalize_colabel_counts(lh, denominator_channel = \"eyfp\")   # Uncomment the following line if you would like to also analyze colabelled cells normalized by c-Fos # lh <- normalize_colabel_counts(lh, denominator_channel = \"cfos\")  # Print the names of each channel cell count table. New channels, where colabelled counts are normalized by  # eyfp and/or cfos should be present. print(names(lh$combined_normalized_counts)) ## [1] \"cfos\"              \"eyfp\"              \"colabel\"           ## [4] \"colabel_over_eyfp\""},{"path":"/articles/4.Example Analysis Notebook.html","id":"quality-checking-all-region-outlier-counts-across-all-channels-","dir":"Articles","previous_headings":"1 Analysis Setup","what":"1.4 Quality checking all region outlier counts across all channels.","title":"4. Example analysis notebook","text":"Details functions covered mapping tutorial page. Removing region outliers counts 2 standard deviations group mean removed. evaluated independently per channel. Making sure minimum mice per group represented region count.","code":"lh <- find_outlier_counts(lh, by = c(\"group\"), n_sd = 2, remove = TRUE, log = TRUE) ## There were 1 outliers found. Outliers were based on within group mean and standard deviation. ## Saved regions outliers dataframe at: ## P:\\DENNYLABV\\Michelle_Jin\\Wholebrain pipeline\\LH_analysis/region_count_outliers_cfos.csv ## # A tibble: 1 x 10 ## # Groups:   acronym [1] ##   mouse_ID group acronym name   count area.mm2 volume.mm3 normalized.count.by.~1 ##      <dbl> <chr> <chr>   <chr>  <int>    <dbl>      <dbl>                  <dbl> ## 1      732 Shock RE      Nucle~   108   0.0666   0.000600                  1621. ## # i abbreviated name: 1: normalized.count.by.area ## # i 2 more variables: normalized.count.by.volume <dbl>, outlier <lgl> ## There were 3 outliers found. Outliers were based on within group mean and standard deviation. ## Saved regions outliers dataframe at: ## P:\\DENNYLABV\\Michelle_Jin\\Wholebrain pipeline\\LH_analysis/region_count_outliers_eyfp.csv ## # A tibble: 3 x 10 ## # Groups:   acronym [3] ##   mouse_ID group acronym name   count area.mm2 volume.mm3 normalized.count.by.~1 ##      <dbl> <chr> <chr>   <chr>  <int>    <dbl>      <dbl>                  <dbl> ## 1     9755 Shock FC      Fasci~    24    0.114    0.00103                  210.  ## 2      669 Shock OT      Olfac~   309    2.14     0.0193                   144.  ## 3      669 Shock SI      Subst~   129    2.51     0.0226                    51.5 ## # i abbreviated name: 1: normalized.count.by.area ## # i 2 more variables: normalized.count.by.volume <dbl>, outlier <lgl> ## There were 1 outliers found. Outliers were based on within group mean and standard deviation. ## Saved regions outliers dataframe at: ## P:\\DENNYLABV\\Michelle_Jin\\Wholebrain pipeline\\LH_analysis/region_count_outliers_colabel.csv ## # A tibble: 1 x 10 ## # Groups:   acronym [1] ##   mouse_ID group acronym name   count area.mm2 volume.mm3 normalized.count.by.~1 ##      <dbl> <chr> <chr>   <chr>  <int>    <dbl>      <dbl>                  <dbl> ## 1      669 Shock LA      Later~     3    0.151    0.00136                   19.8 ## # i abbreviated name: 1: normalized.count.by.area ## # i 2 more variables: normalized.count.by.volume <dbl>, outlier <lgl> ## No regions outliers were found within each group for channel colabel_over_eyfp lh <- enough_mice_per_group(lh, by = c(\"group\"), min_n = 4, remove = TRUE, log = TRUE) ## Removed regions for cfos channel. ## Removed regions for eyfp channel. ## Removed regions for colabel channel. ## Removed regions for colabel_over_eyfp channel. ## There were regions below the minimum n: ## Saved regions below the threshold at location: P:\\DENNYLABV\\Michelle_Jin\\Wholebrain pipeline\\LH_analysis/regions_below_N_thresh.csv"},{"path":"/articles/4.Example Analysis Notebook.html","id":"analysis-statistical-comparisons-and-visualization-functions","dir":"Articles","previous_headings":"","what":"2 Analysis, statistical comparisons and visualization functions","title":"4. Example analysis notebook","text":"helpful now conceptualize analysis composed two parts: 1) One function performs data wrangling analysis behind scenes. 2) second function responsible visualization, built-auto-export figures. section cover analysis transformation data stored experiment object. Visualization/plotting, export figures functions covered section 3. data output analyses typically stored experiment object SMARTR package function. Depending function, data can auto-exported .csv file experiment output folder.","code":""},{"path":"/articles/4.Example Analysis Notebook.html","id":"exporting-formatted-regional-counts-list-with-multiple-comparisons-correction","dir":"Articles","previous_headings":"2 Analysis, statistical comparisons and visualization functions","what":"2.1 Exporting formatted regional counts list with multiple comparisons correction","title":"4. Example analysis notebook","text":"Generating formatted regional counts list false discovery rate correction (FDR) can performed dplyr rstatix package functions. user-friendly function perform flexibly multiple groupings planned incorporated later SMARTR package.","code":""},{"path":"/articles/4.Example Analysis Notebook.html","id":"perform-pairwise-group-comparisons-in-region-counts-and-correct-for-multiple-comparisons","dir":"Articles","previous_headings":"2 Analysis, statistical comparisons and visualization functions > 2.1 Exporting formatted regional counts list with multiple comparisons correction","what":"Perform pairwise group comparisons in region counts and correct for multiple comparisons","title":"4. Example analysis notebook","text":"code uses FDR (Benjamini-Hochberg) method adjusting p-values multiple comparisons. done separately eYFP, c-Fos, colabel/eYFP channels.","code":"stats.eyfp <- lh$combined_normalized_counts$eyfp %>% group_by(acronym, name) %>%   t_test(normalized.count.by.volume~group) %>% adjust_pvalue(method = \"BH\") %>%     add_significance() stats.cfos <- lh$combined_normalized_counts$cfos %>% group_by(acronym, name) %>%   t_test(normalized.count.by.volume~group) %>% adjust_pvalue(method = \"BH\") %>%     add_significance() stats.colabel_over_eyfp <- lh$combined_normalized_counts$colabel_over_eyfp %>% group_by(acronym, name) %>%   t_test(normalized.count.by.volume~group) %>% adjust_pvalue(method = \"BH\") %>%     add_significance()"},{"path":"/articles/4.Example Analysis Notebook.html","id":"create-summary-table-for-eyfp","dir":"Articles","previous_headings":"2 Analysis, statistical comparisons and visualization functions > 2.1 Exporting formatted regional counts list with multiple comparisons correction","what":"Create summary table for eYFP","title":"4. Example analysis notebook","text":"following code pivots stats table long form concatenate raw normalized counts","code":"wide_eyfp_norm_counts <- lh$combined_normalized_counts$eyfp %>% group_by(group, acronym, name) %>%       summarise(mean.normalized.count.by.volume = mean(normalized.count.by.volume),       sem.normalized.count.by.volume = SMARTR::sem(normalized.count.by.volume),       n = n()) wide_eyfp_norm_counts <-  wide_eyfp_norm_counts %>% pivot_wider(names_from =  group, names_sep = \".\", values_from = c(group, acronym, name, mean.normalized.count.by.volume, sem.normalized.count.by.volume, n)) %>% unnest() %>% rename(acronym = acronym.Context,                           name = name.Context)  joined_eyfp_stats <- wide_eyfp_norm_counts %>% select(c(name, acronym, starts_with(\"mean\"), starts_with(\"sem\"))) %>% right_join(stats.eyfp, by = c(\"acronym\", \"name\")) %>% select(-.y., -group1, -group2) %>% rename(n.Context = n1, n.Shock = n2)  file_name <- attr(lh, \"info\")$output_path %>% file.path(\"eyfp_regions_stats_table.csv\") write.csv(joined_eyfp_stats, file_name)"},{"path":"/articles/4.Example Analysis Notebook.html","id":"create-summary-table-for-c-fos","dir":"Articles","previous_headings":"2 Analysis, statistical comparisons and visualization functions > 2.1 Exporting formatted regional counts list with multiple comparisons correction","what":"Create summary table for c-Fos","title":"4. Example analysis notebook","text":"","code":"wide_cfos_norm_counts <- lh$combined_normalized_counts$cfos %>% group_by(group, acronym, name) %>%       summarise(mean.normalized.count.by.volume = mean(normalized.count.by.volume),       sem.normalized.count.by.volume = SMARTR::sem(normalized.count.by.volume),       n = n())  wide_cfos_norm_counts <-  wide_cfos_norm_counts %>% pivot_wider(names_from =  group, names_sep = \".\", values_from = c(group, acronym, name, mean.normalized.count.by.volume, sem.normalized.count.by.volume, n)) %>% unnest() %>% rename(acronym = acronym.Context,                           name = name.Context)  joined_cfos_stats <- wide_cfos_norm_counts %>% select(c(name, acronym, starts_with(\"mean\"), starts_with(\"sem\"))) %>% right_join(stats.cfos, by = c(\"acronym\", \"name\")) %>% select(-.y., -group1, -group2) %>% rename(n.Context = n1,                                              n.Shock = n2)  file_name <- attr(lh, \"info\")$output_path %>% file.path(\"cfos_regions_stats_table.csv\") write.csv(joined_cfos_stats, file_name)"},{"path":"/articles/4.Example Analysis Notebook.html","id":"create-summary-table-for-colabeleyfp-channels","dir":"Articles","previous_headings":"2 Analysis, statistical comparisons and visualization functions > 2.1 Exporting formatted regional counts list with multiple comparisons correction","what":"Create summary table for colabel/eYFP channels","title":"4. Example analysis notebook","text":"","code":"wide_colabel_over_eyfp_norm_counts <- lh$combined_normalized_counts$colabel_over_eyfp %>% group_by(group, acronym, name) %>%       summarise(mean.normalized.count.by.volume = mean(normalized.count.by.volume),       sem.normalized.count.by.volume = SMARTR::sem(normalized.count.by.volume),       n = n())  wide_colabel_over_eyfp_norm_counts <-  wide_colabel_over_eyfp_norm_counts %>% pivot_wider(names_from =  group, names_sep = \".\", values_from = c(group, acronym, name, mean.normalized.count.by.volume, sem.normalized.count.by.volume, n)) %>%       unnest() %>% rename(acronym = acronym.Context,                           name = name.Context)  joined_colabel_over_eyfp_stats <- wide_colabel_over_eyfp_norm_counts %>% select(c(name, acronym, starts_with(\"mean\"), starts_with(\"sem\"))) %>% right_join(stats.colabel_over_eyfp, by = c(\"acronym\", \"name\")) %>%    select(-.y., -group1, -group2) %>% rename(n.Context = n1,                                              n.Shock = n2)  file_name <- attr(lh, \"info\")$output_path %>% file.path(\"colabel_over_eyfp_regions_stats_table.csv\") write.csv(joined_colabel_over_eyfp_stats, file_name)"},{"path":"/articles/4.Example Analysis Notebook.html","id":"get-pairwise-region-correlations","dir":"Articles","previous_headings":"2 Analysis, statistical comparisons and visualization functions","what":"2.2 Get pairwise region correlations","title":"4. Example analysis notebook","text":"get_correlations() function used calculate pairwise Pearson correlations across regions within analysis group. can done channel. Later can use generate correlation heatmap. also option adjust p-values using different multiple comparisons methods using user-specified alpha value can also applied threshold significance. Check function’s help page details. Like previous functions, parameter analysis focused correct grouping variables values stratify data groups. heat map calculated one set grouping variable values, need specified values parameter. following example generated correlation matrix eyfp channel independently Context Shock groups. channel decided use alpha threshold 0.005 indicating significantly correlated regions. can add additional channels process, like use alpha across channels. values grouping variables identify unique analysis group, used name stored results experiment separated, values separated “_“. example, analysis , results stored Context Shock. analysis instead used parameters = c(\"sex\", \"group\"), values = c(\"female\", \"AD\"), results stored list name female_AD. refer correlation_list_name. can check correlation_list_name values printing :","code":"# Get correlations for the eyfp  lh <- get_correlations(lh,                        by = c(\"group\"),                        values = c(\"Context\"),                        channels = c(\"eyfp\"),                        p_adjust_method = \"none\",                        alpha =  0.01)  lh <- get_correlations(lh,                        by = c(\"group\"),                        values = c(\"Shock\"),                        channels = c(\"eyfp\"),                        p_adjust_method = \"none\",                        alpha =  0.01) names(lh$correlation_list) ## [1] \"Context\" \"Shock\""},{"path":"/articles/4.Example Analysis Notebook.html","id":"permute-pairwise-region-correlation-differences-between-groups","dir":"Articles","previous_headings":"2 Analysis, statistical comparisons and visualization functions","what":"2.3 Permute pairwise region correlation differences between groups","title":"4. Example analysis notebook","text":"can compare difference pairwise region correlations two different analysis groups using permutation analysis. ’ll use function correlation_diff_permutation(). function requires run get_correlations() analysis group channel want compare prior using . also allows specify number shuffles random seed number (figure replication). Additionally, option multiple comparison’s adjustment; applied, previous adjustment get_correlations() redundantly applied. Multiple comparisons adjustment change p-value later plotted volcano plot. example , compare Context analysis group Shock group. results analysis stored within experiment object list called permutation_p_matrix","code":"lh <- correlation_diff_permutation(lh,                                    correlation_list_name_1 = \"Context\",                                    correlation_list_name_2 = \"Shock\",                                    channels = c(\"eyfp\"),                                    p_adjust_method = \"none\",                                    alpha = 0.01                                    ) names(lh$permutation_p_matrix) ## [1] \"Context_vs_Shock\""},{"path":"/articles/4.Example Analysis Notebook.html","id":"create-region-networks-with-summary-stats","dir":"Articles","previous_headings":"2 Analysis, statistical comparisons and visualization functions","what":"2.4 Create region networks with summary stats","title":"4. Example analysis notebook","text":"Now can move process automatically creating networks R using create_networks() function. function also contingent running get_correlations() first networks constructed correlation coefficents. alpha parameters specifies threshold node included networks based p-values pairwise-region correlation coefficients. keep edges include network indicated significant correlation heatmaps, set alpha parameter . running function,network object channel per analysis group created using tidygraph stored experiment object. can access data lh$networks$<network_name> network_name identical correlation_list_name used generate network. Now network summary statistics can calculate using network object. calculate using function summarise_networks(). function designed summarize stats multiple networks supplied parameter network_names. additional parameters save_stats, save_degree_distribution, save_betweenness_distribution, save_efficiency_distribution used save indicated network summary statistics csv files experiment object folder. handy prefer graph values externally another software, Graphpad Prism instead R.","code":"lh <- create_networks(lh,                       correlation_list_name = \"Context\",                       channels = c(\"eyfp\"),                       alpha = 0.01,                       pearson_thresh = .9) lh <- create_networks(lh,                       correlation_list_name = \"Shock\",                       channels = c(\"eyfp\"),                       alpha = 0.01,                       pearson_thresh = .9) lh <- summarise_networks(lh,                          channels = c(\"eyfp\"),                          network_names = c(\"Context\", \"Shock\"),                          save_stats = TRUE,                          save_degree_distribution = TRUE,                          save_betweenness_distribution = TRUE,                          save_efficiency_distribution = TRUE) ## Joining with `by = join_by(group)`Joining with `by = join_by(group)`"},{"path":"/articles/4.Example Analysis Notebook.html","id":"plotting-visualization-functions","dir":"Articles","previous_headings":"","what":"3 Plotting & Visualization functions","title":"4. Example analysis notebook","text":"hard work allow us generate beautiful plots. First conventions note plotting functions. Unlike package functions presented , assigning output plotting function experiment object. return value plotting functions. analysis done primary output want either graphics window, image saved output folder. Almost functions parameters allowing specify height width inches, image extension (e.g. “.png”, “.jpg”), well colors (color palettes) save plot . functions allow adjust xlim ylim axes order fit data change plot aesthestics adding ggplot() theme. Pull help pages see plot characteristics customizable function!","code":""},{"path":"/articles/4.Example Analysis Notebook.html","id":"bar-plot-across-all-regions","dir":"Articles","previous_headings":"3 Plotting & Visualization functions","what":"3.1 Bar plot across all regions","title":"4. Example analysis notebook","text":"plot broad overview counts per group across mapped regions channel, can use plot_normalized_counts function. variety visualization parameters user-modifiable, including bar colors per group. Note currently, function equipped plot based generic group attribute rather attributes age sex.","code":""},{"path":"/articles/4.Example Analysis Notebook.html","id":"plotting-all-regions-with-mapped-eyfp-counts","dir":"Articles","previous_headings":"3 Plotting & Visualization functions > 3.1 Bar plot across all regions","what":"Plotting all regions with mapped eYFP counts","title":"4. Example analysis notebook","text":"mapped eYFP regions. output following code chunks shown, function can easily called channels.","code":"# Chose the group colors for the eyfp channel to plot as a hexadecimal color code eyfp.colors <- c(Context = \"#FFFFFF\", Shock = \"#028A0F\")   # Plot a long region bar plot plot_normalized_counts(e = lh,                        channels = c(\"eyfp\"),                        by = \"group\",                        values = list(\"Context\", \"Shock\"),                        colors = eyfp.colors,                        title = NULL,                        height = 11, # Specify the height of the saved plot in inches                        width = 7.5, # Specify the  width of the save plot in inches                        region_label_angle = 0,                        label_text_size = 7,                        print_plot = TRUE,                        flip_axis = TRUE,                        save_plot = TRUE,                        legend.justification = c(0, 0),                        legend.position = \"inside\",                        legend.position.inside = c(0.7, 0.05),                        legend.direction = \"vertical\",                        facet_background_color = \"#FFFFFF\",                        image_ext = \".png\") ## $eyfp"},{"path":"/articles/4.Example Analysis Notebook.html","id":"plotting-all-regions-with-mapped-c-fos-counts","dir":"Articles","previous_headings":"3 Plotting & Visualization functions > 3.1 Bar plot across all regions > Plotting all regions with mapped eYFP counts","what":"Plotting all regions with mapped c-Fos counts","title":"4. Example analysis notebook","text":"","code":"# Chose the group colors for the cfos channel to plot as a hexadecimal color code cfos.colors <- c(Context = \"#FFFFFF\", Shock = \"#ff2a04\")   # Plot a long region bar plot plot_normalized_counts(e = lh,                        channels = c(\"cfos\"),                        by = \"group\",                        values = list(\"Context\", \"Shock\"),                        colors = cfos.colors,                        title = NULL,                        height = 11, # Specify the height of the saved plot in inches                        width = 7.5, # Specify the  width of the save plot in inches                        region_label_angle = 0,                        label_text_size = 7,                        print_plot = TRUE,                        flip_axis = TRUE,                        save_plot = TRUE,                        limits = c(0, 2e+05),                        legend.justification = c(0, 0),                        legend.position = \"inside\",                        legend.position.inside = c(0.7, 0.05),                        legend.direction = \"vertical\",                        facet_background_color = \"#FFFFFF\",                        image_ext = \".pdf\") ## $cfos"},{"path":"/articles/4.Example Analysis Notebook.html","id":"plotting-all-regions-with-mapped-colabeleyfp-counts","dir":"Articles","previous_headings":"3 Plotting & Visualization functions > 3.1 Bar plot across all regions > Plotting all regions with mapped eYFP counts","what":"Plotting all regions with mapped colabel/eYFP counts","title":"4. Example analysis notebook","text":"","code":"# Chose the group colors for the colabel channel to plot as a hexadecimal color code colabel.colors <- c(Context = \"#FFFFFF\", Shock = \"#ffc845\")  plot_normalized_counts(e = lh,                        channels = c(\"colabel_over_eyfp\"),                        by = \"group\",                        values = list(\"Context\", \"Shock\"),                        colors = colabel.colors,                        title = NULL,                        height = 11,                        width = 7.5,                        unit_label = \"co-labelled/EYFP+\",                        region_label_angle = 0,                        label_text_size = 7,                        print_plot = TRUE,                        flip_axis = TRUE,                        save_plot = TRUE,                        limits = c(0, 0.8),                        legend.justification = c(0, 0),                        legend.position = \"inside\",                        legend.position.inside = c(0.7, 0.85),                        legend.direction = \"vertical\",                        facet_background_color = \"#e5f3e7\",                        image_ext = \".pdf\") ## $colabel_over_eyfp"},{"path":"/articles/4.Example Analysis Notebook.html","id":"bar-plot-of-normalized-colabelled-cells-across-user-specified-regions","dir":"Articles","previous_headings":"3 Plotting & Visualization functions","what":"3.2 Bar plot of normalized colabelled cells across user-specified regions","title":"4. Example analysis notebook","text":"like quickly look percentage normalized colabelled cells specific regions, can also use plot_percent_colabel function. function designed take two mouse attributes “map” respective graphs aesthetics color pattern display bar plot. rois parameter allows selective plotting specific regions subregions interest. Just enter acronyms string vector rois parameter. plot regions subregions Dentate Gyrus (DG) Cornu Ammonis (CA). Selectively mapped co-labelled regions normalized eYFP counts. Selectively mapped co-labelled regions normalized c-Fos count. Note: optional package ggpattern required mapping pattern aesthetic using pattern_mapping parameter make sure installed running function.","code":"plot_percent_colabel(lh,                      channel = \"eyfp\", # Channel to be used as denominator in counts                      color_mapping = \"group\",                      colors = eyfp.colors,                      plot_individual = TRUE,                      print_plot = TRUE,                      save_plot = TRUE,                      rois = c(\"DG\", \"CA\"),                      ylim = c(-5,40),                      image_ext = \".svg\") ## Checking also for child regions of specified roi(s). Only rois and child rois that overlap with common ##             regions of both channels will be used. ## Checking also for child regions of specified roi(s). Only rois and child rois that overlap with common ##             regions of both channels will be used. ## Warning: `geom_hline()`: Ignoring `mapping` because `yintercept` was ## provided. ## Warning: Removed 2 rows containing missing values or values outside the scale range ## (`geom_point()`).  ## Warning: Removed 2 rows containing missing values or values outside the scale range ## (`geom_point()`).  ## Warning: Removed 2 rows containing missing values or values outside the scale range ## (`geom_point()`).  ## Warning: Removed 2 rows containing missing values or values outside the scale range ## (`geom_point()`). plot_percent_colabel(lh,                      channel = \"cfos\", # Channel to be used as denominator in counts                      color_mapping = \"group\",                      colors = cfos.colors,                      plot_individual = TRUE,                      print_plot = TRUE,                      save_plot = TRUE,                      rois = c(\"DG\", \"CA\"),                      ylim = c(-5,40),                      image_ext = \".svg\") ## Checking also for child regions of specified roi(s). Only rois and child rois that overlap with common ##             regions of both channels will be used. ## Checking also for child regions of specified roi(s). Only rois and child rois that overlap with common ##             regions of both channels will be used. ## Warning: `geom_hline()`: Ignoring `mapping` because `yintercept` was ## provided."},{"path":"/articles/4.Example Analysis Notebook.html","id":"correlation-heatmap-analysis","dir":"Articles","previous_headings":"3 Plotting & Visualization functions","what":"3.3 Correlation Heatmap Analysis","title":"4. Example analysis notebook","text":"can automatically plot heatmaps pairwise region correlations using function plot_correlation_heatmaps(). simply specify name correlation list respective colors (hexadecimal string) corresponding channels specified get_correlations(). Regional correlation heatmap eYFP activity Context group. Regional correlation heatmap eYFP activity Inescapable Shock group.","code":"p_list <- plot_correlation_heatmaps(lh,                           channels = c(\"eyfp\"),                           correlation_list_name = \"Context\",                           sig_color = \"black\",                           sig_nudge_y = -0.5, # helps center and shift the significance asterisks                           print_plot = FALSE,                           colors = c( \"#00782e\"),                           save_plot = TRUE)  p_list <- plot_correlation_heatmaps(lh,                           channels = c(\"eyfp\"),                           correlation_list_name = \"Shock\",                           sig_color = \"black\",                           sig_nudge_y = -0.5,                           print_plot = FALSE,                           colors = c( \"#00782e\"),                           save_plot = TRUE) ## Warning: Removed 16 rows containing missing values or values outside the scale range ## (`geom_text()`).  ## Warning: Removed 16 rows containing missing values or values outside the scale range ## (`geom_text()`)."},{"path":"/articles/4.Example Analysis Notebook.html","id":"visualization-of-correlation-permutation-analysis","dir":"Articles","previous_headings":"3 Plotting & Visualization functions","what":"3.4 Visualization of correlation permutation analysis","title":"4. Example analysis notebook","text":"volcano_plot() shows us summary analysis results, plots pearson correlation coefficient differences (CT pearson coefficient - pearson coefficient) permuted p-values null distribution. horizontal line represents designated significance cutoff. vertical lines plotted +/- 1 allow easier visualization correlation differences large groups. colored dots upper right left quadrants, including intersect significance line, indicate significantly different regional connections groups, pearson correlation differences magnitude > 1. Volcano plot eYFP channel. Next, can better visualize actual region pairs different two analysis groups direction correlation coefficients change parallel_coordinate_plot(). region pairs volcano plot alpha level correlation coefficient differences greater absolute one included graph. Parallel coordinate plot eYFP channel.","code":"# User optional theme to define the aesthetics of the plot using ggplot2 syntax plt_theme <- ggplot2::theme_classic() +   theme(text = element_text(size = 34),         line = element_line(size = 1.0),         axis.line = element_line(colour = 'black', size = 1.0),         plot.title = element_text(hjust = 0.5, size = 36),         axis.ticks.length = unit(5.5,\"points\"),         axis.text.x = element_text(colour = \"black\", size =34),         axis.text.y = element_text(colour = \"black\", size = 34)) ## Warning: The `size` argument of `element_line()` is deprecated as of ggplot2 ## 3.4.0.  ## Warning: Please use the `linewidth` argument instead. # Plot a volcano plot volcano_plot(lh,              permutation_comparison = \"Context_vs_Shock\",              channels = c(\"eyfp\"),              colors =  c(\"#00782e\"),              height = 8,              width = 10,              title = \"\",              print_plot = FALSE,              ylim = c(0,4),              point_size = 2,              plt_theme = plt_theme) ## [1] \"P:\\\\DENNYLABV\\\\Michelle_Jin\\\\Wholebrain pipeline\\\\LH_analysis/figures/volcano_plot__eyfp.png\" ## $eyfp # User optional theme to define the aesthetics of the plot using ggplot2 syntax plt_theme <- ggplot2::theme_classic() +   theme(text = element_text(size = 34),         line = element_line(size = 1.0),         axis.line = element_line(colour = 'black', size = 1.0),         plot.title = element_text(hjust = 0.5, size = 36),         axis.ticks.length = unit(5.5,\"points\"),         axis.text.x = element_text(colour = \"black\", size =34),         axis.text.y = element_text(colour = \"black\", size = 34)   )   # Plot a parallel coordinate plot parallel_coordinate_plot(lh,                          permutation_comparison = \"Context_vs_Shock\",                          channels = c( \"eyfp\"),                          colors =  c(\"#00782e\"),                          x_label_group_1 = \"CT\",                          x_label_group_2 = \"IS\",                          height = 8,                          width = 10,                          print_plot = TRUE,                          label_size = 6,                          plt_theme= plt_theme                          ) ## $eyfp"},{"path":"/articles/4.Example Analysis Notebook.html","id":"plot-network-plots","dir":"Articles","previous_headings":"3 Plotting & Visualization functions","what":"3.5 Plot network plots","title":"4. Example analysis notebook","text":"plot_networks() function automatically plots output create_networks(). must specify name network want plot. customizable features setting edge color (taken hexadecimal string) positively correlated connections. Additionally, can customize aesthetics adding themes compatible ggraph ggplot2 themes. plot networks eyfp channel Context Inescapable Shock groups. eYFP activity network Context group. eYFP activity network Inescapable Shock group.","code":"# Custom ggplot and ggraph themes  graph_theme <- ggraph::theme_graph() + theme(plot.title = element_text(hjust = 0.5, size = 36),                                              legend.text = element_text(size = 18),                                              legend.title = element_text(size = 18))  plot_networks(lh,               network_name =\"Context\",               channels = c(\"eyfp\"),               title = \"Context\",               degree_scale_limit = c(1,8),               height = 10,               width = 10,               edge_color = \"#00782e\",               label_size = 6,               label_offset = 0.15) ## Warning: Removed 25 rows containing missing values or values outside the scale range ## (`geom_point()`). ## Warning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family not ## found in Windows font database  ## Warning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family not ## found in Windows font database ## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font ## family not found in Windows font database ## Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, : ## font family not found in Windows font database  ## Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, : ## font family not found in Windows font database ## Warning: Removed 25 rows containing missing values or values outside the scale range ## (`geom_point()`). ## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font ## family not found in Windows font database  ## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font ## family not found in Windows font database ## Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, : ## font family not found in Windows font database  ## Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, : ## font family not found in Windows font database ## Warning: Removed 25 rows containing missing values or values outside the scale range ## (`geom_point()`). ## $eyfp ## Warning: Removed 25 rows containing missing values or values outside the scale range ## (`geom_point()`). ## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font ## family not found in Windows font database  ## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font ## family not found in Windows font database ## Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, : ## font family not found in Windows font database  ## Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, : ## font family not found in Windows font database plot_networks(lh,               network_name = \"Shock\",               channels = c(\"eyfp\"),               title = \"Shock\",               degree_scale_limit = c(1,8),               height = 10,               width = 10,               edge_color = \"#00782e\",               label_size = 6,               label_offset = 0.15) ## Warning: Removed 25 rows containing missing values or values outside the scale range ## (`geom_point()`). ## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font ## family not found in Windows font database  ## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font ## family not found in Windows font database ## Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, : ## font family not found in Windows font database  ## Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, : ## font family not found in Windows font database ## Warning: Removed 25 rows containing missing values or values outside the scale range ## (`geom_point()`). ## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font ## family not found in Windows font database  ## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font ## family not found in Windows font database ## Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, : ## font family not found in Windows font database  ## Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, : ## font family not found in Windows font database ## Warning: Removed 25 rows containing missing values or values outside the scale range ## (`geom_point()`). ## $eyfp ## Warning: Removed 25 rows containing missing values or values outside the scale range ## (`geom_point()`). ## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font ## family not found in Windows font database  ## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font ## family not found in Windows font database ## Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, : ## font family not found in Windows font database  ## Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, : ## font family not found in Windows font database"},{"path":"/articles/5.FAQ.html","id":"faq","dir":"Articles","previous_headings":"","what":"FAQ","title":"5. FAQ","text":"FAQ","code":""},{"path":"/articles/5.FAQ.html","id":"hardware-recommendations","dir":"Articles","previous_headings":"FAQ","what":"Hardware recommendations","title":"5. FAQ","text":"specs computers use processing datasets. RAM: 64GB CPU: Intel(R) Core(TM) i9-10900 recommend minimum 32 GB RAM image processing scripts can intensive.","code":""},{"path":"/articles/5.FAQ.html","id":"os-software-versions","dir":"Articles","previous_headings":"FAQ","what":"OS & Software versions","title":"5. FAQ","text":"OS: Windows 10 Fiji/ImageJ: 2.9.0 (64-bit) 3D ImageJ Suite: 4.1.5","code":""},{"path":"/articles/5.FAQ.html","id":"how-long-should-segmentation-take","dir":"Articles","previous_headings":"FAQ","what":"How long should segmentation take?","title":"5. FAQ","text":"depends specs computer size specs images. Since images somewhat high resolution, image segmentation macro segments 3D 2D, can relatively computationally intensive. However, easy process equivalent dataset ~150 images weekend using computer recommended hardware specs.","code":""},{"path":[]},{"path":"/articles/5.FAQ.html","id":"r-out-of-bounds-error-during-registration-or-mapping","dir":"Articles","previous_headings":"FAQ > What are some common errors I might encounter either using SMARTR or in wholebrain?","what":"R out of bounds error during registration or mapping","title":"5. FAQ","text":"common error encountered registration mapping “bounds error” transformation index bound. largely due detected boundary (blue) around border tissue poor poor fit. Wholebrain fits 32 correspondance points around detected border generate first pass registration, boundary touches borders images, goes outside borders image, throws error. Good brain contour detection blue.","code":""},{"path":"/articles/5.FAQ.html","id":"not-choosing-the-optimal-brain-threshold","dir":"Articles","previous_headings":"FAQ > What are some common errors I might encounter either using SMARTR or in wholebrain? > R out of bounds error during registration or mapping","what":"Not choosing the optimal brain.threshold","title":"5. FAQ","text":"Since detection tissue border depends various factors, image brightness, possible poor border detection due poor brain.threshold value. Please check section 3.1 Detecting brain contours Tutorial page see modify brain threshold.","code":""},{"path":"/articles/5.FAQ.html","id":"i-cant-get-a-good-first-contour-around-my-brains","dir":"Articles","previous_headings":"FAQ > What are some common errors I might encounter either using SMARTR or in wholebrain? > R out of bounds error during registration or mapping","what":"I can’t get a good first contour around my brains","title":"5. FAQ","text":"Unfortunately, contour detection can buggy inconsistent. Please check section 3.1 Detecting brain contours tutorial page see quickly interactively adjust brain.threshold try wide range values. optimal threshold found, recommend increasing brain.threshold value contours detected smaller actual tissue boundaries. proceed registration. first pass registration inaccurate. can quickly manually correct correspondance points using interactive console interface.","code":""},{"path":"/articles/5.FAQ.html","id":"the-contours-of-my-actual-tissue-are-not-contained-in-the-borders-of-the-image","dir":"Articles","previous_headings":"FAQ > What are some common errors I might encounter either using SMARTR or in wholebrain? > R out of bounds error during registration or mapping","what":"The contours of my actual tissue are not contained in the borders of the image","title":"5. FAQ","text":"brain contours image used registration, .e. MAX_name.tif 1. Imaging, segmentation, preprocessing section, touching 4 borders image, may throw bounds error. images either manually edited ImageJ omit brain contours intersecting image border, original .tif image padded small border black pixels.","code":""},{"path":"/articles/5.FAQ.html","id":"not-choosing-the-right-resize-parameter","dir":"Articles","previous_headings":"FAQ > What are some common errors I might encounter either using SMARTR or in wholebrain? > R out of bounds error during registration or mapping","what":"Not choosing the right resize parameter","title":"5. FAQ","text":"scenario may result error size atlas overlay registration larger tissue boundary. ’m sure error occurs, corrected changing size atlas overlay. First pass registration. yellow atlas outline (left) needs fit within borders tissue boundary. Following boundary detection, change size atlas overlay modifying resize parameter filter. optimal range depend imaging resolution","code":"# Optimal value range for our imaging resolution is 0.8-0.12 # Larger resize values result in smaller overlays  filter$resize <- 0.1"},{"path":"/articles/5.FAQ.html","id":"none-of-the-above-fixed-my-issue-","dir":"Articles","previous_headings":"FAQ > What are some common errors I might encounter either using SMARTR or in wholebrain? > R out of bounds error during registration or mapping","what":"None of the above fixed my issue.","title":"5. FAQ","text":"SMARTR wrapper around registration mapping functions wholebrain, also recommend checking wholebrain github detailed questions.","code":""},{"path":"/articles/5.FAQ.html","id":"i-have-damage-to-my-brain-and-i-want-to-exclude-it-from-my-analysis","dir":"Articles","previous_headings":"FAQ > What are some common errors I might encounter either using SMARTR or in wholebrain?","what":"I have damage to my brain and I want to exclude it from my analysis","title":"5. FAQ","text":"ability process subsets regions built-SMARTR package. sections organized order increasing damage severity.","code":""},{"path":"/articles/5.FAQ.html","id":"i-only-want-to-exclude-a-subset-of-regions","dir":"Articles","previous_headings":"FAQ > What are some common errors I might encounter either using SMARTR or in wholebrain? > I have damage to my brain and I want to exclude it from my analysis","what":"I only want to exclude a subset of regions","title":"5. FAQ","text":"capability part exclude_anatomy() function accounted using exclude_right_regions exclude_left_regions parameters. can enter character vector region abbreviations Allen Brain Ontology either parameters add additional regions exclude. Note regions acronyms maintain heirarchical nature ontology, wanted exclude entire thalamus, instead listing every subregion, can just enter TH. Additionally, default layer 1 cortical layer, ventricles, fiber tracts already excluded. default arguments left_regions_excluded right_regions_excluded parameters creating slice object. can set default regions exclude, addition excluded using exclude_anatomy.","code":""},{"path":"/articles/5.FAQ.html","id":"i-have-regions-torn-and-i-only-want-to-process-one-hemisphere","dir":"Articles","previous_headings":"FAQ > What are some common errors I might encounter either using SMARTR or in wholebrain? > I have damage to my brain and I want to exclude it from my analysis","what":"I have regions torn and I only want to process one hemisphere?","title":"5. FAQ","text":"one hemisphere totally ripped beyond salvage, can simply set hemisphere parameter create slice object either left right mark slice analysis left right hemisphere. default value NULL means hemispheres processed. Later exclude_anatomy() run, simply omit unwanted contralateral hemisphere setting exclude_hemisphere TRUE. can take advantage feature well laterality sectioning, left hemisphere needs treated separate hemisphere slice object right. Thus, separate atlas coordinates can assigned either hemisphere.","code":""},{"path":"/articles/5.FAQ.html","id":"i-really-only-want-to-process-one-or-two-regions-per-slice","dir":"Articles","previous_headings":"FAQ > What are some common errors I might encounter either using SMARTR or in wholebrain? > I have damage to my brain and I want to exclude it from my analysis","what":"I really only want to process one or two regions per slice","title":"5. FAQ","text":"unusual case, typically happens section almost completely ripped one two regions remain intact can still processed. solely keep analyzing regions per hemisphere (omit regions), enter regions keep include_left_regions include_right_regions exclude_anatomy() step. , however, recommend processing sections can avoided ensure high quality sections dataset. Alternatively, can used intentionally analyzing one two regions using pipeline, still taking advantage atlas overlay capabilities. can optimize registration regions without regard registering whole plate, use include_right_regions include_left_regions process regions analyzed. set regions beforehand, can also enter parameters making slice object.","code":""},{"path":[]},{"path":"/articles/5.FAQ.html","id":"could-not-find-function-quartz","dir":"Articles","previous_headings":"FAQ > What are some common errors I might encounter either using SMARTR or in wholebrain? > I get a graphics issue","what":"Could not find function “quartz”","title":"5. FAQ","text":"get following error: function quartz calling graphics device driver macOS system, error occurs running pipeline Windows Linux. Calling quartz built internals wholebrain functions. One work around running lines every time load SMARTR library running Windows Linux (can done machines/accounts access X server.).","code":"Error in quartz(width = plate.width * 11.3, height = 7.9) :  could not find function \"quartz\" quartz <- x11"},{"path":[]},{"path":"/articles/6.Development.html","id":"last-update-to-this-webpage","dir":"Articles","previous_headings":"Development environment","what":"Last update to this webpage:","title":"6. Development environment","text":"","code":"Sys.Date() ## [1] \"2024-12-02\""},{"path":"/articles/6.Development.html","id":"development-r-session-information-and-package-versions","dir":"Articles","previous_headings":"Development environment","what":"Development R session information and package versions:","title":"6. Development environment","text":"","code":"library(SMARTR) ## Loading required package: Hmisc ## Loading required package: lattice ## Loading required package: survival ## Loading required package: Formula ## Loading required package: ggplot2 ##  ## Attaching package: 'Hmisc' ## The following objects are masked from 'package:base': ##  ##     format.pval, units ## Loading required package: dplyr ##  ## Attaching package: 'dplyr' ## The following objects are masked from 'package:Hmisc': ##  ##     src, summarize ## The following objects are masked from 'package:stats': ##  ##     filter, lag ## The following objects are masked from 'package:base': ##  ##     intersect, setdiff, setequal, union ##  ## Attaching package: 'SMARTR' ## The following object is masked from 'package:dplyr': ##  ##     slice sessionInfo() ## R version 3.6.3 (2020-02-29) ## Platform: x86_64-w64-mingw32/x64 (64-bit) ## Running under: Windows 10 x64 (build 19045) ##  ## Matrix products: default ##  ## locale: ## [1] LC_COLLATE=English_United States.1252  ## [2] LC_CTYPE=English_United States.1252    ## [3] LC_MONETARY=English_United States.1252 ## [4] LC_NUMERIC=C                           ## [5] LC_TIME=English_United States.1252     ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ## [1] SMARTR_1.0.1    dplyr_1.1.4     Hmisc_4.5-0     ggplot2_3.5.0   ## [5] Formula_1.2-4   survival_3.1-8  lattice_0.20-38 ##  ## loaded via a namespace (and not attached): ##  [1] Rcpp_1.0.7          tidyr_1.1.3         png_0.1-7           ##  [4] rprojroot_2.0.2     digest_0.6.27       utf8_1.2.1          ##  [7] R6_2.5.1            backports_1.1.5     evaluate_0.18       ## [10] pillar_1.9.0        rlang_1.1.0         data.table_1.14.0   ## [13] rstudioapi_0.14     jquerylib_0.1.4     rpart_4.1-15        ## [16] Matrix_1.2-18       checkmate_2.0.0     rmarkdown_2.18      ## [19] pkgdown_2.0.7       textshaping_0.3.4   desc_1.3.0          ## [22] splines_3.6.3       stringr_1.4.0       foreign_0.8-75      ## [25] htmlwidgets_1.5.4   igraph_1.2.6        munsell_0.5.0       ## [28] compiler_3.6.3      xfun_0.22           pkgconfig_2.0.3     ## [31] systemfonts_1.0.2   base64enc_0.1-3     htmltools_0.5.5     ## [34] nnet_7.3-12         tidyselect_1.2.1    tibble_3.2.1        ## [37] gridExtra_2.3       htmlTable_2.2.1     fansi_0.4.1         ## [40] crayon_1.5.2        withr_2.5.0         grid_3.6.3          ## [43] jsonlite_1.7.2      gtable_0.3.1        lifecycle_1.0.4     ## [46] magrittr_2.0.1      scales_1.3.0        cli_3.6.2           ## [49] stringi_1.6.2       cachem_1.0.5        fs_1.5.0            ## [52] latticeExtra_0.6-29 bslib_0.4.2         ragg_1.1.2          ## [55] generics_0.1.3      vctrs_0.6.5         RColorBrewer_1.1-3  ## [58] tools_3.6.3         glue_1.4.2          purrr_0.3.3         ## [61] jpeg_0.1-8.1        fastmap_1.1.0       yaml_2.2.1          ## [64] colorspace_1.4-1    cluster_2.1.0       tidygraph_1.2.0     ## [67] memoise_2.0.1       knitr_1.33          sass_0.4.0"},{"path":"/articles/SMARTR.html","id":"prior-steps-to-get-started","dir":"Articles","previous_headings":"","what":"0 Prior steps to get started","title":"SMARTR","text":"SMARTR stands simple multi-ensemble atlas registration statistical testing R. also self-referential play previous package developed extension wholebrain called SMART.SMARTR interfaces functions packages underneath hood. SMARTR encapsulates process registration performs downstream analysis. Prior , imaging data must pre-processed cells separately segmented ImageJ/FIJI. separate, -depth article imaging pre-processing approach, parameters, segmentation process. provide links example image run though pre-processing segmentation. also separate -depth tutorial article SMARTR using example image. page provides installation instructions broad explanation central package organization around data objects Imaging, segmentation, pre-processing pipeline","code":""},{"path":[]},{"path":"/articles/SMARTR.html","id":"install-rstudio-and-r","dir":"Articles","previous_headings":"1 Installation","what":"1.1 Install RStudio and R","title":"SMARTR","text":"recommend installing R version 3.6. can use R version 4.1+ want access analysis visualization capabilities.","code":""},{"path":"/articles/SMARTR.html","id":"install-wholebrain","dir":"Articles","previous_headings":"1 Installation","what":"1.2 Install wholebrain","title":"SMARTR","text":"Installing wholebrain can finicky. updated instructions installing wholebrain Windows found . Macs, instructions can found . strongly recommend using Windows setup, package used mostly Windows. wholebrain installed, analysis visualization functions may work.","code":""},{"path":"/articles/SMARTR.html","id":"install-smartr","dir":"Articles","previous_headings":"1 Installation","what":"1.3 Install SMARTR","title":"SMARTR","text":"download package github using devtools package, need use install_github() function.also dependencies tidyverse packages install . Install package code : can now load package! can pull package description code : Tip: now , get habit using ? operator pull help page package, object, function, piece data","code":"# Install from CRAN install.packages(\"tidyverse\")`  # If you intend on using wholebrain for mapping, run the code below. require(remotes) install_version(\"ggpraph\", version = \"2.1.0\", repos = \"http://cran.us.r-project.org\")  # Install ggpattern package (optional but useful package for plotting)  devtools::install_github(\"coolbutuseless/ggpattern\")  # Set the devtools install options for just 64-bit architecture. This is important. options(devtools.install.args = \"--no-multiarch\")     # Install package devtools::install_github(\"mjin1812/SMARTR@main\") # Load SMARTR library(SMARTR) ?SMARTR #> No documentation for 'SMARTR' in specified packages and libraries: #> you could try '??SMARTR'"},{"path":[]},{"path":"/articles/SMARTR.html","id":"oop-in-r","dir":"Articles","previous_headings":"2 Introduction to SMARTR","what":"2.1 OOP in R","title":"SMARTR","text":"’s helpful get sense structure data handled bundled together pipeline. Data stored S3 data type objects called slice, mouse, experiment. data objects manipulated special type function called generic function (analogous object method python). Generic functions allow pass objects different classes function, can recognize perform different operations objects depending class. confusing , don’t worry ! much information actually need know use pipeline. ’s just helpful better understand architecture package. get excellent brief overview object oriented programming (OOP) ’s advantages procedural programming, check excellent YouTube video!","code":""},{"path":"/articles/SMARTR.html","id":"slice-objects","dir":"Articles","previous_headings":"2 Introduction to SMARTR","what":"2.2 Slice objects","title":"SMARTR","text":"slice object contain data related registration, segmentation channel, cell counts particular image. also contain metadata images, slice . , brain atlas AP coordinate matches best given image, path image used registration . metadata stored object’s attributes. Run code used ? operator pull documentation slice object. pull help page description slice object attributes. Tip: Usage :: double colons means R specifically looks function, object, help page SMARTR package. isn’t necessary load package, can sometimes help avoid ambiguity identical names things loaded packages.","code":"?SMARTR::slice"},{"path":"/articles/SMARTR.html","id":"mouse-objects","dir":"Articles","previous_headings":"2 Introduction to SMARTR","what":"2.3 Mouse objects","title":"SMARTR","text":"mouse object object store multiple slice objects (therefore information ), eventually store combined cell data region cell counts normalized volume. Like slice, also contain “metadata” mouse stored string attributes. Now, try pulling help page mouse object see attributes can store!","code":""},{"path":"/articles/SMARTR.html","id":"experiment-object","dir":"Articles","previous_headings":"2 Introduction to SMARTR","what":"2.4 Experiment object","title":"SMARTR","text":"experiment object primarily store processed information multiple mouse objects. experimental attributes autopopulate based mouse attributes. example, multiple mice added experiment drug attribute values ketamine saline, experiment attribute drug_groups vector values ketamine saline. Hierarchical object organization package","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Michelle Jin. Author, maintainer. Simon Ogundare. Contributor. Marcos Lanio. Contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Jin M (2024). SMARTR: SMARTR: mapping, analysis, visualization package wholebrain dual-ensemble coronal datasets.. R package version 1.0.1.","code":"@Manual{,   title = {SMARTR: SMARTR: A mapping, analysis, and visualization package for wholebrain dual-ensemble coronal datasets.},   author = {Michelle Jin},   year = {2024},   note = {R package version 1.0.1}, }"},{"path":[]},{"path":"/index.html","id":"welcome-to-the-smartr-package","dir":"","previous_headings":"","what":"Welcome to the SMARTR package!","title":"SMARTR: A mapping, analysis, and visualization package for wholebrain dual-ensemble coronal datasets.","text":"SMARTR package designed high-throughput mapping analysis dual-labelled ensemble datasets. Genetic tagging strategies ArcCreERT2 mouse line allow investigation neural ensembles underlying behavior multiple time points. However, tools exist map dual-labelled ensembles, well overlap across brain traditional coronal sections standardized atlas space. SMARTR package facilitates bridging optimized approach cell-segmentation colocalization developed FIJI/ImageJ registration mapping capabilities wholebrain SMART packages. Moreover, SMARTR provides streamlined API storing metadata related imaging, animal subject, experimental parameters groupings. Data management intrinsically built package, helps automate process combining ensemble datasets across multiple images, animals, experimental groupings. Finally, SMARTR provides set built-analysis visualization functions conduct network analysis ensemble dataset immediate downstream analysis. SMARTR designed facilitate dual-ensemble brain mapping projects lowering technical barrier registration, segmentation, statistical analysis. Check Get Started page installation instructions!","code":""},{"path":"/index.html","id":"publication-citation","dir":"","previous_headings":"","what":"Publication citation","title":"SMARTR: A mapping, analysis, and visualization package for wholebrain dual-ensemble coronal datasets.","text":"Use SMARTR package published eLife reviewed preprint. using SMARTR academic purposes, please use following citation:   Jin Michelle, Ogundare Simon O, Lanio Marcos, Sorid Sophia, Whye Alicia R, Leal Santos Sofia, Franceschini Alessandra, Denny Christine (2024) SMARTR workflow multi-ensemble atlas mapping brain-wide network analysis eLife 13:RP101327","code":""},{"path":"/index.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"SMARTR: A mapping, analysis, and visualization package for wholebrain dual-ensemble coronal datasets.","text":"Answers common questions may found FAQ page. Please look first troubleshoot issues. questions otherwise answered FAQ tutorial, feel free contact mj2947@cumc.columbia.edu clarification.","code":""},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"/reference/add_mouse.html","id":null,"dir":"Reference","previous_headings":"","what":"Add mouse object to an experiment — add_mouse","title":"Add mouse object to an experiment — add_mouse","text":"function takes experiment object mouse object adds mouse object experiment. mouse's unprocessed data, including individual slice information raw imported segmentation registration data added mouse object save space. desire modify data must done mouse object level continuing . function also read individual mouse attributes automatically populate experimental attributes relevant. example, 'group' attribute mouse read automatically added experiment object's 'experimental_groups' attribute new unique experimental group name.","code":""},{"path":"/reference/add_mouse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add mouse object to an experiment — add_mouse","text":"","code":"add_mouse(e, m, replace = FALSE)"},{"path":"/reference/add_mouse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add mouse object to an experiment — add_mouse","text":"e experiment object m mouse object replace (bool, default = FALSE) Replace mouse already contained experiment object.","code":""},{"path":"/reference/add_mouse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add mouse object to an experiment — add_mouse","text":"experiment object","code":""},{"path":"/reference/add_slice.html","id":null,"dir":"Reference","previous_headings":"","what":"Add slice to a mouse object\r\nm <- add_slice(m, s, replace = FALSE) — add_slice","title":"Add slice to a mouse object\r\nm <- add_slice(m, s, replace = FALSE) — add_slice","text":"Add slice mouse object m <- add_slice(m, s, replace = FALSE)","code":""},{"path":"/reference/add_slice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add slice to a mouse object\r\nm <- add_slice(m, s, replace = FALSE) — add_slice","text":"","code":"add_slice(m, s, replace = FALSE)"},{"path":"/reference/add_slice.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add slice to a mouse object\r\nm <- add_slice(m, s, replace = FALSE) — add_slice","text":"m mouse object s slice object replace (bool, default = FALSE) Replace slice already contained mouse object.","code":""},{"path":"/reference/adjust_brain_outline.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjust brain outline. — adjust_brain_outline","title":"Adjust brain outline. — adjust_brain_outline","text":"function takes slice object first applies filter default settings image set slice registration path. interative user loop allows easy adjustment brain threshold since wholebrain GUI tends bit buggy. function returns filter adjusted brain threshold.","code":""},{"path":"/reference/adjust_brain_outline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjust brain outline. — adjust_brain_outline","text":"","code":"adjust_brain_outline(s, filter = NULL)"},{"path":"/reference/adjust_brain_outline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adjust brain outline. — adjust_brain_outline","text":"s slice object filter (list, default = NULL) user passes filter list, use instead presaved filter list SMARTR.","code":""},{"path":"/reference/adjust_brain_outline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adjust brain outline. — adjust_brain_outline","text":"filter (list) wholebrain compatible filter","code":""},{"path":[]},{"path":"/reference/attr2match.html","id":null,"dir":"Reference","previous_headings":"","what":"attr2match — attr2match","title":"attr2match — attr2match","text":"custom list match attributes mouse experiment object respectively.","code":""},{"path":"/reference/attr2match.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"attr2match — attr2match","text":"","code":"attr2match"},{"path":"/reference/attr2match.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"attr2match — attr2match","text":"list","code":""},{"path":"/reference/check_redundant_parents.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for redundant parent regions included in a list of acronyms in a plate. For example, if all the the subregions for\r\nthe hypothalamus are represented, the HY should not be included in the list. — check_redundant_parents","title":"Check for redundant parent regions included in a list of acronyms in a plate. For example, if all the the subregions for\r\nthe hypothalamus are represented, the HY should not be included in the list. — check_redundant_parents","text":"Check redundant parent regions included list acronyms plate. example, subregions hypothalamus represented, HY included list.","code":""},{"path":"/reference/check_redundant_parents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for redundant parent regions included in a list of acronyms in a plate. For example, if all the the subregions for\r\nthe hypothalamus are represented, the HY should not be included in the list. — check_redundant_parents","text":"","code":"check_redundant_parents(acronyms, ontology = \"allen\")"},{"path":"/reference/check_redundant_parents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for redundant parent regions included in a list of acronyms in a plate. For example, if all the the subregions for\r\nthe hypothalamus are represented, the HY should not be included in the list. — check_redundant_parents","text":"acronyms (vec) vector acronyms check possible parents redundantly included vector. ontology (str, default = \"allen\") Region ontology use. options = \"allen\" \"unified\"","code":""},{"path":"/reference/check_redundant_parents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for redundant parent regions included in a list of acronyms in a plate. For example, if all the the subregions for\r\nthe hypothalamus are represented, the HY should not be included in the list. — check_redundant_parents","text":"list containing two elements: one vector unique child acronyms, vector parent regions considered redundant","code":""},{"path":"/reference/combine_cell_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine cell counts across all mice in an experiment into a single dataframe. — combine_cell_counts","title":"Combine cell counts across all mice in an experiment into a single dataframe. — combine_cell_counts","text":"function also stores mouse attribute names (experiment attributes) columns used categorical variables make analysis subgroups. values attributes (group, drug, age) automatically converted string values consistency.","code":""},{"path":"/reference/combine_cell_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine cell counts across all mice in an experiment into a single dataframe. — combine_cell_counts","text":"","code":"combine_cell_counts(e, by)"},{"path":"/reference/combine_cell_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine cell counts across all mice in an experiment into a single dataframe. — combine_cell_counts","text":"e experiment object (str) names experiment attributes (categorical variables) used create analysis subgroups.","code":""},{"path":[]},{"path":"/reference/combine_cell_counts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine cell counts across all mice in an experiment into a single dataframe. — combine_cell_counts","text":"","code":"e <- combine_cell_counts(e, by = c('groups', 'sex')) #> Error in combine_cell_counts(e, by = c(\"groups\", \"sex\")): object 'e' not found"},{"path":"/reference/correlation_diff_permutation.html","id":null,"dir":"Reference","previous_headings":"","what":"This function performs a permutation analysis to compare the region pairwise correlation coefficients between two different analysis groups. — correlation_diff_permutation","title":"This function performs a permutation analysis to compare the region pairwise correlation coefficients between two different analysis groups. — correlation_diff_permutation","text":"data two different analysis groups compared specifying correlation_list_name_1 correlation_list_name_2 parameters. Note analysis groups must number channels compare. functions get_correlations() needs run analysis groups prior running function. test statistics used pearson values correlation_list_name_2 subtracted corresponding Pearson values correlation_list_name_1.","code":""},{"path":"/reference/correlation_diff_permutation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function performs a permutation analysis to compare the region pairwise correlation coefficients between two different analysis groups. — correlation_diff_permutation","text":"","code":"correlation_diff_permutation(   e,   correlation_list_name_1,   correlation_list_name_2,   channels = c(\"cfos\", \"eyfp\", \"colabel\"),   n_shuffle = 1000,   method = \"pearson\",   seed = 5,   p_adjust_method = \"BH\",   alpha = 0.05,   ... )"},{"path":"/reference/correlation_diff_permutation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function performs a permutation analysis to compare the region pairwise correlation coefficients between two different analysis groups. — correlation_diff_permutation","text":"e experiment object correlation_list_name_1 (str) name correlation list object used first group comparison. correlation_list_name_2 (str) name correlation list object used second group comparison. channels (str, default = c(\"cfos\", \"eyfp\", \"colabel\")) channels process. n_shuffle (int, default = 1000) number permutation shuffles. method (str, default = \"pearson\", options = c(\"pearson\", \"spearman\")) Specifies type correlations compute. Spearman correlations Pearson linear correlations computed ranks non-missing elements, using midranks ties. See also hmisc::rcorr() seed (int, default = 5) Random seed future replication. p_adjust_method (bool str, default = \"BH\") Benjamini-Hochberg method recommended. Apply named method control inflated false discovery rate FWER. Set FALSE \"none\" keep \"raw\" p values. See also stats::p.adjust() correction options. alpha (float, default = 0.05) alpha cutoff significance region pairwise correlation differences","code":""},{"path":"/reference/correlation_diff_permutation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function performs a permutation analysis to compare the region pairwise correlation coefficients between two different analysis groups. — correlation_diff_permutation","text":"e experiment object. experiment object now list called permutation_p_matrix stored . Elements permutation_p_matrix list outputs different permutation comparison analyses. elements named groups compared.","code":""},{"path":[]},{"path":[]},{"path":"/reference/create_joined_networks.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a joined network to visualize overlapping connections with the same outer joined node set. — create_joined_networks","title":"Create a joined network to visualize overlapping connections with the same outer joined node set. — create_joined_networks","text":"Create joined network visualize overlapping connections outer joined node set.","code":""},{"path":"/reference/create_joined_networks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a joined network to visualize overlapping connections with the same outer joined node set. — create_joined_networks","text":"","code":"create_joined_networks(   e,   correlation_list_names = c(\"male_agg\", \"female_non\"),   channels = \"cfos\",   ontology = \"unified\",   alpha = 0.001,   pearson_thresh = 0.9,   proportional_thresh = NULL,   alpha2 = NULL,   pearson_thresh2 = NULL,   proportional_thresh2 = NULL,   anatomical.order = c(\"Isocortex\", \"OLF\", \"HPF\", \"CTXsp\", \"CNU\", \"TH\", \"HY\", \"MB\",     \"HB\", \"CB\"),   export_overlapping_edges = TRUE )"},{"path":"/reference/create_joined_networks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a joined network to visualize overlapping connections with the same outer joined node set. — create_joined_networks","text":"e experiment object correlation_list_names (str vec) character vector two correlation lists used include joined network channels (str, default = c(\"cfos\", \"eyfp\", \"colabel\")) channels process. ontology (str, default = \"allen\") Region ontology use. options = \"allen\" \"unified\" alpha (float, default = 0.05) significance threshold including brain regions network. NULL NA, threshold applied. pearson_thresh (float, default = 0.8) pearson correlation coefficient threshold apply filtering proportional_thresh (float, default = NULL) Takes precedent alpha pearson_thresh parameters. Input desired edge proportion (.e., edge density) desired sparsity constraint. alpha2 (NULL) NULL, gives option filtering second network different alpha first. alpha parameter used threshold network 1. pearson_thresh2 (NULL) NULL, gives option filtering second network different pearson threshold first network. pearson_thresh parameter used threshold network 1. proportional_thresh2 (NULL) NULL, gives option filtering second network different proportional threshold first. anatomical.order (vec, c(\"Isocortex\",\"OLF\",\"HPF\",\"CTXsp\",\"CNU\",\"TH\",\"HY\",\"MB\",\"HB\",\"CB\")) default super region acronym list groups subregions dataset. export_overlapping_edges (bool, default  = TRUE) Whether export overlapping edges two networks csv table directory.","code":""},{"path":"/reference/create_joined_networks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a joined network to visualize overlapping connections with the same outer joined node set. — create_joined_networks","text":"e experiment object. object now new added element called networks. list storing graph object per channel network analysis run. name network (network_name) correlation_list_name used generate network. network_name fed parameter plot_network() function.","code":""},{"path":[]},{"path":[]},{"path":"/reference/create_networks.html","id":null,"dir":"Reference","previous_headings":"","what":"Create %>% graph objects for plotting different analysis subgroups. — create_networks","title":"Create %>% graph objects for plotting different analysis subgroups. — create_networks","text":"Create %>% graph objects plotting different analysis subgroups.","code":""},{"path":"/reference/create_networks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create %>% graph objects for plotting different analysis subgroups. — create_networks","text":"","code":"create_networks(   e,   correlation_list_name,   channels = c(\"cfos\", \"eyfp\", \"colabel\"),   proportional_thresh = NULL,   alpha = 0.05,   pearson_thresh = 0.8,   ontology = \"allen\",   anatomical.order = c(\"Isocortex\", \"OLF\", \"HPF\", \"CTXsp\", \"CNU\", \"TH\", \"HY\", \"MB\",     \"HB\", \"CB\"),   filter_isolates = FALSE )"},{"path":"/reference/create_networks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create %>% graph objects for plotting different analysis subgroups. — create_networks","text":"e experiment object correlation_list_name (str) Name correlation list object used generate networks. channels (str, default = c(\"cfos\", \"eyfp\", \"colabel\")) channels process. proportional_thresh (float, default = NULL) Takes precedent alpha pearson_thresh parameters. Input desired edge proportion (.e., edge density) desired sparsity constraint. alpha (float, default = 0.05) significance threshold including brain regions network. NULL NA, threshold applied. pearson_thresh (float, default = 0.8) pearson correlation coefficient threshold apply filtering ontology (str, default = \"allen\") Region ontology use. options = \"allen\" \"unified\" anatomical.order (vec, c(\"Isocortex\",\"OLF\",\"HPF\",\"CTXsp\",\"CNU\",\"TH\",\"HY\",\"MB\",\"HB\",\"CB\")) default super region acronym list groups subregions dataset. filter_isolates (logical, default = FALSE) Whether filter number isolated (zero degree) nodes network. Default retain .","code":""},{"path":"/reference/create_networks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create %>% graph objects for plotting different analysis subgroups. — create_networks","text":"e experiment object. object now new added element called networks. list storing graph object per channel network analysis run. name network (network_name) correlation_list_name used generate network. network_name fed parameter plot_network() function.","code":""},{"path":[]},{"path":[]},{"path":"/reference/detect_single_slice_regions.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect atlas regions that only show up in a single slice object within a mouse. — detect_single_slice_regions","title":"Detect atlas regions that only show up in a single slice object within a mouse. — detect_single_slice_regions","text":"Quality check function make sure regions included analysis show 1 slice object, otherwise user can remove exceptions mouse object. Regions counts derived one image may less accurate. function can generate log regions user can qualitatively evaluate raw data. Users also option removing regions automatically normalized_counts dataframe. user run normalize_cell_counts() get_cell_table() functions prior using function. user run split_hipp_DV() option merge, function account dorsal ventral hippocampal counts separately.","code":""},{"path":"/reference/detect_single_slice_regions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect atlas regions that only show up in a single slice object within a mouse. — detect_single_slice_regions","text":"","code":"detect_single_slice_regions(m, remove = FALSE, log = TRUE)"},{"path":"/reference/detect_single_slice_regions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect atlas regions that only show up in a single slice object within a mouse. — detect_single_slice_regions","text":"remove (bool, FALSE) Remove regions normalized counts table log (bool, TRUE) Save regions enough n .csv file output folder.","code":""},{"path":[]},{"path":"/reference/enough_mice_per_group.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if there are enough mice per analysis subgroup across all regions.\r\nif the normalized counts data sets are split by specified grouping variables.\r\nThis function also automatically keeps only the common regions that are found across all comparison groups. — enough_mice_per_group","title":"Check if there are enough mice per analysis subgroup across all regions.\r\nif the normalized counts data sets are split by specified grouping variables.\r\nThis function also automatically keeps only the common regions that are found across all comparison groups. — enough_mice_per_group","text":"Check enough mice per analysis subgroup across regions. normalized counts data sets split specified grouping variables. function also automatically keeps common regions found across comparison groups.","code":""},{"path":"/reference/enough_mice_per_group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if there are enough mice per analysis subgroup across all regions.\r\nif the normalized counts data sets are split by specified grouping variables.\r\nThis function also automatically keeps only the common regions that are found across all comparison groups. — enough_mice_per_group","text":"","code":"enough_mice_per_group(   e,   by = c(\"group\", \"sex\"),   min_n = 5,   remove = TRUE,   log = TRUE )"},{"path":"/reference/enough_mice_per_group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if there are enough mice per analysis subgroup across all regions.\r\nif the normalized counts data sets are split by specified grouping variables.\r\nThis function also automatically keeps only the common regions that are found across all comparison groups. — enough_mice_per_group","text":"e experiment object (str, default = c(\"group\", \"sex\")) mice attributes used group datasets comparison groups. min_n (int, default = 5) minimum number mice group region comparisons. remove (bool, TRUE) Remove regions combined normalized count dataframes enough n comparison . regions removed across comparison groups. log (bool, TRUE) Save regions enough n '.csv' file output folder.","code":""},{"path":"/reference/enough_mice_per_group.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if there are enough mice per analysis subgroup across all regions.\r\nif the normalized counts data sets are split by specified grouping variables.\r\nThis function also automatically keeps only the common regions that are found across all comparison groups. — enough_mice_per_group","text":"e experiment object","code":""},{"path":"/reference/enough_mice_per_group.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if there are enough mice per analysis subgroup across all regions.\r\nif the normalized counts data sets are split by specified grouping variables.\r\nThis function also automatically keeps only the common regions that are found across all comparison groups. — enough_mice_per_group","text":"","code":"e <- enough_mice_per_group(e, by = c(\"group\", \"sex\"), min_n = 4, remove = TRUE, log = TRUE) #> Error in enough_mice_per_group(e, by = c(\"group\", \"sex\"), min_n = 4, remove = TRUE,     log = TRUE): object 'e' not found"},{"path":"/reference/exclude_anatomy.html","id":null,"dir":"Reference","previous_headings":"","what":"exclude_anatomy (generic function) — exclude_anatomy","title":"exclude_anatomy (generic function) — exclude_anatomy","text":"Method excluding user specified regions, layer 1, contralateral hemisphere  per slice. function automatically excludes default regions included attribute \"regions_excluded\" slice ADDITION regions added 'exclude_regions' parameter. Regions added 'exclude_regions' parameter updated slice attribute keep track excluded. Note: Please see simplify_regions simplify_keywords parameters. default, subregion can folded parent region based certain keywords, function automatically exclude entire parent region conservative exclusion approach. Keep simplify_regions=TRUE final analysis contain simplified regions. Method excluding cell counts specified regions, layer 1, --bounds cells counts, hemispheres per mouse. function automatically excludes default regions included attribute \"regions_excluded\" slice ADDITION regions added 'exclude_regions' parameter. Regions added 'exclude_regions' parameter updated slice attribute keep track excluded. Note: Please see simplify_regions simplify_keywords parameters. default, subregion can folded parent region based certain keywords, function automatically exclude entire parent region conservative exclusion approach. Keep simplify_regions=TRUE final analysis contain simplified regions.","code":""},{"path":"/reference/exclude_anatomy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"exclude_anatomy (generic function) — exclude_anatomy","text":"","code":"exclude_anatomy(x, ...)  # S3 method for slice exclude_anatomy(   s,   channels = NULL,   clean = TRUE,   exclude_right_regions = NULL,   exclude_left_regions = NULL,   exclude_hemisphere = TRUE,   exclude_layer_1 = TRUE,   include_right_regions = NULL,   include_left_regions = NULL,   simplify_regions = TRUE,   simplify_keywords = c(\"layer\", \"part\", \"stratum\", \"division\", \"leaflet\",     \"Subgeniculate\", \"island\", \"Islands\", \"Fields of Forel\", \"Cajal\", \"Darkschewitsch\",     \"Precommissural\"),   plot_filtered = TRUE )  # S3 method for mouse exclude_anatomy(   m,   slice_ID = NA,   hemisphere = NULL,   channels = NULL,   clean = TRUE,   exclude_right_regions = NULL,   exclude_left_regions = NULL,   exclude_hemisphere = FALSE,   exclude_layer_1 = TRUE,   include_right_regions = NULL,   include_left_regions = NULL,   simplify_regions = TRUE,   simplify_keywords = c(\"layer\", \"part\", \"stratum\", \"division\", \"leaflet\",     \"Subgeniculate\", \"island\", \"Islands\", \"Fields of Forel\", \"Cajal\", \"Darkschewitsch\",     \"Precommissural\"),   plot_filtered = TRUE )"},{"path":"/reference/exclude_anatomy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"exclude_anatomy (generic function) — exclude_anatomy","text":"...  s slice object channels (str vector, default = NULL) Channels process. NULL, defaults channels stored slice object attributes. clean (bool, default = TRUE ). Remove cells map regions. exclude_right_regions (str vector, default = NULL); acronyms regions want exclude right hemi,addition regions default excluded slice attribute 'right_regions_excluded' exclude_left_regions (str vector, default = NULL); acronyms regions want exclude left hemi, addition regions default excluded slice attribute 'left_regions_excluded' exclude_hemisphere (bool, default = TRUE); excludes contralateral hemisphere one indicated slice attribute exclude_layer_1 (bool, default = TRUE); excludes counts layer 1 (TEMPORARY, may hardcoded later) include_right_regions (str vector, default = NULL) Acronyms regions include right hemi; NULL, takes precedence exclude_right_regions & regions excluded. Typically, used slices poor quality/lots tears. include_left_regions (str vector, default = NULL) Acronyms regions include light hemi; NULL, takes precedence exclude_left_regions & regions excluded.  Typically, used slices poor quality/lots tears. simplify_regions (bool, default = TRUE ) simplify normalized region counts based keywords internal function, simplify_keywords simplify_keywords (str vec, default =  c(\"layer\",\"part\",\"stratum\",\"division\")). Keywords search region names simplify parent structure. means parent structure also excluded list excluded right left regions can plot_filtered  m mouse object slice_ID (str) ID slice hemisphere (str) 'left', 'right' NULL ()","code":""},{"path":"/reference/exclude_anatomy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"exclude_anatomy (generic function) — exclude_anatomy","text":"m mouse object","code":""},{"path":[]},{"path":"/reference/experiment.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an experiment object — experiment","title":"Create an experiment object — experiment","text":"experiment() constructs S3 object class 'wb_experiment'. experiment object consists list processed mouse objects raw data slices omitted, experimental attributes stored list.","code":""},{"path":"/reference/experiment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an experiment object — experiment","text":"","code":"experiment(   experiment_name = NULL,   experimenters = NULL,   channels = NULL,   experiment_groups = NULL,   drug_groups = NULL,   sex_groups = NULL,   cohorts = NULL,   strains = NULL,   genotypes = NULL,   reporters = NULL,   ages = NULL,   output_path = \"set output path for your experiment\",   ... )"},{"path":"/reference/experiment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an experiment object — experiment","text":"experiment_name (str, default = NULL) experimenters (str, default = NULL) channels (str, default = NULL) Autogenerated add_mouse() function. detect unique channels stored mouse object. experiment_groups (str, default = NULL) Autogenerated add_mouse() function. Must exactly match string values mouse objects. drug_groups (str, default = NULL) Autogenerated add_mouse() function. Must exactly match string values mouse objects. sex_groups (str, default = NULL) Autogenerated add_mouse() function. Must exactly match string values mouse objects. cohorts (str, default = NULL) Autogenerated add_mouse() function. Must exactly match string values mouse objects. strains (str, default = NULL) Autogenerated add_mouse() function. Must exactly match string values mouse objects. genotypes (str, default = NULL) Autogenerated add_mouse() function. Must exactly match string values mouse objects. reporters (str, default = NULL) Autogenerated add_mouse() function. Must exactly match string values mouse objects. ages (str, default = NULL). AUtogenerated add_mouse() function. Must exactly match string values mouse objects. output_path (str, default = 'set output path experiment') save RData file experiment object ... additional custom keyword pair attributes like store","code":""},{"path":"/reference/experiment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an experiment object — experiment","text":"experiment, colloquial term object class 'wb_experiment'. 'experiment' object also list, class list.","code":""},{"path":"/reference/experiment.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an experiment object — experiment","text":"experimental attributes can assigned arguments experiment constructor function. See parameters listed default values attributes Note able add custom attributes keyword pairs, like keep track additional piece information. However, serve descriptive purpose used analysis. may need use experimental attributes fill many applicable experiment.","code":""},{"path":[]},{"path":"/reference/experiment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an experiment object — experiment","text":"","code":"my_experiment <- experiment() # constructs an experiment object"},{"path":"/reference/export_permutation_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Export the permutation results as a csv file. This automatically saves into the tables folder. — export_permutation_results","title":"Export the permutation results as a csv file. This automatically saves into the tables folder. — export_permutation_results","text":"Export permutation results csv file. automatically saves tables folder.","code":""},{"path":"/reference/export_permutation_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export the permutation results as a csv file. This automatically saves into the tables folder. — export_permutation_results","text":"","code":"export_permutation_results(   e,   permutation_groups = \"all\",   channels = c(\"cfos\"),   ontology = \"allen\",   filter_significant = TRUE )"},{"path":"/reference/export_permutation_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export the permutation results as a csv file. This automatically saves into the tables folder. — export_permutation_results","text":"e experiment object permutation_groups (str vec, default = \"\") Default export analyses run. Supply names specific analyses found e$permutation_p_matrix %>% names() want export specific groups. channels (str, channels =  c(\"cfos\", \"eyfp\", \"colabel\") channels process. ontology (str, default = \"allen\") Set \"unified\" Kim Lab unified ontology filter_significant (bool, default = TRUE) FALSE, keeps comparisons. Otherwise exports different significant permutations.","code":""},{"path":"/reference/filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Premade. — filter","title":"Premade. — filter","text":"filter used wholebrain functions.","code":""},{"path":"/reference/filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Premade. — filter","text":"","code":"filter"},{"path":"/reference/filter.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Premade. — filter","text":"list parameters filter features interest image alim price, US dollars threshold.range weight diamond, carats eccentricity eccentricity (elongation) contours sets round want cell bodies . Default 500 smaller values equal round. Max Maximum value display 8-bit rendered (sets sort brightness contrast) Min Minimum value display 8-bit rendered (sets sort brightness contrast) brain.threshold exact value want start segmeting brain outline autofluorescence resize resize parameter match atlas pixel resolution, 0.03 0.2 applications. blur blur parameter sets smoothness tissue outline, magaded jagged edges increase. Using value fo 4 usually recommended. downsample downsample, default set 0.25 images size 15000 x 8000 pixels can usually run smoothly","code":""},{"path":"/reference/find_all_subregions.html","id":null,"dir":"Reference","previous_headings":"","what":"find_all_subregions — find_all_subregions","title":"find_all_subregions — find_all_subregions","text":"find_all_subregions","code":""},{"path":"/reference/find_all_subregions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"find_all_subregions — find_all_subregions","text":"","code":"find_all_subregions(regions)"},{"path":"/reference/find_all_subregions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"find_all_subregions — find_all_subregions","text":"regions string vector Allen Mouse Brain Atlas abbreviated regions regions exclude","code":""},{"path":"/reference/find_all_subregions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"find_all_subregions — find_all_subregions","text":"all_regions. string vector input & subregions within exclude","code":""},{"path":"/reference/find_outlier_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect, log, and remove outlier counts. This function\r\nremoves any normalized regions counts that are more than n_sd standard deviations (default = 2) higher\r\nthan their cohort mean. — find_outlier_counts","title":"Detect, log, and remove outlier counts. This function\r\nremoves any normalized regions counts that are more than n_sd standard deviations (default = 2) higher\r\nthan their cohort mean. — find_outlier_counts","text":"Detect, log, remove outlier counts. function removes normalized regions counts n_sd standard deviations (default = 2) higher cohort mean.","code":""},{"path":"/reference/find_outlier_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect, log, and remove outlier counts. This function\r\nremoves any normalized regions counts that are more than n_sd standard deviations (default = 2) higher\r\nthan their cohort mean. — find_outlier_counts","text":"","code":"find_outlier_counts(   e,   by = c(\"group\", \"sex\"),   n_sd = 2,   remove = FALSE,   log = TRUE )"},{"path":"/reference/find_outlier_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect, log, and remove outlier counts. This function\r\nremoves any normalized regions counts that are more than n_sd standard deviations (default = 2) higher\r\nthan their cohort mean. — find_outlier_counts","text":"e experiment object (str, default = c(\"group\", \"sex\")) mice attributes used group datasets comparison groups. n_sd (int, default = 2). Number standards deviations categorizes outliers. remove (bool, default = FALSE) Remove outlier rows combined normalized counts dataframe experiment object. log (bool, default = TRUE) Save logged outlier regions csv file output folder.","code":""},{"path":"/reference/find_outlier_counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect, log, and remove outlier counts. This function\r\nremoves any normalized regions counts that are more than n_sd standard deviations (default = 2) higher\r\nthan their cohort mean. — find_outlier_counts","text":"e experiment object. Outlier counts experiment object removed remove = TRUE.","code":""},{"path":"/reference/find_outlier_counts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect, log, and remove outlier counts. This function\r\nremoves any normalized regions counts that are more than n_sd standard deviations (default = 2) higher\r\nthan their cohort mean. — find_outlier_counts","text":"","code":"e <- find_outlier_counts(e, by = c(\"group\",\"sex\"), n_sd = 2, remove = FALSE, log = TRUE) #> Error in find_outlier_counts(e, by = c(\"group\", \"sex\"), n_sd = 2, remove = FALSE,     log = TRUE): object 'e' not found"},{"path":"/reference/find_segmentation_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Find segmentation files following the naming conventions of the denny lab given a channel name and a root slice directory — find_segmentation_files","title":"Find segmentation files following the naming conventions of the denny lab given a channel name and a root slice directory — find_segmentation_files","text":"Find segmentation files following naming conventions denny lab given channel name root slice directory","code":""},{"path":"/reference/find_segmentation_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find segmentation files following the naming conventions of the denny lab given a channel name and a root slice directory — find_segmentation_files","text":"","code":"find_segmentation_files(slice_directory, channel)"},{"path":"/reference/find_segmentation_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find segmentation files following the naming conventions of the denny lab given a channel name and a root slice directory — find_segmentation_files","text":"returns vector two paths. first element path measurement data. second path path quantification data.","code":""},{"path":"/reference/get.acronym.child.custom.html","id":null,"dir":"Reference","previous_headings":"","what":"Get acronyms of child structures — get.acronym.child.custom","title":"Get acronyms of child structures — get.acronym.child.custom","text":"Function get acronym parent regions ontology","code":""},{"path":"/reference/get.acronym.child.custom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get acronyms of child structures — get.acronym.child.custom","text":"","code":"get.acronym.child.custom(x, ontology = \"unified\")"},{"path":"/reference/get.acronym.child.custom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get acronyms of child structures — get.acronym.child.custom","text":"x (str) Regional acronym ontology (str, options: \"unified\")","code":""},{"path":"/reference/get.acronym.child.html","id":null,"dir":"Reference","previous_headings":"","what":"Get acronyms of child structures — get.acronym.child","title":"Get acronyms of child structures — get.acronym.child","text":"Function get acronym parent regions ontology","code":""},{"path":"/reference/get.acronym.child.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get acronyms of child structures — get.acronym.child","text":"","code":"get.acronym.child(x)"},{"path":"/reference/get.acronym.child.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get acronyms of child structures — get.acronym.child","text":"x (str) Regional acronym","code":""},{"path":"/reference/get.acronym.parent.custom.html","id":null,"dir":"Reference","previous_headings":"","what":"Get parent region acronyms — get.acronym.parent.custom","title":"Get parent region acronyms — get.acronym.parent.custom","text":"Function get acronym parent regions","code":""},{"path":"/reference/get.acronym.parent.custom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get parent region acronyms — get.acronym.parent.custom","text":"","code":"get.acronym.parent.custom(x, ontology = \"unified\")"},{"path":"/reference/get.acronym.parent.custom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get parent region acronyms — get.acronym.parent.custom","text":"x (str) Regional acronym ontology (str, options: \"unified\")","code":""},{"path":"/reference/get.acronym.parent.html","id":null,"dir":"Reference","previous_headings":"","what":"Get parent region acronyms — get.acronym.parent","title":"Get parent region acronyms — get.acronym.parent","text":"Function get acronym parent regions","code":""},{"path":"/reference/get.acronym.parent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get parent region acronyms — get.acronym.parent","text":"","code":"get.acronym.parent(x)"},{"path":"/reference/get.acronym.parent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get parent region acronyms — get.acronym.parent","text":"x (str) Regional acronym","code":""},{"path":"/reference/get.colabeled.cells.html","id":null,"dir":"Reference","previous_headings":"","what":"Get colabelled cells data table. This is designed specifically to create a segmentation object from the imported raw files that are outputs from the batch_3D_MultiColocalization.ijm macro. — get.colabeled.cells","title":"Get colabelled cells data table. This is designed specifically to create a segmentation object from the imported raw files that are outputs from the batch_3D_MultiColocalization.ijm macro. — get.colabeled.cells","text":"Get colabelled cells data table. designed specifically create segmentation object imported raw files outputs batch_3D_MultiColocalization.ijm macro.","code":""},{"path":"/reference/get.colabeled.cells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get colabelled cells data table. This is designed specifically to create a segmentation object from the imported raw files that are outputs from the batch_3D_MultiColocalization.ijm macro. — get.colabeled.cells","text":"","code":"get.colabeled.cells(   coloc_table,   image_A_objects,   image_B_objects,   volume = 25,   euc_centroid_dist = 30,   overlap = 0.5 )"},{"path":"/reference/get.colabeled.cells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get colabelled cells data table. This is designed specifically to create a segmentation object from the imported raw files that are outputs from the batch_3D_MultiColocalization.ijm macro. — get.colabeled.cells","text":"volume (default = 25) Minimum threshold colocalized volume voxels. euc_centroid_dist (default = 30) Euclidean threshold pixels centroid coordinates two flagged overlapping objects. distance exceeded, error message. overlap (default = 0.5) Minimum fraction object volume overlap image (Ch2) object image B (Ch1). Fraction image objects.","code":""},{"path":"/reference/get.colabeled.cells.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get colabelled cells data table. This is designed specifically to create a segmentation object from the imported raw files that are outputs from the batch_3D_MultiColocalization.ijm macro. — get.colabeled.cells","text":"returns segmentation object x Y coordinates average centroid coordinates. area replaced volume image object. Intensity also just replaced volume image object.","code":""},{"path":"/reference/get.registered.areas.bu.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the registered areas — get.registered.areas.bu","title":"Get the registered areas — get.registered.areas.bu","text":"Get registered areas","code":""},{"path":"/reference/get.registered.areas.bu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the registered areas — get.registered.areas.bu","text":"","code":"get.registered.areas.bu(regions, registration, conversion.factor = 1)"},{"path":"/reference/get.registered.areas.bu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the registered areas — get.registered.areas.bu","text":"conversion.factor","code":""},{"path":[]},{"path":"/reference/get.registered.areas.td.html","id":null,"dir":"Reference","previous_headings":"","what":"Get top down registered areas — get.registered.areas.td","title":"Get top down registered areas — get.registered.areas.td","text":"Get top registered areas","code":""},{"path":"/reference/get.registered.areas.td.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get top down registered areas — get.registered.areas.td","text":"","code":"get.registered.areas.td(regions, registration, conversion.factor = 1)"},{"path":[]},{"path":"/reference/get.sub.structure.custom.html","id":null,"dir":"Reference","previous_headings":"","what":"Get subregion acronyms — get.sub.structure.custom","title":"Get subregion acronyms — get.sub.structure.custom","text":"Search function get substructure acronyms parent acronym. Note functions recursive.","code":""},{"path":"/reference/get.sub.structure.custom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get subregion acronyms — get.sub.structure.custom","text":"","code":"get.sub.structure.custom(x, ontology = \"unified\")"},{"path":"/reference/get.sub.structure.custom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get subregion acronyms — get.sub.structure.custom","text":"x (str vector) Regional acronyms vector ontology (str, options: \"unified\")","code":""},{"path":"/reference/get.sub.structure.html","id":null,"dir":"Reference","previous_headings":"","what":"Get subregion acronyms — get.sub.structure","title":"Get subregion acronyms — get.sub.structure","text":"Search function get substructure acronyms parent acronym.","code":""},{"path":"/reference/get.sub.structure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get subregion acronyms — get.sub.structure","text":"","code":"get.sub.structure(x)"},{"path":"/reference/get.sub.structure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get subregion acronyms — get.sub.structure","text":"x (str vector) Regional acronyms vector","code":""},{"path":"/reference/get.sup.structure.custom.html","id":null,"dir":"Reference","previous_headings":"","what":"Get super parent region acronyms — get.sup.structure.custom","title":"Get super parent region acronyms — get.sup.structure.custom","text":"Function get acronym super parent regions ontology","code":""},{"path":"/reference/get.sup.structure.custom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get super parent region acronyms — get.sup.structure.custom","text":"","code":"get.sup.structure.custom(   x,   ontology = \"unified\",   matching.string = c(\"root\", \"grey\", \"CH\", \"VS\", \"CTX\", \"CNU\", \"MB\", \"HB\") )"},{"path":"/reference/get.sup.structure.custom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get super parent region acronyms — get.sup.structure.custom","text":"x (str) Regional acronym ontology (str, options: \"unified\") matching.string (str vector, default = c(\"CTX\", \"CNU\", \"IB\", \"MB\", \"HB\", \"grey\", \"root\", \"VS\", \"fiber tracts\")) Vector basest parent levels stop .","code":""},{"path":"/reference/get.sup.structure.html","id":null,"dir":"Reference","previous_headings":"","what":"Get parent region acronyms — get.sup.structure","title":"Get parent region acronyms — get.sup.structure","text":"Function get acronym parent regions ontology","code":""},{"path":"/reference/get.sup.structure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get parent region acronyms — get.sup.structure","text":"","code":"get.sup.structure(   x,   matching.string = c(\"CTX\", \"CNU\", \"IB\", \"MB\", \"HB\", \"grey\", \"root\", \"VS\",     \"fiber tracts\") )"},{"path":"/reference/get.sup.structure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get parent region acronyms — get.sup.structure","text":"x (str) Regional acronym matching.string (str vector, default = c(\"CTX\", \"CNU\", \"IB\", \"MB\", \"HB\", \"grey\", \"root\", \"VS\", \"fiber tracts\")) Vector basest parent levels stop .","code":""},{"path":"/reference/get.super.regions.html","id":null,"dir":"Reference","previous_headings":"","what":"Updated function to return character vector of the super region acronyms after inputting a character vector of acronyms — get.super.regions","title":"Updated function to return character vector of the super region acronyms after inputting a character vector of acronyms — get.super.regions","text":"Updated function return character vector super region acronyms inputting character vector acronyms","code":""},{"path":"/reference/get.super.regions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Updated function to return character vector of the super region acronyms after inputting a character vector of acronyms — get.super.regions","text":"","code":"get.super.regions(   acronym,   anatomical.order = c(\"Isocortex\", \"OLF\", \"HPF\", \"CTXsp\", \"CNU\", \"TH\", \"HY\", \"MB\",     \"HB\", \"CB\"),   ontology = \"allen\" )"},{"path":"/reference/get.super.regions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Updated function to return character vector of the super region acronyms after inputting a character vector of acronyms — get.super.regions","text":"acronym (str vec) character vector acronyms. factor vector. anatomical.order (default = c(\"Isocortex\", \"OLF\", \"HPF\", \"CTXsp\", \"CNU\",\"TH\", \"HY\", \"MB\", \"HB\", \"CB\")) Default way group subregions super regions order ontology (str, default = \"allen\") Region ontology use. options = \"allen\" \"unified\"","code":""},{"path":[]},{"path":"/reference/get_cell_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Get cell tables — get_cell_table","title":"Get cell tables — get_cell_table","text":"function stores list mouse object length channels parameter. element list dataframe containing combined cell counts one channel across slices processed mouse. default, one slice dataset processed particular channel, slice skipped . function run properly warning thrown indicating go back generate mapped dataset particular slice channel.","code":""},{"path":"/reference/get_cell_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get cell tables — get_cell_table","text":"","code":"get_cell_table(m, channels = c(\"cfos\", \"eyfp\", \"colabel\"))"},{"path":"/reference/get_cell_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get cell tables — get_cell_table","text":"m mouse object channels (vec, default = c(\"cfos\", \"eyfp\", \"colabel\")) Channels process.","code":""},{"path":"/reference/get_cell_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get cell tables — get_cell_table","text":"m mouse object","code":""},{"path":"/reference/get_cell_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get cell tables — get_cell_table","text":"","code":"m <- get_cell_tables(m, channels = c(\"cfos\", \"eyfp\", \"colabel\")) #> Error in get_cell_tables(m, channels = c(\"cfos\", \"eyfp\", \"colabel\")): could not find function \"get_cell_tables\""},{"path":"/reference/get_common_regions.html","id":null,"dir":"Reference","previous_headings":"","what":"Get common regions that are found across all the comparison groups. — get_common_regions","title":"Get common regions that are found across all the comparison groups. — get_common_regions","text":"single comparison group mice brain regions contained groups, statistical comparison can made. region removed.","code":""},{"path":"/reference/get_common_regions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get common regions that are found across all the comparison groups. — get_common_regions","text":"","code":"get_common_regions(mouse_count, by)"},{"path":[]},{"path":"/reference/get_common_regions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get common regions that are found across all the comparison groups. — get_common_regions","text":"unique acronyms intersection across groups","code":""},{"path":"/reference/get_correlations.html","id":null,"dir":"Reference","previous_headings":"","what":"Get regional cross correlations and their p-values in a correlation list object. — get_correlations","title":"Get regional cross correlations and their p-values in a correlation list object. — get_correlations","text":"analysis get regional cross correlations based cell counts normalized region volume.","code":""},{"path":"/reference/get_correlations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get regional cross correlations and their p-values in a correlation list object. — get_correlations","text":"","code":"get_correlations(   e,   by,   values,   channels = c(\"cfos\", \"eyfp\", \"colabel\"),   p_adjust_method = \"none\",   alpha = 0.05,   ontology = \"allen\",   method = \"pearson\",   anatomical.order = c(\"Isocortex\", \"OLF\", \"HPF\", \"CTXsp\", \"CNU\", \"TH\", \"HY\", \"MB\",     \"HB\", \"CB\"),   region_order = NULL )"},{"path":"/reference/get_correlations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get regional cross correlations and their p-values in a correlation list object. — get_correlations","text":"e experiment object (str) Attribute names group , e.g. c(\"sex\", \"group\") values (str) respective values attributes entered parameter generate specific analysis group, e.g.values = c(\"female\", \"AD\"). channels (str, channels =  c(\"cfos\", \"eyfp\", \"colabel\") channels process. p_adjust_method (bool str, default = \"none\") parameter fed p.adjust function. Options: c(\"holm\", \"hochberg\", \"hommel\", \"bonferroni\", \"BH\", \"\",  \"fdr\", \"none\") Apply named method control inflated false discovery rate family wise error rate (FWER). Set FALSE \"none\" keep \"raw\" p values. See also stats::p.adjust() correction options. alpha (num, default = 0.05) alpha level significance applied p-adjustment. ontology (str, default = \"allen\") Region ontology use. options = \"allen\" \"unified\" method (str, default = \"pearson\", options = c(\"pearson\", \"spearman\")) Specifies type correlations compute. Spearman correlations Pearson linear correlations computed ranks non-missing elements, using midranks ties. See also hmisc::rcorr() region_order (list, default = NULL)  optional list first element named \"acronym\" supplying vector region acronyms second element named \"order\"  supplying vector integers determining numerical order, e.g. 1, 1, 2, 2.","code":""},{"path":"/reference/get_correlations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get regional cross correlations and their p-values in a correlation list object. — get_correlations","text":"e experiment object. experiment object now named correlation_list object stored . name correlation object concatenation variable values separated \"_\". name allows unambiguous identification different analysis subgroups future.","code":""},{"path":[]},{"path":"/reference/get_correlations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get regional cross correlations and their p-values in a correlation list object. — get_correlations","text":"","code":"e <- get_correlations(e, by = c(\"sex\", \"group\"), values = c(\"female\", \"AD\"), channels = c(\"cfos\", \"eyfp\", \"colabel\"),  p_adjust_method = \"BH\", alpha = 0.05) #> Error in dplyr::filter(., !!var == values[k]): object 'e' not found"},{"path":"/reference/get_percent_colabel.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the percentage of colabelled cells over either cfos or eyfp channels. — get_percent_colabel","title":"Get the percentage of colabelled cells over either cfos or eyfp channels. — get_percent_colabel","text":"analysis include common regions included colabelled cfos eyfp channels. colabelled percentage individual animals calculated option export data.","code":""},{"path":"/reference/get_percent_colabel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the percentage of colabelled cells over either cfos or eyfp channels. — get_percent_colabel","text":"","code":"get_percent_colabel(   e,   by,   colabel_channel = \"colabel\",   channel = \"eyfp\",   save_table = TRUE,   rois = NULL,   individual = TRUE )"},{"path":"/reference/get_percent_colabel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the percentage of colabelled cells over either cfos or eyfp channels. — get_percent_colabel","text":"e experiment object (str) Attribute names group , e.g. = c(\"group\", \"sex\"). generate analysis subgroups averaged together assess across rois. colabel_channel (str, default = \"colabel\") channel used numerator fraction counts. string 'colabel' pipeline refers colocalized 'eyfp' 'cfos' channels. colocalized channels, import channel using import_segmentation_custom() customized import channel. channel (str, default = \"eyfp\") channel used denominator fraction counts. save_table (bool, default = TRUE) Whether save output table csv experiment object output folder. rois (str, default = NULL) Whether generate colabelled percentages specific regions interest, e.g. rois = c(\"HY\", \"DG\"). Child regions specified rois also searched . individual (bool, default = FALSE) Whether data include individual mouse colabelled percentages rather average. FALSE colabel percentages averaged across analysis subgroups determined parameter","code":""},{"path":"/reference/get_percent_colabel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the percentage of colabelled cells over either cfos or eyfp channels. — get_percent_colabel","text":"e experiment object colabelled percentage table stored .","code":""},{"path":"/reference/get_percent_colabel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the percentage of colabelled cells over either cfos or eyfp channels. — get_percent_colabel","text":"","code":"e <- get_percent_colabel(e, c(\"group\", \"sex\", channel = \"eyfp\")) #> Error in get_percent_colabel(e, c(\"group\", \"sex\", channel = \"eyfp\")): object 'e' not found"},{"path":"/reference/get_registered_areas.html","id":null,"dir":"Reference","previous_headings":"","what":"Method for getting regional areas and volumes for each slice in a mouse object — get_registered_volumes.mouse","title":"Method for getting regional areas and volumes for each slice in a mouse object — get_registered_volumes.mouse","text":"Calculate registered area (microns^2^) regional volumes (microns^3^) regions contained slice. Note: Simplification analyzed regions keywords HIGHLY RECOMMENDED errors wholebrain basecode results mismatch region acronym mapped actual registration contour based region acronym. mismatch notable dentate gyrus subregions, certain regions represented twice DG curve along rostral caudal axis. simplification keywords used, circumvent errors. function also automatically removes parent regions redundant, e.g. \"CTX\" volumetrically represented summing subregions, tiny amount potential space allows cells get mapped slim spaces subregions. potential anatomical space ignored.","code":""},{"path":"/reference/get_registered_areas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method for getting regional areas and volumes for each slice in a mouse object — get_registered_volumes.mouse","text":"","code":"# S3 method for mouse get_registered_volumes(   m,   slice_ID,   hemisphere = NULL,   simplify_regions = TRUE,   simplify_keywords = c(\"layer\", \"part\", \"stratum\", \"division\", \"leaflet\",     \"Subgeniculate\", \"island\", \"Islands\", \"Fields of Forel\", \"Cajal\", \"Darkschewitsch\",     \"Precommissural\"),   replace = FALSE )"},{"path":"/reference/get_registered_areas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method for getting regional areas and volumes for each slice in a mouse object — get_registered_volumes.mouse","text":"m mouse object slice_ID (str) ID slice hemisphere (str) 'left', 'right' NULL () simplify_regions (bool, default = TRUE ) simplify normalized region counts based keywords internal function, simplify_keywords simplify_keywords (str vec, default =  c(\"layer\",\"part\",\"stratum\",\"division\")). Keywords search region names simplify parent structure replace (bool, default = FALSE). Replace previously calculated volumes particular slice.","code":""},{"path":"/reference/get_registered_areas.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Method for getting regional areas and volumes for each slice in a mouse object — get_registered_volumes.mouse","text":"m mouse object","code":""},{"path":"/reference/get_registered_areas.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Method for getting regional areas and volumes for each slice in a mouse object — get_registered_volumes.mouse","text":"","code":"m <- get_registered_areas(m, slice_ID = \"1_10\", hemisphere = \"left\", replace = FALSE) #> Error in get_registered_areas(m, slice_ID = \"1_10\", hemisphere = \"left\",     replace = FALSE): could not find function \"get_registered_areas\""},{"path":"/reference/get_registered_volumes.html","id":null,"dir":"Reference","previous_headings":"","what":"get_registered_volumes (generic function) — get_registered_volumes","title":"get_registered_volumes (generic function) — get_registered_volumes","text":"Calculate registered area (microns^2^) regional volumes (microns^3^) regions contained slice. Note: Simplification analyzed regions keywords highly recommended errors wholebrain basecode results mismatch region acronym mapped actual registration contour based region acronym. mismatch notable dentate gyrus subregions. simplification keywords used, circumvent errors. function also automatically removes parent regions redundant, e.g. \"CTX\" volumetrically represented summing subregions, tiny amount potential space allows cells get mapped slim spaces subregions. potential anatomical space ignored.","code":""},{"path":"/reference/get_registered_volumes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_registered_volumes (generic function) — get_registered_volumes","text":"","code":"get_registered_volumes(x, ...)  # S3 method for slice get_registered_volumes(   s,   simplify_regions = TRUE,   simplify_keywords = c(\"layer\", \"part\", \"stratum\", \"division\", \"leaflet\",     \"Subgeniculate\", \"island\", \"Islands\", \"Fields of Forel\", \"Cajal\", \"Darkschewitsch\",     \"Precommissural\") )"},{"path":"/reference/get_registered_volumes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get_registered_volumes (generic function) — get_registered_volumes","text":"...  s slice object simplify_regions (bool, default = TRUE ) simplify areas based keywords found long-form region name. Fed internal function, simplify_keywords simplify_keywords (str vec, default =  c(\"layer\",\"part\",\"stratum\",\"division\")). Keywords search region names simplify parent structure","code":""},{"path":"/reference/get_registered_volumes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get_registered_volumes (generic function) — get_registered_volumes","text":"s slice object stored dataframe columns 'name' (full region name), 'acronym', 'area' (microns^2^), 'volume' (microns^3^) 'right.hemisphere'","code":""},{"path":"/reference/get_registered_volumes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get_registered_volumes (generic function) — get_registered_volumes","text":"","code":"s <- get_registered_areas(s) #> Error in get_registered_areas(s): could not find function \"get_registered_areas\""},{"path":"/reference/id.from.acronym.custom.html","id":null,"dir":"Reference","previous_headings":"","what":"Get region ontology  ID from acronym — id.from.acronym.custom","title":"Get region ontology  ID from acronym — id.from.acronym.custom","text":"Similar wholebrain package's search functions get whole regional names numerical ID lookup table. custom ontologies.","code":""},{"path":"/reference/id.from.acronym.custom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get region ontology  ID from acronym — id.from.acronym.custom","text":"","code":"id.from.acronym.custom(x, ontology = \"unified\")"},{"path":"/reference/id.from.acronym.custom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get region ontology  ID from acronym — id.from.acronym.custom","text":"x (int) integer ID ontology (str, options: \"unified\")","code":""},{"path":"/reference/import_segmentation_custom.html","id":null,"dir":"Reference","previous_headings":"","what":"import_segmentation (generic function) — import_segmentation_custom","title":"import_segmentation (generic function) — import_segmentation_custom","text":"Custom method importing segmentation data slice object. flexible method importing channels aside cfos eyfp use ImageJ segmentation macros common Denny Lab. labs may use method. method works best following saving segmentation data naming conventions using 3D Roi Manager within 3D ImageJ Suite. Segmentation data saved two'.txt' files output results Measure 3D Quantif 3D options 3D Roi Manager plugin,respectively. description options measure provided online documentation. naming conventions \".txt\" file storing Quantif3D results Q_*_{channel}_*_{channel}.txt, * indicates wildcard character(s) channel channel name without brackets. E.g. \"Q_G_eYFP_258_1_1_eYFP.txt\" naming conventions \".txt\" file storing Measure 3D M_*_{channel}_*.txt * indicates wildcard character(s) channel channel name without brackets. E.g \"M_G_eYFP_258_1_1.txt\". wildcards characters may used store things like date slice naming information. locations files must specified slice_directory attribute slice_object. Otherwise, root folder containing registration image searched. attribute can stored initializing slice object can edited afterwards. Method custom importation segmentation data mouse object","code":""},{"path":"/reference/import_segmentation_custom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"import_segmentation (generic function) — import_segmentation_custom","text":"","code":"import_segmentation_custom(x, ...)  # S3 method for slice import_segmentation_custom(   s,   channel,   x_col = NULL,   y_col = NULL,   meas_path = NULL,   quant_path = NULL )  # S3 method for mouse import_segmentation_custom(   m,   channel,   slice_ID = NA,   hemisphere = NULL,   x_col = NULL,   y_col = NULL,   meas_path = NULL,   quant_path = NULL )"},{"path":"/reference/import_segmentation_custom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"import_segmentation (generic function) — import_segmentation_custom","text":"...  s slice object channel (str) channel import x_col = NULL, y_col = NULL, meas_path = NULL, quant_path = NULL m mouse object slice_ID (str) ID slice hemisphere (str)'left', 'right' NULL","code":""},{"path":"/reference/import_segmentation_custom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"import_segmentation (generic function) — import_segmentation_custom","text":"s slice object m mouse object","code":""},{"path":"/reference/import_segmentation_custom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"import_segmentation (generic function) — import_segmentation_custom","text":"","code":"s <-  import_segmentation_custom(s, mouse_ID = \"255\", channel = \"cfos\") #> Error in import_segmentation_custom(s, mouse_ID = \"255\", channel = \"cfos\"): object 's' not found m <-  import_segmentation(m, slice_ID = \"1_10\", channels = c(\"PV\"), replace = FALSE) #> Error in import_segmentation(m, slice_ID = \"1_10\", channels = c(\"PV\"),     replace = FALSE): could not find function \"import_segmentation\""},{"path":"/reference/import_segmentation_ij.html","id":null,"dir":"Reference","previous_headings":"","what":"import_segmentation (generic function) — import_segmentation_ij","title":"import_segmentation (generic function) — import_segmentation_ij","text":"Method importing segmentation data slice object Method importing segmentation data mouse object","code":""},{"path":"/reference/import_segmentation_ij.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"import_segmentation (generic function) — import_segmentation_ij","text":"","code":"import_segmentation_ij(x, ...)  # S3 method for slice import_segmentation_ij(s, mouse_ID = NA, channels = NULL)  # S3 method for mouse import_segmentation_ij(   m,   slice_ID = NA,   hemisphere = NULL,   channels = NULL,   replace = FALSE )"},{"path":"/reference/import_segmentation_ij.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"import_segmentation (generic function) — import_segmentation_ij","text":"...  s slice object mouse_ID (str) ID mouse channels (str vector, default = NULL) channels import. NULL, defaults channels stored slice object attributes. m mouse object slice_ID (str) ID slice hemisphere (str)'left', 'right' NULL replace (bool, default = FALSE) replace existing raw segmentation data","code":""},{"path":"/reference/import_segmentation_ij.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"import_segmentation (generic function) — import_segmentation_ij","text":"s slice object m mouse object","code":""},{"path":"/reference/import_segmentation_ij.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"import_segmentation (generic function) — import_segmentation_ij","text":"designated colabel channel name pipeline auto import output batch_3D_MultiColocalization.ijm macro provided pre-processing pipeline. separate method used detecting colabelled cells, please use different naming convention channel, e.g. \"colabel_PV_cfos\", import using customized import function import_segmentation_custom().","code":""},{"path":"/reference/import_segmentation_ij.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"import_segmentation (generic function) — import_segmentation_ij","text":"","code":"s <-  import_segmentation(s, mouse_ID = \"255\") # Defaults to channels stored in slice attributes #> Error in import_segmentation(s, mouse_ID = \"255\"): could not find function \"import_segmentation\" s <-  import_segmentation(s, mouse_ID = \"255\", channels = c(\"cfos\", \"eyfp\", \"colabel\")) # Specify channels #> Error in import_segmentation(s, mouse_ID = \"255\", channels = c(\"cfos\",     \"eyfp\", \"colabel\")): could not find function \"import_segmentation\" m <-  import_segmentation(m, slice_ID = \"1_10\", channels = c(\"cfos\", \"eyfp\", \"colabel\"), replace = FALSE) #> Error in import_segmentation(m, slice_ID = \"1_10\", channels = c(\"cfos\",     \"eyfp\", \"colabel\"), replace = FALSE): could not find function \"import_segmentation\""},{"path":[]},{"path":"/reference/make_segmentation_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"make_segmentation_filter (generic function) — make_segmentation_filter","title":"make_segmentation_filter (generic function) — make_segmentation_filter","text":"make_segmentation_filter (generic function) Make segmentation filter slice object Make segmentation filter slice within mouse object","code":""},{"path":"/reference/make_segmentation_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"make_segmentation_filter (generic function) — make_segmentation_filter","text":"","code":"make_segmentation_filter(x, ...)  # S3 method for slice make_segmentation_filter(   s,   channels = \"eyfp\",   params = list(c(\"Vol..unit.\", \"Moment1\", \"Moment2\", \"Moment3\", \"Moment4\", \"Sigma\")),   ranges = list(list(c(200, 12000), c(3, 50), c(0, 600), c(0, 2000), c(0, 5), c(20,     Inf))) )  # S3 method for mouse make_segmentation_filter(   m,   slice_ID = NA,   hemisphere = NULL,   channels = c(\"eyfp\"),   params = list(c(\"Vol..unit.\", \"Moment1\", \"Moment2\", \"Moment3\", \"Moment4\", \"Sigma\")),   ranges = list(list(c(200, 12000), c(3, 50), c(0, 600), c(0, 2000), c(0, 5), c(20,     Inf))),   replace = FALSE )"},{"path":"/reference/make_segmentation_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"make_segmentation_filter (generic function) — make_segmentation_filter","text":"...  channels (str vector, default = \"eyfp\") Channels process. NULL, defaults channels stored slice object attributes (recommended). params (list) length channels. element contains vector parameters names used filtering channel ranges (list lists) length channels. element outer list corresponds order channels want process. Inner list contains vectors parameter ranges channel. m mouse object slice_ID (str) ID slice hemisphere 'left', 'right' NULL () replace (bool, default = FALSE) replace existing filters.","code":""},{"path":"/reference/make_segmentation_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"make_segmentation_filter (generic function) — make_segmentation_filter","text":"s slice object. Vector indices cells remove stored channel filters slice object. m mouse object.  Vector indices cells remove stored channel filters slice object within mouse.","code":""},{"path":"/reference/make_segmentation_filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"make_segmentation_filter (generic function) — make_segmentation_filter","text":"","code":"s <- make_segmentation_filter(s, channels = c('eyfp'), params = list(c(\"Vol..unit.\",\"Moment1\",\"Moment2\",\"Moment3\",\"Moment4\",\"Sigma\")), ranges = list(list(c(200, 12000), c(3, 50), c(0, 600), c(0, 2000), c(0, 5), c(20, Inf)))) #> Error in make_segmentation_filter(s, channels = c(\"eyfp\"), params = list(c(\"Vol..unit.\",     \"Moment1\", \"Moment2\", \"Moment3\", \"Moment4\", \"Sigma\")), ranges = list(list(c(200,     12000), c(3, 50), c(0, 600), c(0, 2000), c(0, 5), c(20, Inf)))): object 's' not found m <- make_segmentation_filter(m, slice_ID = '1_10', hemisphere = NULL , channels = c('eyfp'), params = list(c(\"Vol..unit.\",\"Moment1\",\"Moment2\",\"Moment3\",\"Moment4\",\"Sigma\")), ranges = list(list(c(200, 12000), c(3, 50), c(0, 600), c(0, 2000), c(0, 5), c(20, Inf)))) #> Error in make_segmentation_filter(m, slice_ID = \"1_10\", hemisphere = NULL,     channels = c(\"eyfp\"), params = list(c(\"Vol..unit.\", \"Moment1\",         \"Moment2\", \"Moment3\", \"Moment4\", \"Sigma\")), ranges = list(list(c(200,         12000), c(3, 50), c(0, 600), c(0, 2000), c(0, 5), c(20,         Inf)))): object 'm' not found"},{"path":"/reference/make_segmentation_object.html","id":null,"dir":"Reference","previous_headings":"","what":"make_segmentation_object (generic funciton) — make_segmentation_object","title":"make_segmentation_object (generic funciton) — make_segmentation_object","text":"Make wholebrain compatible segmentation object slice slice object Make wholebrain compatible segmentation object slice mouse object","code":""},{"path":"/reference/make_segmentation_object.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"make_segmentation_object (generic funciton) — make_segmentation_object","text":"","code":"make_segmentation_object(x, ...)  # S3 method for slice make_segmentation_object(   s,   mouse_ID = NA,   channels = NULL,   use_filter = FALSE,   ... )  # S3 method for mouse make_segmentation_object(   m,   slice_ID = NA,   hemisphere = NULL,   channels = NULL,   replace = FALSE,   use_filter = FALSE,   ... )"},{"path":"/reference/make_segmentation_object.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"make_segmentation_object (generic funciton) — make_segmentation_object","text":"... (optional) additional volume overlap parameters get.colabeled.cells(). s slice object mouse_ID (str) ID mouse channels (str vector, default = NULL) Channels process. NULL, defaults channels stored slice object attributes. use_filter (bool, default = FALSE). Use filter create curated segmentation object raw segmentation data. m mouse object slice_ID (str) ID slice hemisphere (str, default = NULL) 'left', 'right' NULL () replace (bool, default = FALSE) replace existing raw segmentation data","code":""},{"path":"/reference/make_segmentation_object.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"make_segmentation_object (generic funciton) — make_segmentation_object","text":"s slice object","code":""},{"path":"/reference/make_segmentation_object.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"make_segmentation_object (generic funciton) — make_segmentation_object","text":"processing colabel channel, X Y positions colabelled cells average x,y centroid coordinates colabelled objects","code":""},{"path":"/reference/make_segmentation_object.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"make_segmentation_object (generic funciton) — make_segmentation_object","text":"","code":"s <- make_segmentation_object(s, mouse_ID = \"255\", channels = c(\"cfos\", \"eyfp\"), use_filter = FALSE) #> Error in make_segmentation_object(s, mouse_ID = \"255\", channels = c(\"cfos\",     \"eyfp\"), use_filter = FALSE): object 's' not found m <-  make_segmentation_object(m, slice_ID = '1_9', hemisphere = 'left', channels = c('eyfp', 'cfos', 'colabel'), use_filter = FALSE) #> Error in make_segmentation_object(m, slice_ID = \"1_9\", hemisphere = \"left\",     channels = c(\"eyfp\", \"cfos\", \"colabel\"), use_filter = FALSE): object 'm' not found"},{"path":"/reference/map_cells_to_atlas.html","id":null,"dir":"Reference","previous_headings":"","what":"map_cells_to_atlas (generic function) — map_cells_to_atlas","title":"map_cells_to_atlas (generic function) — map_cells_to_atlas","text":"Method forward warping segmentation data atlas space slice object. Requires segmentation objects made channels specified registration object. Method forward warping segmentation data atlas space slice within mouse object. Requires segmentation objects made channels specified registration.","code":""},{"path":"/reference/map_cells_to_atlas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"map_cells_to_atlas (generic function) — map_cells_to_atlas","text":"","code":"map_cells_to_atlas(x, ...)  # S3 method for slice map_cells_to_atlas(   s,   channels = NULL,   clean = TRUE,   display = TRUE,   mouse_ID = NULL,   ... )  # S3 method for mouse map_cells_to_atlas(   m,   slice_ID = NA,   hemisphere = NULL,   channels = NULL,   clean = TRUE,   display = TRUE,   replace = FALSE,   ... )"},{"path":"/reference/map_cells_to_atlas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"map_cells_to_atlas (generic function) — map_cells_to_atlas","text":"... additional parameters besides 'registration', 'segmentation', 'forward.warps', 'device' pass wholebrain::inspect.registration() function s slice object channels (str vector, default = NULL) Channels process. NULL, defaults channels stored slice object attributes. clean (bool, default = TRUE). Remove cells map regions. display (bool, default = TRUE). Display results forward warp slice.display mouse_ID (str) mouse ID m mouse object slice_ID (str) ID slice hemisphere (str) 'left', 'right' NULL () replace (bool, default = FALSE). Replace current forward warped data, raw cleaned.","code":""},{"path":"/reference/map_cells_to_atlas.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"map_cells_to_atlas (generic function) — map_cells_to_atlas","text":"m mouse object","code":""},{"path":[]},{"path":"/reference/maslov_sneppen_rewire.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal algorithm for maslov-sneppen rewiring\r\nThis algorithm is not appropriate if you would like to take weights into account\r\nSee Maslov & Sneppen (2002)","title":"Internal algorithm for maslov-sneppen rewiring\r\nThis algorithm is not appropriate if you would like to take weights into account\r\nSee Maslov & Sneppen (2002)","text":"Internal algorithm maslov-sneppen rewiring algorithm appropriate like take weights account See Maslov & Sneppen (2002)\"Specificity stability topology protein networks\"","code":""},{"path":"/reference/maslov_sneppen_rewire.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal algorithm for maslov-sneppen rewiring\r\nThis algorithm is not appropriate if you would like to take weights into account\r\nSee Maslov & Sneppen (2002)","text":"","code":"maslov_sneppen_rewire(network, n_rewires = 10000)"},{"path":"/reference/maslov_sneppen_rewire.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal algorithm for maslov-sneppen rewiring\r\nThis algorithm is not appropriate if you would like to take weights into account\r\nSee Maslov & Sneppen (2002)","text":"network tidygraph graph object n_rewires number rewires.","code":""},{"path":"/reference/maslov_sneppen_rewire.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal algorithm for maslov-sneppen rewiring\r\nThis algorithm is not appropriate if you would like to take weights into account\r\nSee Maslov & Sneppen (2002)","text":"tidygraph graph","code":""},{"path":"/reference/mouse.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a mouse object — mouse","title":"Create a mouse object — mouse","text":"mouse() constructs S3 object class 'mouse'. mouse object consists list slice objects attributes stored list. slice objects added mouse object function add_slice(). slice named element mouse object list, naming convention dependent slice ID hemisphere attributes slice object. processing either left right hemisphere, slice named convention: \"slice_ID\" appended \"hemisphere\" hemisphere attribute NULL,  .e. whole slice aligns well single atlas plate need create separate slice objects per hemisphere, slice named convention: \"slice_ID\"","code":""},{"path":"/reference/mouse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a mouse object — mouse","text":"","code":"mouse(   mouse_ID = \"set ID\",   sex = \"female\",   age = NULL,   genotype = NULL,   reporter = NULL,   strain = NULL,   experiment = NULL,   group = NULL,   drug = NULL,   cohort = NULL,   input_path = \"set input path\",   output_path = \"set output path\",   ... )"},{"path":"/reference/mouse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a mouse object — mouse","text":"mouse_ID (str, default = 'set ID') e.g. '1_1' sex (str, default = \"female\") age (str, default = NULL) genotype (str, default = NULL) reporter (str, default = NULL) strain (str, default = NULL) e.g. 'B6' experiment (str, default = NULL) e.g. 'sundowning' group (str, default = NULL) e.g. 'control' 'AD' drug (str, default = NULL) e.g. 'vehicle' 'ketamine' cohort (str, default = NULL) input_path (str, default = 'set input path') Root path containing mouse data slice image subfolders. useful changed computers drive mapped data slightly changed.                 TODO: currently used. include search function parse files individual slice information mouse. output_path (str, default = 'set output path') Set path folder want save mouse RDATA file . ... additional custom keyword pair attributes like store","code":""},{"path":"/reference/mouse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a mouse object — mouse","text":"mouse, colloquial term object class 'mouse'. 'mouse' object also list, class list.","code":""},{"path":"/reference/mouse.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a mouse object — mouse","text":"mouse attributes can assigned arguments mouse constructor function. See parameters listed default values attributes Note able add custom attributes keyword pairs, like keep track additional piece information. However, serve descriptive purpose used analysis. may need use mouse attributes fill many applicable experiment.","code":""},{"path":[]},{"path":"/reference/mouse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a mouse object — mouse","text":"","code":"mouse_example <- mouse() # initializes a mouse object"},{"path":"/reference/name.from.acronym.custom.html","id":null,"dir":"Reference","previous_headings":"","what":"Get region ontology name from acronym — name.from.acronym.custom","title":"Get region ontology name from acronym — name.from.acronym.custom","text":"Get whole regional names acronyms based custom lookup table imported accomodate ontologies.","code":""},{"path":"/reference/name.from.acronym.custom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get region ontology name from acronym — name.from.acronym.custom","text":"","code":"name.from.acronym.custom(x, ontology = \"unified\")"},{"path":"/reference/name.from.acronym.custom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get region ontology name from acronym — name.from.acronym.custom","text":"x (str) Regional acronym vector regional acronyms ontology (str, options: \"unified\")","code":""},{"path":"/reference/name.from.acronym.html","id":null,"dir":"Reference","previous_headings":"","what":"Get region ontology name from acronym — name.from.acronym","title":"Get region ontology name from acronym — name.from.acronym","text":"Get whole regional names acronyms based lookup table including SMARTR's custom ontology dorsal ventral split hippocampus","code":""},{"path":"/reference/name.from.acronym.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get region ontology name from acronym — name.from.acronym","text":"","code":"name.from.acronym(x)"},{"path":"/reference/name.from.acronym.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get region ontology name from acronym — name.from.acronym","text":"x (str) Regional acronym vector regional acronyms","code":""},{"path":"/reference/name.from.id.custom.html","id":null,"dir":"Reference","previous_headings":"","what":"Get region ontology name from ID — name.from.id.custom","title":"Get region ontology name from ID — name.from.id.custom","text":"Similar wholebrain package's search functions get whole regional names numerical ID lookup table. custom ontologies.","code":""},{"path":"/reference/name.from.id.custom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get region ontology name from ID — name.from.id.custom","text":"","code":"name.from.id.custom(x, ontology = \"unified\")"},{"path":"/reference/name.from.id.custom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get region ontology name from ID — name.from.id.custom","text":"x (int) integer ID ontology (str, options: \"unified\")","code":""},{"path":"/reference/name.from.id.html","id":null,"dir":"Reference","previous_headings":"","what":"Get region ontology name from ID — name.from.id","title":"Get region ontology name from ID — name.from.id","text":"Similar wholebrain package's search functions get whole regional names numerical ID lookup table including SMARTR's custom ontology  dorsal ventral split hippocampus","code":""},{"path":"/reference/name.from.id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get region ontology name from ID — name.from.id","text":"","code":"name.from.id(x)"},{"path":"/reference/name.from.id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get region ontology name from ID — name.from.id","text":"x (int) integer ID","code":""},{"path":"/reference/normalize_cell_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize cell counts per mm^2^ or by mm^3^ (if multiplying by the stack size). — normalize_cell_counts","title":"Normalize cell counts per mm^2^ or by mm^3^ (if multiplying by the stack size). — normalize_cell_counts","text":"Run function slices want process finished added combined cell counts get_cell_table(). functions process channels cell table made using latter function.","code":""},{"path":"/reference/normalize_cell_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize cell counts per mm^2^ or by mm^3^ (if multiplying by the stack size). — normalize_cell_counts","text":"","code":"normalize_cell_counts(   m,   combine_hemispheres = TRUE,   simplify_regions = TRUE,   simplify_keywords = c(\"layer\", \"part\", \"stratum\", \"division\", \"leaflet\",     \"Subgeniculate\", \"island\", \"Islands\", \"Fields of Forel\", \"Cajal\", \"Darkschewitsch\",     \"Precommissural\"),   split_hipp_DV = TRUE,   DV_split_AP_thresh = -2.7 )"},{"path":"/reference/normalize_cell_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize cell counts per mm^2^ or by mm^3^ (if multiplying by the stack size). — normalize_cell_counts","text":"m mouse object combine_hemispheres (bool, default = TRUE) Combine normalized cell counts hemispheres simplify_regions (bool, default = TRUE ) simplify normalized region counts based keywords internal function, simplify_keywords simplify_keywords (str vec, default =  c(\"layer\",\"part\",\"stratum\",\"division\")). Keywords search region names simplify parent structure split_hipp_DV (bool, default = TRUE) Split subregions CA1, CA2, CA3, DG based specified AP coordinate cutoff. Allen atlas dorsal/ventral region designation ROIs. DV_split_AP_thresh (numeric, default = -2,7) specified AP coordinate threshold split hippocampal cell counts dorsal ventral.","code":""},{"path":[]},{"path":"/reference/normalize_cell_counts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalize cell counts per mm^2^ or by mm^3^ (if multiplying by the stack size). — normalize_cell_counts","text":"","code":"m <- normalize_cell_counts(m, combine_hemispheres = TRUE, simplify_regions = TRUE) #> Error in normalize_cell_counts(m, combine_hemispheres = TRUE, simplify_regions = TRUE): object 'm' not found"},{"path":"/reference/normalize_colabel_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize colabel counts over a designated denominator channel. — normalize_colabel_counts","title":"Normalize colabel counts over a designated denominator channel. — normalize_colabel_counts","text":"function can run running combine_norm_cell_counts(). divides colabelled cell counts designated normalization channel provide normalized ratio. Please note areas volumes cancel operation. designed work multiple hemispheres. Please combine cell counts across multiple hemispheres run normalize_cell_counts().","code":""},{"path":"/reference/normalize_colabel_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize colabel counts over a designated denominator channel. — normalize_colabel_counts","text":"","code":"normalize_colabel_counts(e, denominator_channel = \"eyfp\")"},{"path":"/reference/normalize_colabel_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize colabel counts over a designated denominator channel. — normalize_colabel_counts","text":"e experiment object denominator_channel (str, default = \"eyfp\") exact name channel used normalization","code":""},{"path":"/reference/normalize_colabel_counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize colabel counts over a designated denominator channel. — normalize_colabel_counts","text":"e experiment object new dataframe normalized ratios colabelled counts designated denominator counts. volumes region areas cancel , values count, normalized.count..area, normalized.count..volume . provide consistent input dataframe analysis functions.","code":""},{"path":[]},{"path":"/reference/normalize_colabel_counts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalize colabel counts over a designated denominator channel. — normalize_colabel_counts","text":"","code":"e <- normalize_colabel_counts(e, denominator_channel = \"eyfp\") #> Error in which(names(e$combined_normalized_counts$colabel) == \"name\"): object 'e' not found"},{"path":"/reference/ontology.html","id":null,"dir":"Reference","previous_headings":"","what":"Ontology — ontology","title":"Ontology — ontology","text":"custom adjustment Allen Common Coordinate Framework hippocampus (CA1, CA2, CA3, DG) subregions split dorsal ventral regions acronyms. given unique IDs parent ids except c(\"dCA1\", \"dCA2\", \"dCA3\", \"dDG\") c(\"vCA1\", \"vCA2\", \"vCA3\", \"vDG\"), whose parents c(CA1, CA2, CA3, DG) respectively.","code":""},{"path":"/reference/ontology.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ontology — ontology","text":"","code":"ontology"},{"path":"/reference/ontology.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Ontology — ontology","text":"dataframe","code":""},{"path":"/reference/ontology.unified.html","id":null,"dir":"Reference","previous_headings":"","what":"Unified Kim ontology — ontology.unified","title":"Unified Kim ontology — ontology.unified","text":"combined ontology created Yongsoo Kim lab. Combines nomenclature two -used mouse brain atlases, Franklin Paxinos (FP) common coordinate framework (CCF) Allen Institute Brain Science.","code":""},{"path":"/reference/ontology.unified.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unified Kim ontology — ontology.unified","text":"","code":"ontology.unified"},{"path":"/reference/ontology.unified.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Unified Kim ontology — ontology.unified","text":"dataframe","code":""},{"path":"/reference/parallel_coordinate_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a parallel coordinate plot — parallel_coordinate_plot","title":"Create a parallel coordinate plot — parallel_coordinate_plot","text":"Plot correlation difference two comparison groups parallel coordinate plot. function correlation_diff_permutation() must run first order generate results plot.","code":""},{"path":"/reference/parallel_coordinate_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a parallel coordinate plot — parallel_coordinate_plot","text":"","code":"parallel_coordinate_plot(   e,   permutation_comparison = \"AD_vs_control\",   channels = c(\"cfos\", \"eyfp\", \"colabel\"),   colors = c(\"#be0000\", \"#00782e\", \"#f09b08\"),   x_label_group_1 = NULL,   x_label_group_2 = NULL,   height = 10,   width = 10,   print_plot = TRUE,   save_plot = TRUE,   reverse_group_order = FALSE,   force = 1,   plt_theme = NULL,   label_size = 30,   image_ext = \".png\",   nudge_x = 2:5 )"},{"path":"/reference/parallel_coordinate_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a parallel coordinate plot — parallel_coordinate_plot","text":"e experiment object permutation_comparison name correlation group comparisons plot. channels (str, default = c(\"cfos\", \"eyfp\", \"colabel\")) channels plot colors (str, default = c(\"#be0000\", \"#00782e\", \"#f09b08\")) Hexadecimal codes corresponding channels (respectively) plot. x_label_group_1 (str, NULL) label first group permutation analysis. Note: customize graph labels. reverse group order. x_label_group_2 (str, NULL) label second group permutaiton analysis. Note: customize graph labels. reverse group order. height height plot inches. width width plot inches. print_plot (bool, default = TRUE) Whether display plot (addition saving plot) save_plot (bool, default = TRUE) Save figures subdirectory experiment object output folder. reverse_group_order (bool, default = TRUE) Reverse order groups x-axis. force (default =1) Force text repel text labels. plt_theme (default = NULL) Add ggplot2::theme() plot. NULL, default taken. label_size (default = 30) Default font size region labels. image_ext (default = \".png\") image extension save plot . nudge_x (vec, default = 2:5) vector determining jitter labels.","code":""},{"path":"/reference/parallel_coordinate_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a parallel coordinate plot — parallel_coordinate_plot","text":"p_list list length number channels, element containing plot handle channel.","code":""},{"path":"/reference/parentid.from.id.custom.html","id":null,"dir":"Reference","previous_headings":"","what":"Get parent id from id — parentid.from.id.custom","title":"Get parent id from id — parentid.from.id.custom","text":"Get parent id id","code":""},{"path":"/reference/parentid.from.id.custom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get parent id from id — parentid.from.id.custom","text":"","code":"parentid.from.id.custom(x, ontology = \"unified\")"},{"path":"/reference/parentid.from.id.custom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get parent id from id — parentid.from.id.custom","text":"x  ontology","code":""},{"path":"/reference/permute_corr_diff_distrib.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate array of null distribution of region pairwise correlation differences. — permute_corr_diff_distrib","title":"Generate array of null distribution of region pairwise correlation differences. — permute_corr_diff_distrib","text":"Generate array null distribution region pairwise correlation differences.","code":""},{"path":"/reference/permute_corr_diff_distrib.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate array of null distribution of region pairwise correlation differences. — permute_corr_diff_distrib","text":"","code":"permute_corr_diff_distrib(   df,   correlation_list_name_1,   correlation_list_name_2,   n_shuffle = n_shuffle,   seed = 5,   method = \"pearson\",   ... )"},{"path":"/reference/permute_corr_diff_distrib.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate array of null distribution of region pairwise correlation differences. — permute_corr_diff_distrib","text":"seed random seed replication method (str, default = \"pearson\", options = c(\"pearson\", \"spearman\")) Specifies type correlations compute. Spearman correlations Pearson linear correlations computed ranks non-missing elements, using midranks ties. See also hmisc::rcorr()","code":""},{"path":[]},{"path":"/reference/plot_betweenness_regions.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the betweenness distributions across regions — plot_betweenness_regions","title":"Plot the betweenness distributions across regions — plot_betweenness_regions","text":"Bar plot betweenness per region descending magnitude","code":""},{"path":"/reference/plot_betweenness_regions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the betweenness distributions across regions — plot_betweenness_regions","text":"","code":"plot_betweenness_regions(   e,   channels = c(\"cfos\", \"eyfp\"),   colors = c(\"red\", \"green\"),   network = \"AD\",   title = \"\",   height = 10,   width = 20,   ylim = c(0, 15),   filter_isolates = TRUE,   sort_super_region = FALSE,   region_label_angle = 60,   label_text_size = 12,   image_ext = \".png\",   print_plot = TRUE,   save_plot = TRUE,   theme.bar = NULL )"},{"path":"/reference/plot_betweenness_regions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the betweenness distributions across regions — plot_betweenness_regions","text":"e experiment object channels (str, default = c(\"cfos\", \"eyfp\", \"colabel\")) Channels plot colors (str, default = ) String vector hexadecimal color codes corresponding channel plotted. network (str, default = \"AD\") network plot betweenness distribution across regions title (str, default = \"\") height (int, default = 15) Height plot inches. width (int, default = 20) Width plot inches. ylim (vec, default = c(0,15))axes limits y-axis filter_isolates (default = TRUE) Avoid plotting isolated nodes (zero value) sort_super_region (bool, default = FALSE) Whether divide subfacets based parent region region_label_angle (int, default = 60) Angle region labels. label_text_size (int, default = 12) Font size region labels. image_ext (default = \".png\") image extension plot . print_plot (bool, default = TRUE) Whether print plot output.s save_plot (bool, default = TRUE) Save figures subdirectory experiment object output folder. theme.bar User option use ggplot theme experiment object output folder.","code":""},{"path":"/reference/plot_betweenness_regions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the betweenness distributions across regions — plot_betweenness_regions","text":"p_list list length number channels, element containing plot handle channel.","code":""},{"path":"/reference/plot_cell_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"This function allows for plotting of normalized cell counts by area across specific regions to plot. Two different mouse attributes can be used as categorical variables to map to either the color or\r\npattern aesthetics of the bar plot, e.g. sex and experimental group.\r\nThe color aesthetic takes precedence over the pattern aesthetic so if you only want to use one mouse attribute, for plotting\r\nset it to the color_mapping parameter and set the pattern_mapping parameter to NULL. — plot_cell_counts","title":"This function allows for plotting of normalized cell counts by area across specific regions to plot. Two different mouse attributes can be used as categorical variables to map to either the color or\r\npattern aesthetics of the bar plot, e.g. sex and experimental group.\r\nThe color aesthetic takes precedence over the pattern aesthetic so if you only want to use one mouse attribute, for plotting\r\nset it to the color_mapping parameter and set the pattern_mapping parameter to NULL. — plot_cell_counts","text":"function allows plotting normalized cell counts area across specific regions plot. Two different mouse attributes can used categorical variables map either color pattern aesthetics bar plot, e.g. sex experimental group. color aesthetic takes precedence pattern aesthetic want use one mouse attribute, plotting set color_mapping parameter set pattern_mapping parameter NULL.","code":""},{"path":"/reference/plot_cell_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function allows for plotting of normalized cell counts by area across specific regions to plot. Two different mouse attributes can be used as categorical variables to map to either the color or\r\npattern aesthetics of the bar plot, e.g. sex and experimental group.\r\nThe color aesthetic takes precedence over the pattern aesthetic so if you only want to use one mouse attribute, for plotting\r\nset it to the color_mapping parameter and set the pattern_mapping parameter to NULL. — plot_cell_counts","text":"","code":"plot_cell_counts(   e,   channel = \"eyfp\",   rois = c(\"AAA\", \"dDG\", \"HY\"),   color_mapping = \"group\",   colors = c(\"#952899\", \"#358a9c\"),   pattern_mapping = NULL,   patterns = c(\"gray100\", \"hs_fdiagonal\", \"hs_horizontal\", \"gray90\", \"hs_vertical\"),   ylab = bquote(`Cell counts `(\"cells/mm\"^3)),   error_bar = \"sem\",   ylim = c(0, 100),   plot_individual = TRUE,   height = 8,   width = 8,   print_plot = TRUE,   save_plot = TRUE,   image_ext = \".png\" )"},{"path":"/reference/plot_cell_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function allows for plotting of normalized cell counts by area across specific regions to plot. Two different mouse attributes can be used as categorical variables to map to either the color or\r\npattern aesthetics of the bar plot, e.g. sex and experimental group.\r\nThe color aesthetic takes precedence over the pattern aesthetic so if you only want to use one mouse attribute, for plotting\r\nset it to the color_mapping parameter and set the pattern_mapping parameter to NULL. — plot_cell_counts","text":"e experiment object channel (str, default = \"eyfp\") channel used denominator fraction counts. rois (vec,  default = c(\"AAA\", \"dDG\", \"HY\")) Allen acronyms ROIS user like plot color_mapping (str, default = \"group\") variable name maps subgroups  like graphically distinguish colors. colors (vec, default = c(\"#952899\", \"#358a9c\")) vector hexadecimal color codes subgroup distinguished color mapping variable. pattern_mapping (str, default = NULL) variable name maps subgroups  like graphically distinguish bar patterns.Set NULL use. patterns (default = c(\"gray100\", 'hs_fdiagonal', \"hs_horizontal\", \"gray90\", \"hs_vertical\") Available patterns ggpattern package map subgroups distinguished pattern mapping variable. ylab (str, default =  bquote('Cell counts '('cells/mm'^3))) unit measurement error_bar (str, c(\"sd\", \"sem)) options type error bar display, standard deviation standard error mean. height (numeric) height plot inches save . width (numeric) height plot inches save . save_plot (book) Whether save plot experiment figures folder. image_ext (str, default = \".png\") Extension output file plot_individua (bool) whether plot individual points","code":""},{"path":"/reference/plot_cell_counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function allows for plotting of normalized cell counts by area across specific regions to plot. Two different mouse attributes can be used as categorical variables to map to either the color or\r\npattern aesthetics of the bar plot, e.g. sex and experimental group.\r\nThe color aesthetic takes precedence over the pattern aesthetic so if you only want to use one mouse attribute, for plotting\r\nset it to the color_mapping parameter and set the pattern_mapping parameter to NULL. — plot_cell_counts","text":"p Plot handle figure","code":""},{"path":"/reference/plot_cell_counts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"This function allows for plotting of normalized cell counts by area across specific regions to plot. Two different mouse attributes can be used as categorical variables to map to either the color or\r\npattern aesthetics of the bar plot, e.g. sex and experimental group.\r\nThe color aesthetic takes precedence over the pattern aesthetic so if you only want to use one mouse attribute, for plotting\r\nset it to the color_mapping parameter and set the pattern_mapping parameter to NULL. — plot_cell_counts","text":"","code":"plot_percentage_colabel #> Error in eval(expr, envir, enclos): object 'plot_percentage_colabel' not found"},{"path":"/reference/plot_correlation_heatmaps.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot correlation heatmaps — plot_correlation_heatmaps","title":"Plot correlation heatmaps — plot_correlation_heatmaps","text":"Plot correlation heatmaps","code":""},{"path":"/reference/plot_correlation_heatmaps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot correlation heatmaps — plot_correlation_heatmaps","text":"","code":"plot_correlation_heatmaps(   e,   correlation_list_name,   channels = c(\"cfos\", \"eyfp\", \"colabel\"),   colors = c(\"#be0000\", \"#00782e\", \"#f09b08\"),   sig_color = \"yellow\",   sig_nudge_y = -0.7,   sig_size = 7,   ontology = \"allen\",   anatomical.order = c(\"Isocortex\", \"OLF\", \"HPF\", \"CTXsp\", \"CNU\", \"TH\", \"HY\", \"MB\",     \"HB\", \"CB\"),   print_plot = TRUE,   save_plot = TRUE,   image_ext = \".png\",   plot_title = NULL,   height = 10,   width = 10,   theme.hm = ggplot2::theme(axis.text.x = element_text(hjust = 1, vjust = 0.5, angle =     90, size = 8), axis.text.y = element_text(vjust = 0.5, size = 8), plot.title =     element_text(hjust = 0.5, size = 36), axis.title = element_text(size = 18),     legend.text = element_text(size = 22), legend.key.height = unit(100, \"points\"),     legend.title = element_text(size = 22), panel.spacing = unit(0.2, \"lines\"),     strip.text.x = element_text(angle = 0, hjust = 0.5, vjust = 0.5, size = 10),     strip.text.y = element_text(angle = 270,      hjust = 0.5, vjust = 0.5, size = 10),     strip.placement = \"outside\", strip.background = element_rect(color = \"black\", fill =     \"lightblue\")) )"},{"path":"/reference/plot_correlation_heatmaps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot correlation heatmaps — plot_correlation_heatmaps","text":"e experiment object. Must contain named correlation_list object generated get_correlations() correlation_list_name (str) name correlation object generated get_correlations() channels (str, default = c(\"cfos\", \"eyfp\", \"colabel\")) Must exist channels attribute correlation_list. colors (str, default = c(\"#be0000\", \"#00782e\", \"#f09b08\")) Hexadecimal code colors corresponding channels parameter. Color values can also input compatible ggplot2 plotting functions. sig_color (str, default = \"yellow\") Color significance symbol R sig_nudge_y (default = -0.7) Relative amount nudge significance symbols y direction center square. sig_size (default = 7) Point size significance symbol. ontology (str, default = \"allen\") Region ontology use. options = \"allen\" \"unified\" anatomical.order (default = c(\"Isocortex\", \"OLF\", \"HPF\", \"CTXsp\", \"CNU\",\"TH\", \"HY\", \"MB\", \"HB\", \"CB\")) Default way group subregions super regions order print_plot (bool, default = TRUE) Print plot graphics windows. save_plot (bool, default = TRUE) Save figures subdirectory experiment object output folder. image_ext (default = \".png\") image extension plot . plot_title (str, default = NULL) NULL, correlation_list_name used title underscores removed. height (int) Height plot inches. width (int) Width plot inches. theme.hm Option use custom ggplot2 theme user wants. See default values example.","code":""},{"path":"/reference/plot_correlation_heatmaps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot correlation heatmaps — plot_correlation_heatmaps","text":"p_list list length number channels, element containing plot handle channel.","code":""},{"path":[]},{"path":"/reference/plot_correlation_heatmaps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot correlation heatmaps — plot_correlation_heatmaps","text":"","code":"plot_correlation_heatmaps(e, correlation_list_name = \"female_AD\") #> Error in plot_correlation_heatmaps(e, correlation_list_name = \"female_AD\"): object 'e' not found"},{"path":"/reference/plot_degree_distributions.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the degree distributions — plot_degree_distributions","title":"Plot the degree distributions — plot_degree_distributions","text":"Plot stacked bar plot degree distributions.","code":""},{"path":"/reference/plot_degree_distributions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the degree distributions — plot_degree_distributions","text":"","code":"plot_degree_distributions(   e,   channels = c(\"cfos\", \"eyfp\"),   color_palettes = c(\"reds\", \"greens\"),   colors_manual = NULL,   labels = c(female_AD = \"female_AD_label\", female_control = \"female_control_label\"),   title = \"my_title\",   height = 15,   width = 15,   xlim = c(0, 20),   ylim = c(0, 15),   image_ext = \".png\",   print_plot = TRUE,   theme.gg = NULL,   save_plot = TRUE )"},{"path":"/reference/plot_degree_distributions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the degree distributions — plot_degree_distributions","text":"e experiment object channels (str, default = c(\"cfos\", \"eyfp\")) Channels plot. color_palettes (str, default = c(\"reds\", \"greens\")) Color palettes grDevices::hcl.colors used plotting networks channel, respectively. colors_manual (str, default = NULL ) Manually choose hexadecimal color codes create custom color palette, e.g. colors_manual = c(\"#660000\", \"#FF0000\", \"#FF6666\"). Warning: color applied channels. recommended set channels parameter single channel parameter used. labels (e.g. labels = c(network1_name = \"network 1 label\", network2_name = \"network 2 label)) legend labels correspond respective network names. title (str, default = \"my_title\") experiment object output folder. height (int, default = 15) Height plot inches. width (int, default = 15) Width plot inches. xlim (vec, default = c(0,20)) axes limits x-axis ylim (vec, default = c(0,15))axes limits y-axis image_ext (default = \".png\") image extension plot . print_plot (bool, default = TRUE) Whether print plot output. theme.gg (default = NULL) Option use custom ggplot2 theme user wants save_plot (bool, default = TRUE) Save figures subdirectory experiment object output folder.","code":""},{"path":"/reference/plot_degree_distributions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the degree distributions — plot_degree_distributions","text":"p_list list length number channels, element containing plot handle channel.","code":""},{"path":"/reference/plot_degree_regions.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the degree distributions across regions — plot_degree_regions","title":"Plot the degree distributions across regions — plot_degree_regions","text":"Bar plot degree per region descending magnitude","code":""},{"path":"/reference/plot_degree_regions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the degree distributions across regions — plot_degree_regions","text":"","code":"plot_degree_regions(   e,   channels = c(\"cfos\", \"eyfp\"),   colors = c(\"red\", \"green\"),   network = \"AD\",   title = \"\",   height = 10,   width = 20,   ylim = c(0, 15),   sort_super_region = FALSE,   region_label_angle = 60,   label_text_size = 12,   filter_isolates = TRUE,   image_ext = \".png\",   print_plot = TRUE,   save_plot = TRUE,   theme.bar = NULL )"},{"path":"/reference/plot_degree_regions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the degree distributions across regions — plot_degree_regions","text":"e experiment object channels (str, default = c(\"cfos\", \"eyfp\", \"colabel\")) Channels plot colors (str, default = ) String vector hexadecimal color codes corresponding channel plotted. network (str, default = \"AD\") network plot degree distribution across regions title (str, default = \"\") height (int, default = 15) Height plot inches. width (int, default = 20) Width plot inches. ylim (vec, default = c(0,15))axes limits y-axis sort_super_region (bool, default = FALSE) Whether divide subfacets based parent region region_label_angle (int, default = 60) Angle region labels. label_text_size (int, default = 12) Font size region labels. filter_isolates (default = TRUE) Avoid plotting isolated nodes (zero value) image_ext (default = \".png\") image extension plot . print_plot (bool, default = TRUE) Whether print plot output.s save_plot (bool, default = TRUE) Save figures subdirectory experiment object output folder. theme.bar User option use ggplot theme experiment object output folder.","code":""},{"path":"/reference/plot_degree_regions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the degree distributions across regions — plot_degree_regions","text":"p_list list length number channels, element containing plot handle channel.","code":""},{"path":"/reference/plot_joined_networks.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the networks stored in an experiment object — plot_joined_networks","title":"Plot the networks stored in an experiment object — plot_joined_networks","text":"Plot networks stored experiment object","code":""},{"path":"/reference/plot_joined_networks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the networks stored in an experiment object — plot_joined_networks","text":"","code":"plot_joined_networks(   e,   correlation_list_names = c(\"male_agg\", \"female_non\"),   title = NULL,   channels = \"cfos\",   absolute_weight = TRUE,   edge_colors = c(male_agg_pos = \"#06537f\", male_agg_neg = \"#526c7a\", female_non_pos =     \"#C70039\", female_non_neg = \"#71585f\"),   edge_color_labels = c(male_agg_pos = \"Positive male\", male_agg_neg = \"Negative male\",     female_non_pos = \"Positive female\", female_non_neg = \"Negative female\"),   height = 15,   width = 15,   region_legend = TRUE,   degree_scale_limit = c(1, 10),   correlation_edge_width_limit = c(0.8, 1),   image_ext = \".png\",   print_plot = TRUE,   graph_theme = NULL,   transparent_edge_group1 = TRUE,   transparent_edge_group2 = FALSE,   label_size = 5,   label_offset = 0.15,   edge_thickness_range = c(1, 5),   node_size_range = c(1, 8),   anatomical.colors = NULL,   save_plot = TRUE )"},{"path":"/reference/plot_joined_networks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the networks stored in an experiment object — plot_joined_networks","text":"e experiment object correlation_list_names (str vec) character vector two correlation lists used include joined network, e.g., correlation_list_names = c(\"male_agg\", \"female_non\") title (str, default = NULL) Title network plot channels (str, default = c(\"cfos\", \"eyfp\", \"colabel\")) absolute_weight (bool, default = TRUE) Whether plot absolute weights. TRUE, edge_colors edge_colors_label contain values positive negative correlations. height Height plot inches. width width plot inches. region_legend (default = TRUE) Boolean determining whether show region legend categorizing subregions largest parent region. works well Allen ontology used dataset. degree_scale_limit (vec, default = c(1,10)) Scale limit degree size correlation_edge_width_limit Can also hexadecimal color code written string. image_ext (default = \".png\") image extension plot . print_plot (bool, default = TRUE) Whether print plot output. experiment object output folder. graph_theme (default = NULL) Add ggraph::theme() network graph. NULL, default taken. label_size (default = 5) Default font size network region labels. label_offset (default = 0.15) Distance label nodes. save_plot (bool, default = TRUE) Save figures subdirectory experiment object output folder. edge_color (str, default =  c(male_agg_pos = \"Positive male\", male_agg_neg = \"Negative male\", female_non_pos = \"Positive female\", female_non_neg = \"Negative female\")) Color network edges named vector.","code":""},{"path":"/reference/plot_joined_networks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the networks stored in an experiment object — plot_joined_networks","text":"p_list list length number channels, element containing plot handle channel.","code":""},{"path":"/reference/plot_mean_between_centrality.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot mean betweenness centrality — plot_mean_between_centrality","title":"Plot mean betweenness centrality — plot_mean_between_centrality","text":"Plot mean betweenness centrality networks barplot. Error bars plotted SEM.","code":""},{"path":"/reference/plot_mean_between_centrality.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot mean betweenness centrality — plot_mean_between_centrality","text":"","code":"plot_mean_between_centrality(   e,   color_palettes = c(\"reds\", \"greens\"),   colors_manual = NULL,   channels = c(\"cfos\", \"eyfp\"),   labels = c(AD = \"AD_label\", control = \"control_label\"),   title = \"my_title\",   height = 10,   width = 10,   label_angle = 60,   rev_x_scale = FALSE,   ylim = c(0, 50),   image_ext = \".png\",   print_plot = TRUE,   save_plot = TRUE )"},{"path":"/reference/plot_mean_between_centrality.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot mean betweenness centrality — plot_mean_between_centrality","text":"e experiment object color_palettes (str, default = c(\"reds\", \"greens\")) Color palettes grDevices::hcl.colors used plotting networks characteristics channel, respectively. colors_manual (str, default = NULL ) Manually choose hexadecimal color codes create custom color palette, e.g. colors_manual = c(\"#660000\", \"#FF0000\", \"#FF6666\"). Warning: applied channels. recommended set channels parameter single channel parameter used. channels (str, default = c(\"cfos\", \"eyfp\", \"colabel\")) Channels plot labels labels correspond network names. title (str, default = \"my_title) plot title height (int, default = 10) Height plot inches. width (int, default = 10) Width plot inches. label_angle (int, default = 60) rev_x_scale (bool, default = FALSE) Reveres scale categorical variables experiment object output folder. ylim (vec, default = c(0,10)) Axes limits y-axis image_ext (default = \".png\") image extension plot . print_plot (bool, default = TRUE) Whether print plot output.s save_plot (bool, default = TRUE) Save figures subdirectory experiment object output folder.","code":""},{"path":"/reference/plot_mean_between_centrality.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot mean betweenness centrality — plot_mean_between_centrality","text":"p_list list length number channels, element containing plot handle channel.","code":""},{"path":"/reference/plot_mean_clust_coeff.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot mean clustering coefficient — plot_mean_clust_coeff","title":"Plot mean clustering coefficient — plot_mean_clust_coeff","text":"Plot mean clustering coefficients networks barplot. Error bars plotted SEM.","code":""},{"path":"/reference/plot_mean_clust_coeff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot mean clustering coefficient — plot_mean_clust_coeff","text":"","code":"plot_mean_clust_coeff(   e,   color_palettes = c(\"reds\", \"greens\"),   colors_manual = NULL,   channels = c(\"cfos\", \"eyfp\"),   labels = c(AD = \"AD_label\", control = \"control_label\"),   title = \"my_title\",   height = 10,   width = 10,   label_angle = 60,   rev_x_scale = FALSE,   ylim = c(0, 0.7),   image_ext = \".png\",   print_plot = TRUE,   save_plot = TRUE )"},{"path":"/reference/plot_mean_clust_coeff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot mean clustering coefficient — plot_mean_clust_coeff","text":"e experiment object color_palettes (str, default = c(\"reds\", \"greens\")) Color palettes grDevices::hcl.colors used plotting networks characteristics channel, respectively. colors_manual (str, default = NULL ) Manually choose hexadecimal color codes create custom color palette, e.g. colors_manual = c(\"#660000\", \"#FF0000\", \"#FF6666\"). Warning: applied channels. recommended set channels parameter single channel parameter used. channels (str, default = c(\"cfos\", \"eyfp\", \"colabel\")) Channels plot labels (e.g. labels = c(network1_name = \"network 1 label\", network2_name = \"network 2 label)) legend labels correspond network names. title (str, default = \"my_title) plot title height (int, default = 10) Height plot inches. width (int, default = 10) Width plot inches. label_angle (int, default = 60) rev_x_scale (bool, default = FALSE) Reveres scale categorical variables experiment object output folder. ylim (vec, default = c(0,10)) Axes limits y-axis image_ext (default = \".png\") image extension plot . print_plot (bool, default = TRUE) Whether print plot output.s save_plot (bool, default = TRUE) Save figures subdirectory experiment object output folder.","code":""},{"path":"/reference/plot_mean_clust_coeff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot mean clustering coefficient — plot_mean_clust_coeff","text":"p_list list length number channels, element containing plot handle channel.","code":""},{"path":"/reference/plot_mean_degree.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the mean degree of the networks in a barplot. Error bars are plotted as SEM. — plot_mean_degree","title":"Plot the mean degree of the networks in a barplot. Error bars are plotted as SEM. — plot_mean_degree","text":"Plot mean degree networks barplot. Error bars plotted SEM.","code":""},{"path":"/reference/plot_mean_degree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the mean degree of the networks in a barplot. Error bars are plotted as SEM. — plot_mean_degree","text":"","code":"plot_mean_degree(   e,   color_palettes = c(\"reds\", \"greens\"),   colors_manual = NULL,   channels = c(\"cfos\", \"eyfp\"),   labels = c(AD = \"AD_label\", control = \"control_label\"),   title = \"my_title\",   height = 10,   width = 10,   label_angle = 60,   rev_x_scale = FALSE,   ylim = c(0, 70),   image_ext = \".png\",   print_plot = TRUE,   save_plot = TRUE )"},{"path":"/reference/plot_mean_degree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the mean degree of the networks in a barplot. Error bars are plotted as SEM. — plot_mean_degree","text":"e experiment object color_palettes (str, default = c(\"reds\", \"greens\")) Color palettes grDevices::hcl.colors used plotting networks channel, respectively. colors_manual (str, default = NULL ) Manually choose hexadecimal color codes create custom color palette, e.g. colors_manual = c(\"#660000\", \"#FF0000\", \"#FF6666\"). Warning: applied channels. recommended set channels parameter single channel parameter used. channels (str, default = c(\"cfos\", \"eyfp\", \"colabel\")) Channels plot labels (str) legend labels correspond network names, e.g. labels = c(network1_name = \"network 1 label\", network2_name = \"network 2 label). network names used function summarise_networks(). title (str, default = \"my_title) plot title height (int, default = 10) Height plot inches. width (int, default = 10) Width plot inches. label_angle (int, default = 60) rev_x_scale (bool, default = FALSE) Reveres scale categorical variables experiment object output folder. ylim (vec, default = c(0,10)) Axes limits y-axis image_ext (default = \".png\") image extension plot . print_plot (bool, default = TRUE) Whether print plot output.s save_plot (bool, default = TRUE) Save figures subdirectory experiment object output folder.","code":""},{"path":"/reference/plot_mean_degree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the mean degree of the networks in a barplot. Error bars are plotted as SEM. — plot_mean_degree","text":"p_list list length number channels, element containing plot handle channel.","code":""},{"path":"/reference/plot_mean_global_effic.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot mean global efficiency — plot_mean_global_effic","title":"Plot mean global efficiency — plot_mean_global_effic","text":"Plot mean global efficiency networks barplot. Error bars plotted SEM.","code":""},{"path":"/reference/plot_mean_global_effic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot mean global efficiency — plot_mean_global_effic","text":"","code":"plot_mean_global_effic(   e,   color_palettes = c(\"reds\", \"greens\"),   colors_manual = NULL,   channels = c(\"cfos\", \"eyfp\"),   labels = c(AD = \"AD_label\", control = \"control_label\"),   title = \"my_title\",   height = 10,   width = 10,   label_angle = 60,   rev_x_scale = FALSE,   ylim = c(0, 0.7),   image_ext = \".png\",   print_plot = TRUE,   save_plot = TRUE )"},{"path":"/reference/plot_mean_global_effic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot mean global efficiency — plot_mean_global_effic","text":"e experiment object color_palettes (str, default = c(\"reds\", \"greens\")) Color palettes grDevices::hcl.colors used plotting networks characteristics channel, respectively. colors_manual (str, default = NULL ) Manually choose hexadecimal color codes create custom color palette, e.g. colors_manual = c(\"#660000\", \"#FF0000\", \"#FF6666\"). Warning: applied channels. recommended set channels parameter single channel parameter used. channels (str, default = c(\"cfos\", \"eyfp\", \"colabel\")) Channels plot labels labels correspond network names. title (str, default = \"my_title) plot title height (int, default = 10) Height plot inches. width (int, default = 10) Width plot inches. label_angle (int, default = 60) rev_x_scale (bool, default = FALSE) Reveres scale categorical variables experiment object output folder. ylim (vec, default = c(0,10)) Axes limits y-axis image_ext (default = \".png\") image extension plot . print_plot (bool, default = TRUE) Whether print plot output.s save_plot (bool, default = TRUE) Save figures subdirectory experiment object output folder.","code":""},{"path":"/reference/plot_mean_global_effic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot mean global efficiency — plot_mean_global_effic","text":"p_list list length number channels, element containing plot handle channel.","code":""},{"path":"/reference/plot_networks.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the networks stored in an experiment object — plot_networks","title":"Plot the networks stored in an experiment object — plot_networks","text":"Plot networks stored experiment object","code":""},{"path":"/reference/plot_networks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the networks stored in an experiment object — plot_networks","text":"","code":"plot_networks(   e,   network_name = \"AD\",   title = NULL,   channels = c(\"cfos\", \"eyfp\", \"colabel\"),   edge_color = \"firebrick\",   height = 15,   width = 15,   edge_type = \"arc\",   region_legend = TRUE,   degree_scale_limit = c(1, 10),   anatomical.colors = NULL,   correlation_edge_width_limit = c(0.8, 1),   image_ext = \".png\",   print_plot = TRUE,   graph_theme = NULL,   label_size = 5,   edge_thickness_range = c(1, 5),   node_size_range = c(1, 8),   label_offset = 0.15,   save_plot = TRUE )"},{"path":"/reference/plot_networks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the networks stored in an experiment object — plot_networks","text":"e experiment object network_name (str, default = \"AD\") title (str, default = NULL) Title network plot channels (str, default = c(\"cfos\", \"eyfp\", \"colabel\")) edge_color (str, default = \"firebrick\") Color network edges. height Height plot inches. width width plot inches. edge_type (default = \"arc\") \"arc\" \"diagonal\". Can also hexadecimal color code written string. region_legend (default = TRUE) Boolean determining whether show region legend categorizing subregions largest parent region. works well Allen ontology used dataset. degree_scale_limit (vec, default = c(1,10)) Scale limit degree size image_ext (default = \".png\") image extension plot . print_plot (bool, default = TRUE) Whether print plot output. experiment object output folder. graph_theme (default = NULL) Add ggraph::theme() network graph. NULL, default taken. label_size (default = 5) Default font size network region labels. label_offset (default = 0.15) Distance label nodes. save_plot (bool, default = TRUE) Save figures subdirectory experiment object output folder. anatomical.color (vec, NULL) Custom colors super region legend. (e.g., c(Isocortex = \"#5571a9\", OLF = \"#64bdc4\", HPF = \"#d2875b\", CTXsp = \"#87a3db\", CNU = \"#466496\", TH = \"#7e72af\", HY = \"#8e7960\",  MB = \"#d796c8\", HB = \"#646464\")). NULL results viridis.","code":""},{"path":"/reference/plot_networks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the networks stored in an experiment object — plot_networks","text":"p_list list length number channels, element containing plot handle channel.","code":""},{"path":"/reference/plot_normalized_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot normalized cell counts — plot_normalized_counts","title":"Plot normalized cell counts — plot_normalized_counts","text":"Plot cell counts normalized volume given channel","code":""},{"path":"/reference/plot_normalized_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot normalized cell counts — plot_normalized_counts","text":"","code":"plot_normalized_counts(   e,   channels = c(\"cfos\", \"eyfp\", \"colabel\"),   by = c(\"sex\", \"group\"),   values = list(c(\"female\", \"non\"), c(\"female\", \"agg\"), c(\"female\", \"control\"),     c(\"male\", \"agg\"), c(\"male\", \"control\")),   colors = c(\"white\", \"lightblue\", \"black\", \"red\", \"green\"),   ontology = \"allen\",   title = NULL,   unit_label = bquote(`Cell counts `(\"cells/mm\"^3)),   anatomical.order = c(\"Isocortex\", \"OLF\", \"HPF\", \"CTXsp\", \"CNU\", \"TH\", \"HY\", \"MB\",     \"HB\", \"CB\"),   height = 7,   width = 20,   region_label_angle = 50,   label_text_size = 8,   print_plot = TRUE,   save_plot = TRUE,   flip_axis = FALSE,   reverse_colors = FALSE,   legend.justification = c(0, 0),   legend.position = \"inside\",   legend.position.inside = c(0.05, 0.6),   legend.direction = \"vertical\",   limits = c(0, 1e+05),   facet_background_color = NULL,   strip_background_color = \"lightblue\",   image_ext = \".pdf\" )"},{"path":"/reference/plot_normalized_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot normalized cell counts — plot_normalized_counts","text":"e experiment object channels (str, default = c(\"cfos\", \"eyfp\", \"colabel\")) (str) Attribute names group , e.g. c(\"sex\", \"group\") values (list) list length number groups desired plotting. element list vector order respective values attributes entered parameter generate specific analysis group. vector unique generate uniquely colored bar. e.g.values = c(\"female\", \"AD\"). colors (str, default = c(\"white\", \"lightblue\")) Hexadecimal codes corresponding groups (respectively) plot. length vector length list. ontology (str, default = \"allen\") Region ontology use. options = \"allen\" \"unified\" title (str, default = NULL) optional title plot unit_label (str, default = bquote('Cell counts '('cells/mm'^3))) Default unit label graphs anatomical.order (default = c(\"Isocortex\", \"OLF\", \"HPF\", \"CTXsp\", \"CNU\",\"TH\", \"HY\", \"MB\", \"HB\", \"CB\")) Default way group subregions super regions order height height plot inches. width width plot inches. region_label_angle (int, default = 50) Angle region label. label_text_size (int, default = 8) Size text element region labels. print_plot (bool, default = TRUE) Whether display plot (addition saving plot) save_plot (bool, default = TRUE) Save figures subdirectory experiment object output folder. flip_axis plot cell counts x-axis rather y-axis. reverse_colors (bool, default = FALSE) Whether reverse color order. may depend order entered colors parameter legend.justification (default = c(0, 0)) legend.position (default = \"inside\") legend.position.inside (default = c(0.05, 0.6)) legend.direction (c(\"vertical\", \"horizontal\")) limits (c(0,100000)) Range normalized cell counts. facet_background_color (default = NULL) Set hexadecimal string, e.g.\"#FFFFFF\", want shade background graph. Defaults background NULL. strip_background_color (default = \"lightblue\") Color background srip delineating major anatomical parent regions. Set color name hexadecimal code. image_ext (default = \".png\") image extension plot .","code":""},{"path":"/reference/plot_normalized_counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot normalized cell counts — plot_normalized_counts","text":"p_list list length number channels, element containing plot handle channel.","code":""},{"path":"/reference/plot_normalized_counts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot normalized cell counts — plot_normalized_counts","text":"","code":"p_list <- plot_normalized_counts(e, channels = \"cfos\", by = c(\"sex\", \"group\"), values = list(c(\"female\", \"non\"), c(\"female\", \"agg\")), colors = c(\"white\", \"lightblue\")) #> Error in dplyr::ungroup(.): object 'e' not found"},{"path":"/reference/plot_percent_colabel.html","id":null,"dir":"Reference","previous_headings":"","what":"This function allows for plotting of colabelled cells over either the ","title":"This function allows for plotting of colabelled cells over either the ","text":"function allows plotting colabelled cells either \"cfos\" \"eyfp\" channels. allows specification specific brain regions plot. Two different mouse attributes can used categorical variables map either color pattern aesthetics bar plot, e.g. sex experimental group. color aesthetic takes precedence pattern aesthetic want use one mouse attribute, plotting set color_mapping parameter set pattern_mapping parameter NULL.","code":""},{"path":"/reference/plot_percent_colabel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function allows for plotting of colabelled cells over either the ","text":"","code":"plot_percent_colabel(   e,   colabel_channel = \"colabel\",   channel = \"eyfp\",   rois = c(\"AAA\", \"dDG\", \"HY\"),   color_mapping = \"sex\",   colors = c(\"#952899\", \"#358a9c\"),   pattern_mapping = NULL,   patterns = c(\"gray100\", \"hs_fdiagonal\",     \"hs_horizontal\\n                                              \", \"gray90\",     \"hs_vertical\"),   error_bar = \"sem\",   ylim = c(0, 100),   plot_individual = TRUE,   height = 8,   width = 8,   print_plot = TRUE,   save_plot = TRUE,   image_ext = \".png\" )"},{"path":"/reference/plot_percent_colabel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function allows for plotting of colabelled cells over either the ","text":"e experiment object channel (str, default = \"eyfp\") channel used denominator fraction counts. rois character vector region acronyms, e.g. c(\"AAA\", \"DG) color_mapping (str, default = \"sex\") name categorical variable (e.g., \"sex\", \"age\", etc.) map color aesthetic bar plot. colors (str) character vector color values desired groups. pattern_mapping (str, default = \"sex\") name categorical variable (e.g., \"sex\", \"age\", etc.) map pattern aesthetic bar plot. patterns (str, default = c(\"gray100\", 'hs_fdiagonal', \"hs_horizontal\", \"gray90\", \"hs_vertical\"), Pattern types define subgroups. error_bar (str, c(\"sd\", \"sem)) options type error bar display, standard deviation standard error mean.","code":""},{"path":"/reference/plot_percent_colabel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function allows for plotting of colabelled cells over either the ","text":"p Plot handle figure","code":""},{"path":"/reference/plot_percent_colabel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"This function allows for plotting of colabelled cells over either the ","text":"","code":"plot_percentage_colabel #> Error in eval(expr, envir, enclos): object 'plot_percentage_colabel' not found"},{"path":"/reference/print.correlation_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Print attributes of correlation_list object — print.correlation_list","title":"Print attributes of correlation_list object — print.correlation_list","text":"Print attributes correlation_list object","code":""},{"path":"/reference/print.correlation_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print attributes of correlation_list object — print.correlation_list","text":"","code":"# S3 method for correlation_list print(cl)"},{"path":"/reference/print.correlation_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print attributes of correlation_list object — print.correlation_list","text":"s slice object","code":""},{"path":"/reference/print.experiment.html","id":null,"dir":"Reference","previous_headings":"","what":"Print attributes of experiment object — print.experiment","title":"Print attributes of experiment object — print.experiment","text":"Print attributes experiment object","code":""},{"path":"/reference/print.experiment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print attributes of experiment object — print.experiment","text":"","code":"# S3 method for experiment print(e)"},{"path":"/reference/print.experiment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print attributes of experiment object — print.experiment","text":"e experiment object","code":""},{"path":"/reference/print.mouse.html","id":null,"dir":"Reference","previous_headings":"","what":"Print attributes of mouse object — print.mouse","title":"Print attributes of mouse object — print.mouse","text":"Print attributes mouse object","code":""},{"path":"/reference/print.mouse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print attributes of mouse object — print.mouse","text":"","code":"# S3 method for mouse print(m)"},{"path":"/reference/print.mouse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print attributes of mouse object — print.mouse","text":"m mouse object","code":""},{"path":"/reference/print.slice.html","id":null,"dir":"Reference","previous_headings":"","what":"Print attributes of slice object — print.slice","title":"Print attributes of slice object — print.slice","text":"Print attributes slice object","code":""},{"path":"/reference/print.slice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print attributes of slice object — print.slice","text":"","code":"# S3 method for slice print(s)"},{"path":"/reference/print.slice.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print attributes of slice object — print.slice","text":"s slice object","code":""},{"path":"/reference/register.html","id":null,"dir":"Reference","previous_headings":"","what":"Register (generic function) — register","title":"Register (generic function) — register","text":"Register (generic function) Register slice slice object Register slice mouse object. slice previously registered, default behavior continue modifying previous registration. Use replace parameter change behavior.","code":""},{"path":"/reference/register.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register (generic function) — register","text":"","code":"register(x, ...)  # S3 method for slice register(s, filter = NULL, ...)  # S3 method for mouse register(   m,   slice_ID = NA,   hemisphere = NULL,   filter = NULL,   replace = FALSE,   ... )"},{"path":"/reference/register.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Register (generic function) — register","text":"... additional parameters pass SMART::registration2() function, besides 'input', 'coordinate', 'filter' & 'correspondance' s slice object filter (list) Wholebrain filter parameters. m mouse object slice_ID (str)  ID slice hemisphere (str, default = NULL) 'left', 'right' NULL hemispheres included replace (bool, default = FALSE) Replace registration already contained mouse object resetting NULL value registration improvement loop.","code":""},{"path":"/reference/register.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Register (generic function) — register","text":"s slice object m  mouse object","code":""},{"path":"/reference/register.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Register (generic function) — register","text":"","code":"s <- register(s) #> Error in register(s): object 's' not found m <- register(m, slice_ID = '1_10', hemisphere = \"left\", filter = my_filter) #> Error in register(m, slice_ID = \"1_10\", hemisphere = \"left\", filter = my_filter): object 'm' not found"},{"path":"/reference/reset_mouse_root.html","id":null,"dir":"Reference","previous_headings":"","what":"Reset the root path for the folder containing the registration and segmentation data. — reset_mouse_root","title":"Reset the root path for the folder containing the registration and segmentation data. — reset_mouse_root","text":"function takes mouse object also input_path root folder mouse. adjusts paths registration segmentation data read relative root folder. function especially useful changed computers analyzing drive mappings may different.","code":""},{"path":"/reference/reset_mouse_root.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reset the root path for the folder containing the registration and segmentation data. — reset_mouse_root","text":"","code":"reset_mouse_root(m, input_path = NULL, print = TRUE)"},{"path":"/reference/reset_mouse_root.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reset the root path for the folder containing the registration and segmentation data. — reset_mouse_root","text":"m mouse object input_path (default = NULL) Reset root directory mouse object. print (bool, default = TRUE) Print changes console.","code":""},{"path":"/reference/reset_mouse_root.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reset the root path for the folder containing the registration and segmentation data. — reset_mouse_root","text":"m mouse object","code":""},{"path":"/reference/reset_mouse_root.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reset the root path for the folder containing the registration and segmentation data. — reset_mouse_root","text":"","code":"m <- reset_mouse_root(m, input_path = \"C:/Users/Documents/Mice/mouse_1/\", print = TRUE) #> Error in reset_mouse_root(m, input_path = \"C:/Users/Documents/Mice/mouse_1/\",     print = TRUE): There were no registration files found in the directory set as the input path. Please recheck where your folder is."},{"path":"/reference/rewire_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Implement rewiring algorithms to current empirical networks to randomize certain network properties, while\r\nkeeping other characterisitics constant (such as preserved degree sequence). These null networks can them be used to compare\r\nagainst and normalize the empirical networks. — rewire_network","title":"Implement rewiring algorithms to current empirical networks to randomize certain network properties, while\r\nkeeping other characterisitics constant (such as preserved degree sequence). These null networks can them be used to compare\r\nagainst and normalize the empirical networks. — rewire_network","text":"Note essentially erases edge metrics treats networks like binary graphs. Edge weights used calculating network topology metrics.","code":""},{"path":"/reference/rewire_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Implement rewiring algorithms to current empirical networks to randomize certain network properties, while\r\nkeeping other characterisitics constant (such as preserved degree sequence). These null networks can them be used to compare\r\nagainst and normalize the empirical networks. — rewire_network","text":"","code":"rewire_network(   e,   network_name,   channels = \"cfos\",   method = \"ms\",   ontology = \"unified\",   n_rewires = 10000,   n_networks = 100,   return_graphs = FALSE,   seed = 5 )"},{"path":"/reference/rewire_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Implement rewiring algorithms to current empirical networks to randomize certain network properties, while\r\nkeeping other characterisitics constant (such as preserved degree sequence). These null networks can them be used to compare\r\nagainst and normalize the empirical networks. — rewire_network","text":"e experiment object network_name (str) Name network channels (str)  Vector channels process method (str, default = \"ms\") \"ms\" implements Maslov-Sneppen rewiring approach (annuls network properties except network size, connection density, degree distribution). ontology (str, default = \"allen\") Region ontology use. options = \"allen\" \"unified\" n_rewires (int, default = 10000) number rewires randomization \"ms\" rewiring implementation. Recommended larger either 10,000 10*. edges graph. n_networks (int, default = 100) number random networks create return_graphs (logical, default = FALSE) TRUE, returns list organized channel containing sublist, element containing tidygraph object. must FALSE want run want summarize null network statistics summarize_null_networks() seed (int, default = 5) Random seed future replication.","code":""},{"path":"/reference/rewire_network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Implement rewiring algorithms to current empirical networks to randomize certain network properties, while\r\nkeeping other characterisitics constant (such as preserved degree sequence). These null networks can them be used to compare\r\nagainst and normalize the empirical networks. — rewire_network","text":"Summary table rewired network properties nodes showing average randomized network properties generated.","code":""},{"path":[]},{"path":"/reference/rois_intersect_region_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Get  a list of intersecting regions to a list of common regions — rois_intersect_region_list","title":"Get  a list of intersecting regions to a list of common regions — rois_intersect_region_list","text":"Get  list intersecting regions list common regions","code":""},{"path":"/reference/rois_intersect_region_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get  a list of intersecting regions to a list of common regions — rois_intersect_region_list","text":"","code":"rois_intersect_region_list(common_reg, rois)"},{"path":"/reference/rois_intersect_region_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get  a list of intersecting regions to a list of common regions — rois_intersect_region_list","text":"common_reg comprehensive list regions (existing subregions) brain area rois list compared . rois list rois whose regions subregions compared common_reg list","code":""},{"path":"/reference/rois_intersect_region_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get  a list of intersecting regions to a list of common regions — rois_intersect_region_list","text":"common_reg list rois (subregions) intersected common_reg list.","code":""},{"path":[]},{"path":"/reference/save_experiment.html","id":null,"dir":"Reference","previous_headings":"","what":"Save experiment data — save_experiment","title":"Save experiment data — save_experiment","text":"Saves experiment object attribute output path RDATA file save_experiment(e)","code":""},{"path":"/reference/save_experiment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save experiment data — save_experiment","text":"","code":"save_experiment(..., timestamp = FALSE)"},{"path":"/reference/save_experiment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save experiment data — save_experiment","text":"... parameter pass experiment object timestamp (bool) save object date tag","code":""},{"path":"/reference/save_mouse.html","id":null,"dir":"Reference","previous_headings":"","what":"Save mouse data — save_mouse","title":"Save mouse data — save_mouse","text":"Saves mouse object attribute output path RDATA file save_mouse(m)","code":""},{"path":"/reference/save_mouse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save mouse data — save_mouse","text":"","code":"save_mouse(..., timestamp = FALSE)"},{"path":"/reference/save_mouse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save mouse data — save_mouse","text":"... parameter pass mouse object timestamp (bool) save object date tag","code":""},{"path":"/reference/segmentation.object.html","id":null,"dir":"Reference","previous_headings":"","what":"segmentation object compatible with wholebrain package functions — segmentation.object","title":"segmentation object compatible with wholebrain package functions — segmentation.object","text":"segmentation object compatible wholebrain package functions","code":""},{"path":"/reference/segmentation.object.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"segmentation object compatible with wholebrain package functions — segmentation.object","text":"","code":"segmentation.object"},{"path":"/reference/segmentation.object.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"segmentation object compatible with wholebrain package functions — segmentation.object","text":"filter list storing parameter use segment get brain contours soma list storing cell count data","code":""},{"path":"/reference/sem.html","id":null,"dir":"Reference","previous_headings":"","what":"Standard error function — sem","title":"Standard error function — sem","text":"Standard error function","code":""},{"path":"/reference/sem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standard error function — sem","text":"","code":"sem(x)"},{"path":"/reference/sem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standard error function — sem","text":"x (vec)","code":""},{"path":[]},{"path":"/reference/simplify_by_keywords.html","id":null,"dir":"Reference","previous_headings":"","what":"Simplify dataframe by keywords. — simplify_by_keywords","title":"Simplify dataframe by keywords. — simplify_by_keywords","text":"Simplify dataframe keywords.","code":""},{"path":"/reference/simplify_by_keywords.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simplify dataframe by keywords. — simplify_by_keywords","text":"","code":"simplify_by_keywords(   df,   keywords = c(\"layer\", \"part\", \"stratum\", \"division\", \"leaflet\", \"Subgeniculate\",     \"island\", \"Islands\", \"Fields of Forel\", \"Cajal\", \"Darkschewitsch\", \"Precommissural\"),   ontology = \"allen\",   dont_fold = c(\"Dorsal part of the lateral geniculate complex\",     \"Ventral posterolateral nucleus of the thalamus, parvicellular part\",     \"Ventral posteromedial nucleus of the thalamus, parvicellular part\",     \"Ventral posterolateral nucleus of the thalamus, parvicellular part\",     \"Ventral posteromedial nucleus of the thalamus, parvicellular part\",     \"Substantia nigra\") )"},{"path":"/reference/simplify_by_keywords.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simplify dataframe by keywords. — simplify_by_keywords","text":"df (tibble) Must contain columns \"acronym\" \"name\" keywords (vec, default = c(\"layer\",\"part\",\"stratum\",\"division\", \"leaflet\", \"Subgeniculate\", \"island\", \"Islands\", \"Fields Forel\", \"Cajal\", \"Darkschewitsch\", \"Precommissural\")) list keywords simplify based region name. ontology (str, default = \"allen\") Region ontology use. options = \"allen\" \"unified\" dont_fold (vec, default = c(\"Dorsal part lateral geniculate complex\", \"Ventral posterolateral nucleus thalamus, parvicellular part\", \" Ventral posteromedial nucleus thalamus, parvicellular part\",\"Ventral posterolateral nucleus thalamus, parvicellular part\", \"Ventral posteromedial nucleus thalamus, parvicellular part\",\"Substantia nigra\")) Regions exceptions folded parent regions.","code":""},{"path":"/reference/simplify_by_keywords.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simplify dataframe by keywords. — simplify_by_keywords","text":"df","code":""},{"path":"/reference/simplify_cell_count.html","id":null,"dir":"Reference","previous_headings":"","what":"Simplify the combined cell count table — simplify_cell_count","title":"Simplify the combined cell count table — simplify_cell_count","text":"function designed offer flexible simplification mapped cells counts. can applied running combine_norm_cell_counts(). However, mapping conducted using SMARTR package, recommend simplifying mapped counts earlier, level mouse objects using normalize_cell_counts() options offered simplification flexible. benefit function can operate experiment objects externally imported combined cell counts tables formatted compatibility. allows simplification using ontologies. See available atlas options ontology parameter.","code":""},{"path":"/reference/simplify_cell_count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simplify the combined cell count table — simplify_cell_count","text":"","code":"simplify_cell_count(   e,   ontology = \"allen\",   simplify_keywords = c(\"layer\", \"part\", \"stratum\", \"division\", \"leaflet\",     \"Subgeniculate\", \"island\", \"Islands\", \"Fields of Forel\", \"Cajal\", \"Darkschewitsch\",     \"Precommissural\"),   dont_fold = c(\"Dorsal part of the lateral geniculate complex\",     \"Ventral posterolateral nucleus of the thalamus, parvicellular part\",     \"Ventral posteromedial nucleus of the thalamus, parvicellular part\",     \"Ventral posterolateral nucleus of the thalamus, parvicellular part\",     \"Ventral posteromedial nucleus of the thalamus, parvicellular part\",     \"Substantia nigra\") )"},{"path":"/reference/simplify_cell_count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simplify the combined cell count table — simplify_cell_count","text":"e experiment object ontology (str, default = \"allen\") Region ontology use. options = \"allen\" \"unified\" simplify_keywords (str vec, default =  c(\"layer\",\"part\",\"stratum\",\"division\", \"leaflet\", \"Subgeniculate\", \"island\", \"Islands\", \"Fields Forel\", \"Cajal\", \"Darkschewitsch\", \"Precommissural\")). Keywords search region names simplify parent structure. means parent structure also excluded list excluded right left dont_fold (vec) vector regions fold . regions can ","code":""},{"path":"/reference/simplify_cell_count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simplify the combined cell count table — simplify_cell_count","text":"e experiment object simplified keywords","code":""},{"path":"/reference/simplify_vec_by_keywords.html","id":null,"dir":"Reference","previous_headings":"","what":"Simplify vector of acronyms by keywords. — simplify_vec_by_keywords","title":"Simplify vector of acronyms by keywords. — simplify_vec_by_keywords","text":"Simplify vector acronyms keywords.","code":""},{"path":"/reference/simplify_vec_by_keywords.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simplify vector of acronyms by keywords. — simplify_vec_by_keywords","text":"","code":"simplify_vec_by_keywords(   vec,   keywords = c(\"layer\", \"part\", \"stratum\", \"division\", \"leaflet\", \"Subgeniculate\",     \"island\", \"Islands\", \"Fields of Forel\", \"Cajal\", \"Darkschewitsch\", \"Precommissural\"),   ontology = \"allen\",   dont_fold = c(\"Dorsal part of the lateral geniculate complex\",     \"Ventral posterolateral nucleus of the thalamus, parvicellular part\",     \"Ventral posteromedial nucleus of the thalamus, parvicellular part\",     \"Ventral posterolateral nucleus of the thalamus, parvicellular part\",     \"Ventral posteromedial nucleus of the thalamus, parvicellular part\",     \"Substantia nigra\") )"},{"path":"/reference/simplify_vec_by_keywords.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simplify vector of acronyms by keywords. — simplify_vec_by_keywords","text":"vec (vector) Must contain acronyms keywords (vec, default = c(\"layer\",\"part\",\"stratum\",\"division\")) list keywords simplify based region name. ontology (str, default = \"allen\") Region ontology use. options = \"allen\" \"unified\" dont_fold (vec, default = c(\"Dorsal part lateral geniculate complex\", \"Ventral posterolateral nucleus thalamus, parvicellular part\", \" Ventral posteromedial nucleus thalamus, parvicellular part\",\"Ventral posterolateral nucleus thalamus, parvicellular part\", \"Ventral posteromedial nucleus thalamus, parvicellular part\",\"Substantia nigra\")) Regions exceptions folded parent regions.","code":""},{"path":"/reference/simplify_vec_by_keywords.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simplify vector of acronyms by keywords. — simplify_vec_by_keywords","text":"df, dataframe tibble included long name acronyms simplified parents","code":""},{"path":"/reference/slice.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a slice object — slice","title":"Create a slice object — slice","text":"slice() constructs S3 object class 'slice'. slice object consists list lists storing information registration, segmentation, raw mapped data cleaned mapped data. object attributes also stored list.","code":""},{"path":"/reference/slice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a slice object — slice","text":"","code":"slice(   slice_ID = NA,   coordinate = -1,   atlas_plate = NA,   conversion_factor = 1.0833,   bin = 1,   z_width = 24,   hemisphere = NULL,   channels = c(\"eyfp\", \"cfos\", \"colabel\"),   registration_path = \"set registration image path\",   segmentation_path = \"set segmentation data path\",   slice_directory = NULL,   left_regions_excluded = c(\"fiber tracts\", \"VS\"),   right_regions_excluded = c(\"fiber tracts\", \"VS\"),   left_regions_included = NULL,   right_regions_included = NULL,   ... )"},{"path":"/reference/slice.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a slice object — slice","text":"slice_ID (str, default = NA) Slice name coordinate (num, default = -1) Allen mouse brain atlas coordinate aligning slice. atlas_plate (int, default = NA) Atlas place number. TODO: Currently unused conversion_factor (num, 1.0833) pixel--micron conversion factor bin (int, default = 1) Whether registration image binned ImageJ. z_width (num, default = 24) z-stack width um. hemisphere (str, default = NULL) Hemisphere process. \"left\", \"right\" NULL legal. channels (str, default = c(\"cfos\", \"eyfp\", \"colabel\")) channels process. registration_path (str, default = 'set registration image path') May deprecate favor slice_directory future versions. segmentation_path (str, default = 'set segmentation image path') Path image used segmentation function using base wholebrain::segment() function. slice_directory (str, default = NULL) root directory slice information registration segmentation images txt files stored given slice. TODO: May change import registration functions rely path. left_regions_excluded (str, default = (\"layer 1\",\"PIR1\",\"TR1\",\"PAA1\",\"NLOT1\",\"OT1\",\"MOBgl\",\"OV\",\"VLPO\",\"\", \"BA\",\"TU\",\"MEAav\",\"\",\"TMv\",\"PVp\",\"SUMl\",\"SCzo\",\"fiber tracts\",\"VS\")) list acronyms corresponding regions exclude slice's left hemisphere. right_regions_excluded (str, default = (\"layer 1\",\"PIR1\",\"TR1\",\"PAA1\",\"NLOT1\",\"OT1\",\"MOBgl\",\"OV\",\"VLPO\",\"\", \"BA\",\"TU\",\"MEAav\",\"\",\"TMv\",\"PVp\",\"SUMl\",\"SCzo\",\"fiber tracts\",\"VS\")) list acronyms corresponding regions exclude slice's right hemisphere. left_regions_included (str, default = NULL) List acronyms regions include left hemisphere. regions exsluded. NULL, takes precedence left_regions_excluded. right_regions_included (str, default = NULL) List acronyms regions include right hemisphere. regions exsluded. NULL, takes precedence right_regions_excluded. ... additional custom keyword pair attributes like store","code":""},{"path":"/reference/slice.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a slice object — slice","text":"slice, colloquial term object class 'slice'. 'slice' object also list, class list.","code":""},{"path":"/reference/slice.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a slice object — slice","text":"slice attributes can assigned arguments slice constructor function. See parameters listed default values attributes Note able add custom attributes keyword pairs, like keep track additional piece information. However, serve descriptive purpose used analysis. may need use slice attributes fill many applicable experiment.","code":""},{"path":"/reference/slice.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a slice object — slice","text":"","code":"slice_example <- slice() # initializes a slice object"},{"path":"/reference/SMARTR.html","id":null,"dir":"Reference","previous_headings":"","what":"SMARTR: A mapping, analysis, and visualization package for wholebrain dual-ensemble coronal datasets. — SMARTR","title":"SMARTR: A mapping, analysis, and visualization package for wholebrain dual-ensemble coronal datasets. — SMARTR","text":"base pipeline R package title, SMARTR, self-referential play previous package developed extension wholebrain called SMART.  package allows user-friendly pre-processing segmentation data generated ImageJ compatible wholebrain package generate region-based cell counts normalized volume. also provides tools data analysis based experimental groupings.","code":""},{"path":"/reference/SMARTR.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"SMARTR: A mapping, analysis, and visualization package for wholebrain dual-ensemble coronal datasets. — SMARTR","text":"Object descriptions data analysis stored objects allow neat bundling useful information together. slice object contain data related registration, segmentation channel, cell counts particular image. also contain “metadata” experimental images, experimenter-assigned slice ID , brain atlas AP coordinate matches best given image, path image used registration . metadata stored object’s attributes. mouse object object store multiple slice objects (therefore information ), eventually store combined cell data region cell counts normalized volume. Like slice, also contain “metadata” mouse stored attributes. experimentAn experiment object consists list processed mouse objects raw data slices omitted, experimental attributes stored list. also contain “metadata” experimental personnel analysis groups stored attributes.","code":""},{"path":"/reference/SMARTR.html","id":"the-package-currently-allows-for-easy-implementation-of-the-following-steps","dir":"Reference","previous_headings":"","what":"The package currently allows for easy implementation of the following steps","title":"SMARTR: A mapping, analysis, and visualization package for wholebrain dual-ensemble coronal datasets. — SMARTR","text":"Setting pipeline specifying experimentparameters, save directories. interactive registration process. Importing raw segmentation data .txt files generated ImageJ multiple channels. Optionally creating filter 'cfos' 'eyfp' channels clean segmented counts. Creating segmentation object compatible wholebrain functions. Forward warping mapping data onto standardized mouse atlas. Cleaning mapped data following ways: + Removing cells map outside boundaries atlas. Omitting regions default list regions omit. Omitting regions user specified region acronyms. Removing Layer 1 cells Removing cells contralateral hemisphere per slice registrations divided right left hemispheres. Obtaining cell counts normalized region volume (per mm^2^) region areas (per mm^2^).","code":""},{"path":"/reference/summarise_networks.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize multiple networks. Create summary dataframes of for multiple networks and\r\ncalculate network statistics for each network. — summarise_networks","title":"Summarize multiple networks. Create summary dataframes of for multiple networks and\r\ncalculate network statistics for each network. — summarise_networks","text":"Summarize multiple networks. Create summary dataframes multiple networks calculate network statistics network.","code":""},{"path":"/reference/summarise_networks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize multiple networks. Create summary dataframes of for multiple networks and\r\ncalculate network statistics for each network. — summarise_networks","text":"","code":"summarise_networks(   e,   network_names,   channels = c(\"cfos\", \"eyfp\", \"colabel\"),   save_stats = TRUE,   save_degree_distribution = TRUE,   save_betweenness_distribution = TRUE,   save_efficiency_distribution = TRUE )"},{"path":"/reference/summarise_networks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize multiple networks. Create summary dataframes of for multiple networks and\r\ncalculate network statistics for each network. — summarise_networks","text":"e experiment object network_names (str) names networks generate summary tables , e.g. network_names = c(\"female_AD\", \"female_control\") channels (str, default = c(\"cfos\", \"eyfp\", \"colabel\")) channels process. save_stats (bool, default = TRUE) Save summary stats csv file output folder. Note clustering calculated average local vertex clustering. save_degree_distribution (bool, default = TRUE) Save network degree distributions (frequencies degree) across comparison group csv file. save_betweenness_distribution (bool, default = TRUE) Save betweenness distribution summary csv. save_efficiency_distribution (bool, default = TRUE) Save efficiency distribution summary csv.","code":""},{"path":"/reference/summarise_networks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize multiple networks. Create summary dataframes of for multiple networks and\r\ncalculate network statistics for each network. — summarise_networks","text":"e experiment object","code":""},{"path":"/reference/summarise_networks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize multiple networks. Create summary dataframes of for multiple networks and\r\ncalculate network statistics for each network. — summarise_networks","text":"","code":"e <- get_network_statistics(e,  network_names = c(\"female_AD\", \"female_control\"), channels = c(\"cfos\", \"eyfp\", \"colabel\"), save_stats = TRUE, save_degree_distribution = TRUE) #> Error in get_network_statistics(e, network_names = c(\"female_AD\", \"female_control\"),     channels = c(\"cfos\", \"eyfp\", \"colabel\"), save_stats = TRUE,     save_degree_distribution = TRUE): could not find function \"get_network_statistics\""},{"path":"/reference/summarize_null_networks.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize the parameters of the rewired null networks generated by rewire_network() — summarize_null_networks","title":"Summarize the parameters of the rewired null networks generated by rewire_network() — summarize_null_networks","text":"Summarize parameters rewired null networks generated rewire_network()","code":""},{"path":"/reference/summarize_null_networks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize the parameters of the rewired null networks generated by rewire_network() — summarize_null_networks","text":"","code":"summarize_null_networks(   null_nodes_p1,   null_nodes_p2,   network_name_1 = p[[1]],   network_name_2 = p[[2]],   channel = \"cfos\" )"},{"path":"/reference/summarize_null_networks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize the parameters of the rewired null networks generated by rewire_network() — summarize_null_networks","text":"null_nodes_p1 Summary table rewired network properties nodes rewire_network() first network compare. null_nodes_p2 Summary table rewired network properties nodes rewire_network() second network compare network_name_1 (str) Name network network_name_2 (str) Name network channel (str)   channel process","code":""},{"path":"/reference/summarize_null_networks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize the parameters of the rewired null networks generated by rewire_network() — summarize_null_networks","text":"list length 2. first element named global_summary contains table global summary statistics. second element named node_summary, contained per node statistics averaged multiple null networks.","code":""},{"path":"/reference/summarize_null_networks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize the parameters of the rewired null networks generated by rewire_network() — summarize_null_networks","text":"","code":"if (FALSE) { null_nodes_p1 <- rewire_network(anesthesia,                                 channels = \"cfos\",                                 network_name = \"Ctrl\",                                 n_rewires = igraph::gsize(anesthesia$networks$Ctrl$cfos)*100,  # no. edge rewires = no. edges in the graph x 100                                 return_graphs = FALSE) }"},{"path":"/reference/try_correlate.html","id":null,"dir":"Reference","previous_headings":"","what":"Try to correlate — try_correlate","title":"Try to correlate — try_correlate","text":"Try correlate","code":""},{"path":"/reference/try_correlate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Try to correlate — try_correlate","text":"","code":"try_correlate(df_channel, type = \"pearson\")"},{"path":"/reference/try_correlate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Try to correlate — try_correlate","text":"df_channel","code":""},{"path":[]},{"path":"/reference/volcano_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of the permutation histogram used to determine the p-value of the pairwise region comparison — volcano_plot","title":"Plot the results of the permutation histogram used to determine the p-value of the pairwise region comparison — volcano_plot","text":"Create Volcano plot.","code":""},{"path":"/reference/volcano_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of the permutation histogram used to determine the p-value of the pairwise region comparison — volcano_plot","text":"","code":"volcano_plot(   e,   permutation_comparison = \"female_AD_vs_male_AD\",   channels = c(\"cfos\", \"eyfp\", \"colabel\"),   colors = c(\"#be0000\", \"#00782e\", \"#f09b08\"),   save_plot = TRUE,   title = NULL,   ylim = c(0, 3),   height = 8,   width = 10,   print_plot = TRUE,   plt_theme = NULL,   point_size = 1,   image_ext = \".png\" )"},{"path":"/reference/volcano_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of the permutation histogram used to determine the p-value of the pairwise region comparison — volcano_plot","text":"e experiment object permutation_comparison name correlation group comparisons plot. channels (str, default = c(\"cfos\", \"eyfp\", \"colabel\")) channels plot. colors (str, default = c(\"#be0000\", \"#00782e\", \"#f09b08\")) Hexadecimal code colors corresponding channels attribute correlation_list. Color values can also input compatible ggplot2 plotting functions. save_plot (bool, default = TRUE) Save figures subdirectory experiment object output folder. title Title plot. height height plot inches. width width plot inches. print_plot (bool, default = TRUE) Print plot graphics windows. plt_theme (default = NULL) Add ggplot2::theme() plot. NULL, default taken.. point_size (default = 1) Size plotted points. image_ext (default = \".png\") image extension save plot .","code":""},{"path":"/reference/volcano_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of the permutation histogram used to determine the p-value of the pairwise region comparison — volcano_plot","text":"p_list list length number channels, element containing plot handle channel.","code":""},{"path":"/reference/volcano_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot the results of the permutation histogram used to determine the p-value of the pairwise region comparison — volcano_plot","text":"Plot correlation difference two comparison groups volcano plot. function correlation_diff_permutation() must run first order generate results plot.","code":""},{"path":"/reference/volcano_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the results of the permutation histogram used to determine the p-value of the pairwise region comparison — volcano_plot","text":"","code":"volcano_plot(e, permutation_comparison = \"female_AD_vs_male_AD\", channels = c(\"cfos\", \"eyfp\", \"colabel\"), colors =  c(\"#be0000\", \"#00782e\", \"#f09b08\"), save_plot = TRUE, title = NULL, ylim = c(0, 3), height = 8, width = 10, print_plot = TRUE, image_ext = \".png\") #> Error in volcano_plot(e, permutation_comparison = \"female_AD_vs_male_AD\",     channels = c(\"cfos\", \"eyfp\", \"colabel\"), colors = c(\"#be0000\",         \"#00782e\", \"#f09b08\"), save_plot = TRUE, title = NULL,     ylim = c(0, 3), height = 8, width = 10, print_plot = TRUE,     image_ext = \".png\"): object 'e' not found"},{"path":"/news/index.html","id":"smartr-0009000","dir":"Changelog","previous_headings":"","what":"SMARTR 0.0.0.9000","title":"SMARTR 0.0.0.9000","text":"First release SMARTR","code":""},{"path":"/news/index.html","id":"smartr-100","dir":"Changelog","previous_headings":"","what":"SMARTR 1.0.0","title":"SMARTR 1.0.0","text":"Major change way area/volume regions calculated account bug underlying atlas wholebrain pulls wrong region registration outlines certain subregions. Specifically, areas DG-sg DG-mo represented twice atlas plate hippocampus curves rostral-caudally. Previously one two subregion outlines used calculate area, now fixed. Change exclude_anatomy, get_registered_volumes, normalize_cell_counts functions include simplify_keywords parameter automatically re categorizes subregions major parent regions based specific keywords. Modified normalize_cell_counts combine_cell_counts function also store counts areas/volume slice mouse experiment objects, respectively. allows easy evaluation raw mapped dataset. various analysis visualization function now compatible Kim lab’s unified atlas. unified atlas synthesizes label two highly used atlases –Franklin-Paxinos (FP) common coordinate framework (CCF) Allen Institute.Check various help pages analysis plotting functions see ones now includeontology relevant parameter. Simply change value allen unified process datasets using ontology. New function simplify_cell_count can process external datasets simplify regions based keywords. Simplification based user indicated atlas (allen unified)","code":""},{"path":"/news/index.html","id":"smartr-101","dir":"Changelog","previous_headings":"","what":"SMARTR 1.0.1","title":"SMARTR 1.0.1","text":"New function export_permutation_results reformats permutation results saves nicely users. Tables now saved autocreated tables folder output directory organization. Added create_joined_networks plot_joined_networks capability visualize overlapping edges two networks outer joined nodes. capability export list overlapping edges joined network included parameter create_joined_networks. See documentation details. Altered plot_correlation_heatmaps() function automatically plot parent regions subfacets","code":""}]
