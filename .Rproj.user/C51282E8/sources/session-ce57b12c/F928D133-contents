---
title: "LH Wholebrain Analysis Notebook"
author: "Simon Ogundare"
date: "`r Sys.Date()`"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(SMARTR)
quartz <- x11
```

## R Markdown



```{r}

plot_normalized_counts <- function(e,
                                   channels = c("cfos", "eyfp", "colabel"),
                                   groups = c("Context", "Shock"),
                                   colors = c("white", "lightblue"),
                                   title = NULL,
                                   height = 7,
                                   width = 20,
                                   print_plot = TRUE,
                                   save_plot = TRUE,
                                   remove_general_parents = TRUE,
                                   image_ext = ".png") {
   
   if (get_os() != "osx") {
      quartz <- X11
   }
   
   p_list <- vector(mode = 'list', length = length(channels))
   names(p_list) <- channels
   
   for (k in 1:length(channels)) {
      channel_counts <- e$combined_normalized_counts[[channels[k]]] %>%
         filter(group %in% groups) %>%
         select(group, mouse_ID, name, acronym, normalized.count.by.volume) %>%
         group_by(group, acronym, name) %>%
         summarise(mean_normalized_counts = mean(normalized.count.by.volume),
                   sem = sd(normalized.count.by.volume)/sqrt(n()))
      
      if (remove_general_parents) {
         regions_to_remove <- c("CTX", "grey", "MB")
         channel_counts <- channel_counts[-c(which(channel_counts$acronym %in% regions_to_remove)),]
      }
      
      if (length(colors) != length(groups)) {
         stop("Number of custom colors does not equal the number of groups assigned!")
      }
      
      channel_counts$group <- factor(channel_counts$group, levels = groups)
      
      cell_counts_plot <- channel_counts %>%
         ggplot(aes(y = mean_normalized_counts, x = name,
                    fill = group), color = "black") +
         geom_col(position = position_dodge(0.8), width = 0.8, color = "black") +
         geom_errorbar(aes(ymin = mean_normalized_counts - sem,
                           ymax = mean_normalized_counts + sem, x = name),
                       position = position_dodge(0.8),
                       width = 0.5,
                       color = "black") +
         labs(title = title,
              y = bquote('Cell counts '('cells/mm'^3)),
              x = "",
              fill = "Group") +
         scale_y_continuous(expand = c(0,0)) +
         scale_fill_manual(values=colors) +
         theme_bw() +
         theme(
            plot.background = element_blank(),
            panel.grid.major = element_blank(),
            panel.grid.minor = element_blank(),
            panel.border = element_blank()) +
         theme(axis.line = element_line(color = 'black')) +
         theme(legend.position = "none") +
         theme(axis.text.x = element_text(angle = 50, hjust = 1))
      
      if (print_plot) {
         quartz()
         print(cell_counts_plot)
      }
      
      if (save_plot) {
         ggsave(cell_counts_plot, filename = paste0(channels[k], "_normalized_counts", image_ext), path = file.path(attr(e, 'info')$output_path, "figures"), width = width, height = height)
      }
      
      p_list[[channels[k]]] <- cell_counts_plot
   }
   
   return(p_list)
}


```


```{r}
#eyfp.colors <- c(Context = "#FFFFFF", Shock = "#03AC03") # shamrock green
#eyfp.colors <- c(Context = "#FFFFFF", Shock = "#3CB043") # regular green
eyfp.colors <- c(Context = "#FFFFFF", Shock = "#028A0F")  # emerald green
cfos.colors <- c(Context = "#FFFFFF", Shock = "#ff2a04")
colabel.colors <- c(Context = "#FFFFFF", Shock = "#ffc845")


plot_normalized_counts(e = lh,
                       channels = c("cfos"),
                       groups = c("Context", "Shock"),
                       colors = cfos.colors,
                       title = NULL,
                       height = 7,
                       width = 20,
                       print_plot = TRUE,
                       save_plot = TRUE,
                       remove_general_parents = TRUE,
                       image_ext = ".pdf")

plot_normalized_counts(e = lh,
                       channels = c("eyfp"),
                       groups = c("Context", "Shock"),
                       colors = eyfp.colors,
                       title = NULL,
                       height = 7,
                       width = 20,
                       print_plot = TRUE,
                       save_plot = TRUE,
                       remove_general_parents = TRUE,
                       image_ext = ".pdf")

plot_normalized_counts(e = lh,
                       channels = c("colabel"),
                       groups = c("Context", "Shock"),
                       colors = colabel.colors,
                       title = NULL,
                       height = 7,
                       width = 20,
                       print_plot = TRUE,
                       save_plot = TRUE,
                       remove_general_parents = TRUE,
                       image_ext = ".pdf")

```

